<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-06T22:15:37+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LeeJellan</title><subtitle>안녕하세요!🙂 IT,여행,기타 등 기록을 남기기위한 블로그 입니다 !</subtitle><author><name>LEE JAEHYEOK</name></author><entry><title type="html">TIL) 배포 컨테이너 Docker</title><link href="http://localhost:4000/til/2022/12/06/til.html" rel="alternate" type="text/html" title="TIL) 배포 컨테이너 Docker" /><published>2022-12-06T00:00:00+09:00</published><updated>2022-12-06T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/12/06/til</id><content type="html" xml:base="http://localhost:4000/til/2022/12/06/til.html"><![CDATA[<h2 id="docker">Docker</h2>

<p>실제 선박의 컨테이너라함은 여러가지 물자들은 하나의 컨테이너에 싦어<br />
부피,인력,물자 이동 등 엄청난 장점을 가져왔다.</p>

<p>소프트웨어 측면에서도 배포하는 과정을 편하게 사용하고 여러 장점을 가지기 위해<br />
애플리케이션을 컨테이너화할 수 있는 도커가 등장했다.<br />
즉, 컨테이너 방식의 애플리케이션이라는 뜻은 실행환경에 <br />
구애받지 않고 실행시킬 수 있다는 뜻이다.</p>

<p>가장 많이 듣는 용어를 적어본다.</p>

<ul>
  <li>
    <p><strong>컨테이너</strong><br />
애플리케이션이 의존성, 네트워크 환경, 파일 시스템에 구애받지 않고<br />
도커라는 기술 위에 실행될 수 있도록 만든 애플리케이션 상자이다.<br />
즉, <strong>도커에 의해 관리/제공되는 애플리케이션 단위이다.</strong></p>
  </li>
  <li>
    <p><strong>이미지</strong><br />
모든 컨테이너는 이미지로 부터 생성된다.<br />
이미지를 이용해 여러개의 컨테이너를 생성할 수 있고, 애플리케이션 <br />
수평확장이 가능하다. 즉, <strong>도커 컨테이너를 생성하는데 사용되는 템플릿이다.</strong></p>
  </li>
  <li>
    <p><strong>레지스트리</strong><br />
이미지는 레지스트리에 저장된다. 대포적으로<br />
Docker Hub, Amazon ECR등이 있다.<br />
즉, <strong>도커 이미지를 저장하고 배포/공유하는데 사용한다.</strong></p>
  </li>
</ul>

<p><br /></p>

<h3 id="docker-컨테이너-방식의-장점">Docker 컨테이너 방식의 장점</h3>

<p><strong>1). 의존성 충돌 문제를 해결</strong><br />
컨테이너 기술을 바탕으로 한 컴퓨터 안에 여러대의 컨테이너가 있다.<br />
애플리케이션 실행 환경이 격리되어있다는 뜻이므로<br />
각자 고유의 의존성을 포함하고 있다.</p>

<p>그렇다면, 어떤 자원을 독립적으로 가지고 있는지 알아보자</p>
<ol>
  <li>프로세스<br />
-. 특정 컨테이너에서 작동하는 프로세스는 기본적으로 그 컨테이너 안에서만 액세스 가능<br />
-. 컨테이너 안에서 실행되는 프로세스는 다른 컨테이너의 프로세스에게 영향 X</li>
  <li>네트워크<br />
-. 기본으로 컨테이너 하나에 하나의 IP 주소가 할당</li>
  <li>파일 시스템<br />
-. 컨테이너 안에서 사용되는 파일 시스템은 구획화 되어있다.<br />
그래서 해당 컨테이너에서의 명령이나 파일 등의 액세스를 제한 할 수 있다.</li>
</ol>

<p><br /></p>

<p><strong>2). 개발과 배포 환경을 일치 시켜준다.</strong><br />
Docker를 사용하면 OS에 상관없이 즉시 애플리케이션 실행 환경을 만들 수 있다.<br />
그리고 개발 컨테이너 위에서 진행할 경우, 모든 개발팀이 동일한 환경 하에<br />
개발을 진행할 수 있다.</p>

<p><strong>3). 수평 확장을 쉽게 해준다, 각 서버에 새로운 내용을 배포하기 쉽게 만들어준다.</strong><br />
컨테이너 기술의 가장 큰 장점은 실행 환경의 일치이다.<br />
엄청난 트래픽을 요구하는 애플리케이션들은 단하나의 서버가 아니라<br />
트래픽을 분산하기 위해 프록시 서버를 운영한다고 한다.</p>

<p>프록시 서버는 여러 대의 동일한 서버 중 한군데를 이용할 수 있도록 돕는데<br />
동일한 서비스가 여러 컴퓨터에서 작동하기위해서 편리하게 사용하는 기술이 컨테이너 기술이다.</p>

<p><br /></p>

<h3 id="docker-설치">Docker 설치</h3>

<p>현재 나는 MacOS를 사용하고 있기때문에<br />
<a href="https://docs.docker.com/desktop/install/mac-install/">Docker Mac install</a>를 접속해 도커를 설치할 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOirwJaCgDYW20G-JPu9KXSWfoPXL55k_PPeZhnPzs4qxZUhExHL7cjPH110xQtywGE6J71t1n7aRJnz0k2XmPKfqNofg=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>도커 설치를 완료하면 위와 같은 애플리케이션 GUI 확인이 가능하다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nt">--version</span>
</code></pre></div></div>
<p>실제로 CLI로 버젼을 입력할 경우 정상적으로 설치되었으면<br />
현재 설치된 버전이 나올 것이다.</p>

<p><br /></p>

<h3 id="docker-사용전-명령어-보기">Docker 사용전 명령어 보기</h3>

<p>Docker GUI를 이용하지 않고<br />
<a href="https://docs.docker.com/engine/reference/commandline/container_run/">CLI</a>를 통한 연습을 진행해보려한다.</p>

<p>그전에 선행되어야하는 것이 명령어를 먼저 알아야한다.</p>

<h4 id="1-이미지-관련-명령어">1). 이미지 관련 명령어</h4>

<p>✅ 설치된 이미지 조회하는 명령어이다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker image <span class="nb">ls</span>
</code></pre></div></div>

<p><br /></p>

<p>✅ 이미지를 설치하는 방법이다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker image pull 이미지이름:tag
</code></pre></div></div>

<p><br /></p>

<p>✅ 설치되어 있는 이미지를 삭제하는 방법이다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker image <span class="nb">rm </span>이미지이름
</code></pre></div></div>
<p>만약 이미지를 컨테이너에 사용할 경우 삭제가 불가능하다.<br />
컨테이너를 종료시키고 삭제 후 에 이미지를 삭제해야한다.</p>

<p><br /></p>

<h4 id="2-컨테이너-관련-명령어">2). 컨테이너 관련 명령어</h4>

<p>✅ 설치되어 있는 이미지를 삭제하는 방법이다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container run <span class="nt">--name</span> 컨테이너이름 <span class="nt">-p</span> 8080:80 이미지이름
</code></pre></div></div>
<p><strong>컨테이너 이름</strong>은 우리가 정하면 된다.</p>

<p><strong>이미지 이름</strong>은 설치한 이미지의 이름을 적어주면되는데<br />
만약 해당 이미지으 tag가 있다면 <code class="language-plaintext highlighter-rouge">이미지이름:tag</code> 를 적어줘야한다.<br />
여기서 tag라 함은 <code class="language-plaintext highlighter-rouge">latest</code>, <code class="language-plaintext highlighter-rouge">2.0</code>이라든가의 버젼을 의미한다.</p>

<p>또한 포트번호는 8080:80이라고 적어두었는데<br />
첫번쨰 포트는 내부포트이고 두번쨰 포트는 외부포트이다.<br />
외부에서 통신을하기 위한 통신 포트를 요청하면<br />
컨테이너의 내부포트로 forwarding 하겠다는 의미이다.<br />
즉, 8080포트로 요청할 경우 80으로 포트포워딩 하겠다는 뜻이다.<br />
<a href="https://ooeunz.tistory.com/104">Port Forwarding 참고 - ooeunz님 블로그</a></p>

<p><br /></p>

<p>✅ 컨테이너 리스트 출력</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container ps <span class="nt">-a</span>
</code></pre></div></div>

<p><br /></p>

<p>✅ 실행중인 컨테이너 리스트 출력</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container <span class="nb">ls</span>
</code></pre></div></div>
<p>컨테이너 리스트 출려과는 다르다. 현재 start되어있는 컨테이너만 출력되어진다.</p>

<p><br /></p>

<p>✅ 컨테이너 실행</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container start 컨테이너이름
</code></pre></div></div>
<p>컨테이너를 백그라운드 상태로 실행시킬 수 있는 명령어이다.</p>

<p><br /></p>

<p>✅ 컨테이너 중지</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container stop 컨테이너이름
</code></pre></div></div>
<p>살행 중인 컨테이너를 종료하는 명령어이다.</p>

<p><br /></p>

<p>✅ 컨테이너 삭제</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container <span class="nb">rm </span>컨테이너이름
</code></pre></div></div>
<p>컨테이너를 중지시킨다음, 해당 컨테이너가 필요없을 경우<br />
해당 명령얼 컨테이너를 삭제할 수 있다.</p>

<p><br /></p>

<p>✅ 컨테이너 내부 접근</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">exec</span> <span class="nt">-it</span> 컨테이너이름 bash
</code></pre></div></div>
<p>선택한 컨테이너를 bash CLI로 접근할 수 있다.</p>

<p><br /></p>

<p>✅ 현재 폴더의 파일을 컨테이너의 경로에 복사하기</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container <span class="nb">cp</span> ./ 컨테이너이름:/경로
</code></pre></div></div>

<p><br /></p>

<p>✅ 구동중인 컨테이너를 지정해 이미지로 만들기</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container commit 컨테이너이름 이미지이름:tag
</code></pre></div></div>

<p><br /></p>

<p>✅ 이미지 빌드하는 방법</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--tag</span> 이미지이름:tag <span class="nb">.</span> 
</code></pre></div></div>
<p>Dockerfile을 만들고, Dockerfile 대로 이미지를 build하는 방법이다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM httpd:2.4 
COPY ./ /usr/local/apache2/htdocs/
</code></pre></div></div>
<p>와 같은 형식으로 Dockerfile을 만든다.<br />
위에 내용을 해석하자면 베이스 이미지르 httpd로 사용<br />
현재경로에(./) 있는 파일들을 특정경로(/usr/local/apache2/htdocs/)로 이동한다.</p>

<p>이렇게 빌드된 이미지를 이제 컨테이너로 사용할 수 있다.</p>

<p><br /></p>

<h3 id="docker-사용해보기">Docker 사용해보기</h3>

<p>순서는 레지스트리에서 이미지를 받고 컨테이너를 만들면된다.<br />
그리고 해당 컨테이너 주소로 접속해 우리가 하려고하는 <br />
애플리케이션의 테스트가 가능하다.</p>

<h4 id="hello-docker">Hello docker</h4>
<p>우선 만들어 놓은 프로젝트가 없으니<br />
간단한 이미지 부터 사용해보려한다.</p>

<p><a href="https://hub.docker.com/">dockerhub</a>에서 여러가지 이미지를 받을 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOVWTMjVY1qXqFAq126SrK8teCYWrYjuD9AUm4P7X5-jZFdC34n7mts1L9tvQHKnubRGziozwnzaI33PP8bx462unP0xQ=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>그 중 귀여운 고래화면을 띄워주는 <code class="language-plaintext highlighter-rouge">docker/whalesay</code>를 검색해보자<br />
검색해보면 오른쪽에 커맨드로 도커를 가져올 수 있는 명령어가 있고<br />
사용 방법에 대한 내용이 쭉 나와 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull docker/whalesay
</code></pre></div></div>
<p>를 입력해주면 해당 이미지를 다운 받는다</p>

<p>그리고 컨테이너를 시작시켜주는 명령어를 사용하면 된다.<br />
해당 이미지에선 사용하는 방법을 설명해준다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run docker/whalesay cowsay boo
</code></pre></div></div>
<p>를 입력하게 되면</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> _____
&lt; boo <span class="o">&gt;</span>
 <span class="nt">-----</span>
    <span class="se">\</span>
     <span class="se">\</span>
      <span class="se">\</span>
                    <span class="c">##        .</span>
              <span class="c">## ## ##       ==</span>
           <span class="c">## ## ## ##      ===</span>
       /<span class="s2">""""""""""""""""</span>___/ <span class="o">===</span>
  ~~~ <span class="o">{</span>~~ ~~~~ ~~~ ~~~~ ~~ ~ /  <span class="o">===</span>- ~~~
       <span class="se">\_</span>_____ o          __/
        <span class="se">\ </span>   <span class="se">\ </span>       __/
          <span class="se">\_</span>___<span class="se">\_</span>_____/
</code></pre></div></div>
<p>이러한 귀여운 고래 모습을 볼 수 있다.</p>

<p>이제 간단한 이미지를 다운받아 사용까지 해보았다.<br />
삭제를 하려면 컨테이너에서 먼저 삭제한다음<br />
이미지를 삭제해주면 된다.</p>

<p><br /></p>

<h4 id="httpd-사용해보기">httpd 사용해보기</h4>

<p>이제 본격적으로 사용해보자 homebrew <code class="language-plaintext highlighter-rouge">httpd</code>를 사용하듯<br />
Apache HTTP Server인 <code class="language-plaintext highlighter-rouge">httpd</code> 이미지를 이용해<br />
웹서버를 띄워 볼 수 도 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container run <span class="nt">--name</span> <span class="nb">test</span> <span class="nt">-p</span> 818:80 httpd
</code></pre></div></div>
<p>test라는 이름의 컨테이너로 818포트를 80포트로 포워딩하게 해두었다.<br />
httpd의 기본포트는 80번으로 설정되어있다.</p>

<p>해당 컨테이너를 실행한 후에 <code class="language-plaintext highlighter-rouge">http://localhost:818</code>로 접속하면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNFNMWOpsHkODxYQxJgNRxLj1AeHg2F0fO44DfPsxGt3X1MLhhs0yKVwVkF5SiESv9ODhQJ4xY0Mpgki2MHFCrIEQgc=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>기존에 Apache HTTP Server를 띄우는 것처럼<br />
기본 html인 It works!가 확인이 가능하다.</p>

<p><br /></p>

<h4 id="httpd-서버에-프로그램-올리기">httpd 서버에 프로그램 올리기</h4>

<p>이제 여기서 우리가 해당 컨테이너에 프로그램을 넣을 수 있다.<br />
예를 들어 <code class="language-plaintext highlighter-rouge">팩맨 게임</code>을 해당 웹서버에 올린다고 가정하자.<br />
(해당 게임 프로그램은 <a href="https://github.com/daleharvey/pacman">pacman github</a>에서 클론 받을 수 있다.)</p>

<p>방법은 2가지 정도가 있다.<br />
첫번째 방법은 현재 컨테이너에다가 파일을 복사하는 방법과<br />
두번째 방법은 Dockerfile을 이용해 이미지를 다시만든다음에 컨테이너로 만들면된다.</p>

<p>첫번째 방법 부터해보자<br />
현재 만들어둔 test 컨테이너 안에 httpd 경로에 파일을 복사하면된다.<br />
실제로 컨테이너를 접속해보면 <code class="language-plaintext highlighter-rouge">/usr/local/apache2/htdocs/</code>경로에<br />
<code class="language-plaintext highlighter-rouge">index.html</code>파일이 있는 것을 볼 수 있다. 해당 파일은 It works! 파일이다.<br />
해당 경로에 내가 올리려는 <code class="language-plaintext highlighter-rouge">팩맨 게임</code>의 <code class="language-plaintext highlighter-rouge">index.html</code>과 여러 파일들을 넣어주면 된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container <span class="nb">cp</span> ./ <span class="nb">test</span>:/usr/local/apache2/htdocs/
</code></pre></div></div>
<p>이제 내가가지고 있는 프로그램 파일 경로로 접속해<br />
해당 명령어를 입력해주면 해당 경로에 있는 파일들이<br />
전부 test 컨테이너의 해당 경로로 복사되어진다.</p>

<p>그리고 다시 컨테이너를 시작해준다면</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker container start <span class="nb">test</span>
</code></pre></div></div>
<p>백그라운드로 실행 될 것이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNlwmnQmaBw58r6RaXn6r0cqk2S5p1PNxjI-p9i_FN0dP0id_Gk2udyi8M6KHtwMnNn9bcC67lLPdIL1OD4gr_HuSlLtA=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><code class="language-plaintext highlighter-rouge">팩맨 게임</code>이 실제로 동작하는 것을 볼 수 있다.</p>

<p><br /></p>

<p>두번째 방법으로는
<code class="language-plaintext highlighter-rouge">팩맨 게임</code>폴더에 <code class="language-plaintext highlighter-rouge">Dockerfile</code>이라는 <br />
이름의 파일을 만든다. 그리고 해당 파일 안에는</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>FROM httpd:2.4
COPY ./ /usr/local/apache2/htdocs/
</code></pre></div></div>
<p>와 같은 내용을 넣어준다. (설명은 명령어에서 설명했으므로 생략)</p>

<p>그리고 build 명령어를 이용해서 이미지를 빌드할 수 있다.<br />
명령어를 실행할때는 <code class="language-plaintext highlighter-rouge">Dockerfile</code> 경로에서 입력해야한다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker build <span class="nt">--tag</span> pacman:2.0 <span class="nb">.</span>
</code></pre></div></div>
<p>build 명령어를 실행하면, 이미지 파일이 생성되고<br />
해당 이미지 파일로 이제 컨테이너를 실행시키면 된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--name</span> pacmangametest <span class="nt">-p</span> 818:80 pacman:2.0
</code></pre></div></div>

<p><br /></p>

<p>이렇게 CLI로 명령어로 docker를 사용하는 방법을<br />
간단하게 알아보았다. 실제로 우리가 만든 이미지와 컨테이너들을<br />
처음에 설치했던 GUI에서 확인이 가능하다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPo7gNUnHKL8zeCRsYvKbyYYsOo7MetSL7gXnBiWBaVDpwCNjPW8nF03SW8upgiGOE4S8bBqLdOrxDnnkH9PJTQvp9lWA=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<hr />

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 삼첩분식</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[Docker]]></summary></entry><entry><title type="html">TIL) Cloud 운영 환경 구성 2</title><link href="http://localhost:4000/til/2022/12/05/til.html" rel="alternate" type="text/html" title="TIL) Cloud 운영 환경 구성 2" /><published>2022-12-05T00:00:00+09:00</published><updated>2022-12-05T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/12/05/til</id><content type="html" xml:base="http://localhost:4000/til/2022/12/05/til.html"><![CDATA[<p>저번주에는 기본적인<br />
Cloud 운영 환경에 대한 구성들을 배워 보았다.<br />
이번 공부에서는 3티어 아키텍처 형태로 배포하는 방법을<br />
배울 것이고, 저번주에 EC2에 서버를 배포해보는 것까지 해봤었다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMCqrjaGSYLYkne25hlMNNSGrxxCwtWjwIW1qahU8iTVkaJk3lgQwrF-ArVtHMFQcmUuojJ-JIIdF3Sujk5F4ZZuD8BHQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>그 중에서도 우리는 EC2 인스턴스에<br />
우리가 만든 Spring 프로젝트를 build하여<br />
서버에 배포해보는 것까지 진행 했었다.</p>

<p>오늘은 클라이언트(S3) 측과 데이터베이스(RDS) 측을 알아보자</p>

<p><br /></p>

<h3 id="클라이언트-배포">클라이언트 배포</h3>

<p>우선 클라이언트의 프로젝트를 build하는 방법이<br />
여러가지가 있는 것 같다. (java와 마찬가지로)</p>

<p>그 중 터미널의 node를 이용해 build하는 작업을 진행해보자<br />
(참고로 MacOS를 사용중)</p>

<p><br /></p>

<h4 id="1-프로젝트-build">1. 프로젝트 build</h4>

<p>먼저 <a href="https://github.com/nvm-sh/nvm#install--update-script">nvm 설치</a>를 진행해주자.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>wget <span class="nt">-qO-</span> https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash
</code></pre></div></div>
<p>공식 사이트에 있는 최신 버젼을 설치해주면 될 것 같다.<br />
만약, wget을 찾을 수 없다는 알람이 뜬다면</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>wget
</code></pre></div></div>
<p>wget을 패키지 관리자인 homebrew로 설치하면 된다.</p>

<p>짤막한 지식과 검색을 통한 지식으로 정리를 해보자면<br />
NVM은 Node Version Manager로 Node.js의 버전을 관리해주는 도구이다.  <br />
Node.js는 브라우저 내에서 말고도 다른 환경에서도 JavaScript를 실행 시킬 수 있게<br />
도와주는 실행창, 실행 환경이라고한다. (크롬의 js해석 엔진인 V8 엔진을 이용)</p>

<p>그럼 이제 nvm 설치가 완료되었다면</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nt">--version</span>
</code></pre></div></div>
<p>명령어로 설치가 되었는지 확인해주자.</p>

<p>이제 nvm이 설치되었으니 <a href="https://nodejs.org/en/">node.js 설치</a>를 할 수 있다.  <br />
해당 사이트에서 버전 확인이 가능하다.</p>

<p>원하는 버전을 설치해줘도 되지만.. 16버전을 이용했을 때<br />
오류가 없었기에</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nb">install </span>16
</code></pre></div></div>
<p>이라고 입력해주면 16버전이 설치된다.</p>

<p>최신 버전을 설치하고 싶을 경우</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm <span class="nb">install</span> <span class="nt">--lts</span>
</code></pre></div></div>
<p>를 입력해주면 최신버전이 설치가 된다.</p>

<p>만약 설치를 여러개 하였을 때, 버젼을 변경해서 사용하고 싶을 경우<br />
먼저 버전을 확인하고 싶으면</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm list
</code></pre></div></div>
<p>명령어로 현재 설치된 버전이 확인된다.</p>

<p>그리고 버전을 변경하고 싶을 경우</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>nvm use 16
</code></pre></div></div>
<p>과 같은 식으로 현재 설치된 버전 중 선택해서 nvm use를 사용하면 변경된다.</p>

<p><br /></p>

<p>이제 실제로 클라이언트를 AWS를 이용해 배포해보자<br />
우선 터미널로 우리가 만든 클라이언트 폴더에 접속한다.</p>

<p>이동완료후 클라이언트 의존성 모듈을 설치해야한다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nb">install</span>
</code></pre></div></div>
<p>npm은 Node Package Manager로 Node.js로 만들어진<br />
프로그램을 쉽게 설치 혹은 여러기능들을 해주는 것이라 이해하면 쉬울 것 같다.</p>

<p>설치가 완료되었으면</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm <span class="nt">-v</span>
</code></pre></div></div>
<p>명령어로 설치된 버전을 확인할 수 있다.</p>

<p><br /></p>

<p>이제 이 패키지 매니저로 우리는 build 명령을 실행할 것 인데<br />
이전에 우리는 처음에 보았던 이그림을 볼 필요가 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMCqrjaGSYLYkne25hlMNNSGrxxCwtWjwIW1qahU8iTVkaJk3lgQwrF-ArVtHMFQcmUuojJ-JIIdF3Sujk5F4ZZuD8BHQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>현재 클라이언트와 서버가 연결되기 위해서는<br />
build하기 전에 EC2의 주소를 이용해 환경변수로 설정해<br />
연결을 해준 후 build를 진행해야 우리의 EC2 인스턴스와 연결되는 것 같다.</p>

<p>아직 클라이언트 측의 구성이 정확히 어떻게 되어있는지 이해가 가진 않았다.<br />
하지만 React에서 환경 변수를 사용할 경우 <code class="language-plaintext highlighter-rouge">.env</code>파일을 이용해<br />
보안과 유지보수에 용이하게 사용하는 것 같다. (<a href="https://carmack-kim.tistory.com/111">ENV? - 출처: carmack-kim님 블로그</a>)</p>

<p>우선 코드스테이츠 측에서 배포용으로 만들어준<br />
클라이언트 프로그램에 <code class="language-plaintext highlighter-rouge">.env</code>파일에 EC2 경로를 추가해줘야한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNOxhLDZ27Sr73PjkWiOEuy7fxEbUeO8PExbopcMOhYwIE9voaaFWfTIfwUI1LRemjgPfidns6Qnaawzke-k1y8su_mvg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>내 EC2 인스턴스의 <code class="language-plaintext highlighter-rouge">퍼블릭 IPv4 DNS</code>를 입력해주면 된다.<br />
환경 변수 설정이 끝났으면 이제 <code class="language-plaintext highlighter-rouge">npm</code>을 이용해 build를 진행해주면된다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm run build
</code></pre></div></div>
<p>를 입력해주면 build가 되어질 것이고</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMm2-cXyHyX_Dka-3eOFxiBi9Shvt6NpdXGyr4eeNvSiqYakRmHEw2IsC8VT2TjTHetmajHF85bfA8RoFaMV30SGUGA_Q=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><code class="language-plaintext highlighter-rouge">Compiled successfully</code>가 콘솔에 확인된다면<br />
정상적으로 완료되었을 것이고 build 폴더가 생겼을 것이다.</p>

<p>이제 클라이언트 프로그램이 build가 되었으니<br />
AWS의 S3 버킷에 올리기만하면 된다.</p>

<p><br /></p>

<h4 id="2-build-파일-업로드">2. build 파일 업로드</h4>

<p>여기서 버킷은 만들어져있다고 가정하고</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMt5DZC0u-iy00YbD24vOXQHSgoZuuE3TaqTJ9DKfV-rmiIHkzsemBccNULT5kX_op5CnQacIHp5zQqVrlpkoHVq0Hpvg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>만들어진 버킷을 보면 여러가지 확인과 설정을 할 수 있다.<br />
객체에는 우리가 build한 파일을 업로드해주면된다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gP--JcVN_ro93rs0B8hRPIIlA8cCBE6S6EwLJ0t8J6FoCOkT2t2sGTXUypnYqIlnkgbzpmm2hhe5bT29_pdZrIg0EFejQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<h4 id="3-정적-웹사이트-호스팅-및-정책-설정확인">3. 정적 웹사이트 호스팅 및 정책 설정확인</h4>

<p>속성에서 정적 웹 사이트 호스팅 편집이 가능하다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMuwTO1DRQvt3Cq_twhIxiSqw1TII2qdRKLPP1A5l32tOAWB9D4xT2R0aajpK14WWMR1RF9fp24Z_JH1hvhgchn4Luc=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>활성화를 눌러준 후 여러 설정을 할 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMRTfdAd-MrGvJWcOs8k6c8JsWUMENpfp8NHUYwB-wB_CcLPM9vI8MpR8NZFGUh9-MO4Pj_Jo_rIL98SAsTcQe0dO4pvw=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>그리고 변경 저장을하면 엔드포인트를 확인할 수 있다.<br />
해당 엔드포인트로 접속 시 우리가 빌드한 html을 확인할 수 있다.<br />
하지만 만약 퍼블릭 엑세스 활성화를 하지 않았다면</p>

<p>403 Forbidden 화면을 보게 될 것이다.<br />
아래에서 설정해보자</p>

<p><br /></p>

<h4 id="4-퍼블릭-엑세스-활성화">4. 퍼블릭 엑세스 활성화</h4>

<p>권한 텝에서 먼저</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOySHGyNBeD5ROwQcYrc7Q-LryyL0GpHOOWLW9cpO8IoJG2o0s68sAqdvbZYp07vh5vzgXQ4tz4Wx5FnXTVYJ-arLdYHg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>모든 퍼블릭 엑세스 차단 체크박스를 해제하고<br />
변경 사항을 저장해준다.</p>

<p>그리고 버킷 정책에서<br />
편집 -&gt; 정책 생성기를 눌러</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gORyh2hy9R7NQi5ZFdxelWkB9PXqXFFkf5od8ptjyq_M2q6gMll9UJC8QAh0CWB0jNWXzOzEnN43dPeJJbeI9uPJFow=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>정책에 대한 내용을 적어준다.<br />
해당 부분은 추후에 어떤 정책인지에 대한 내용은<br />
어드벤스한 공부가 필요해보인다..</p>

<p>우선 위와 같이 입력 완료 후<br />
하단에 Add Statement를 눌러주면 Json 형태로 객체가 하나 나온다.<br />
해당 코드 값을 복사해 정책 코드란에다가 붙여 넣어주면 된다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO4sb2RQfnC9UAo9e3mqbNuAUAYCqlGSgh9Xi-0UL5QX5vFoKRL5G--penSCYSkN1KGUQN9LzKuR-cfxL8-qPOIjrhT=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>그리고 변경 사항 저장을 눌러주면<br />
해당 버킷에 대한 정책이 적용되어 퍼블릭 엑세스가 가능해진다.<br />
아마 어디서든 접근이 가능하게 만들어진 것 같다.</p>

<p>우선 이렇게 클라이언트에 배포를 하고 정책을 설정에 권한 부여를<br />
할 수 있다는 흐름만 이해해야할 것 같다.</p>

<p>이제 정상적으로 엔드포인트에 접속하면 우리가 만든 화면을 볼 수 있다.<br />
여기서 알아둬야할 점은 클라이언트 S3에 설정이 끝났을 뿐<br />
EC2에서는 S3의 엔드포인트를 config.domain에 설정해줘야한다.<br />
설정해보기전에 RDS먼저 셋팅을 진행해보자</p>

<p><br /></p>

<h3 id="데이터베이스-연결">데이터베이스 연결</h3>

<p>이제 RDS 인스턴스를 생성하고 연결해보자</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPt7L85pyOiBzvoUv4AoWFQRcZrAeTXi1e88euqY0WZwdeBy-fExoGosLSe_fFHmiIRcbyGesHL6tk9uH-P1LcPtRPHMQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>상단에서 RDS를 검색하여 데이터베이스 생성을 눌러준다.</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gN269A-5fP5DuTNlzYOxjstGaW4ZQ7LhDuRqYLKO0zE0bSCrP8VS9z6hcT9CNfpacjfrb1_r44aoGEjD-HkeYCIOm5dxQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>사용하려는 데이터베이스의 엔진을 선택 !<br />
나는 MySQL을 사용</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gORLVLuS8ordfLtooWUbgVapIf3PXVhjfSzClCSkdgFuaSgubU5LQwJs1HAIUh0GmqIBEOcCvuXN2pxthcBLJQpCtxFeA=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>템플릿은 프리티어로 설정했다. 프리티어로 설정하면<br />
MySQL의 db.t2.micro 인스턴스는 750시간이 무료사용 가능한 것 같다.<br />
<a href="https://aws.amazon.com/ko/rds/free/">참고 - AWS 프리티어</a></p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPMDaskil2A9TqVUKLCShge25ti9mtf2nQUp67wJyOgx7ow6BFZNJQ-S1JUZAEjk_aqGqqo_ReFq4R1pTVp12HqdrnhGQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>여기서 이제 우리가 기억해야하는 부분이 나왔다.</p>

<p>✅ 마스터 사용자 이름과 마스터 암호는<br />
나중에 DB에 접근할때 꼭 필요한 값이니 기억해두거나<br />
어딘가에 저장해두자 !</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOqZjz97jIYND5PWh2kLo8O1rrpMicafKcPaDK7e4aOHR27d0apBQl3NJJ2G-ZTCiuTxoZ8wHnQ1MjwgQKaNaENBCUZBg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위에서 얘기했던 무료로 사용하기 위해 해당 옵션으로 설정</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOQ9Fc1p6L13bXI707a9Csgcs0oyQWQQvA7c4ZJs5x248-Mie6dXx8AZ04E_4_7oQjDmYuqy2Z0aixPrjjEg6wa--G5gg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>퍼블릭 엑세스는 허용으로 해준다.</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMUDem6XIZCQA8hwXlATX6_JFFwo6w0ZNGrodOWnnmxjprmpjBmv1DKnJxcr3PGrahMDy_sVeqWftBU84OAozCd_WnXkQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>그리고 데이터 베이스를 사용하기 위한<br />
포트번호를 설정해둔다. 기본값은 3306이고<br />
13306으로 변경해서 사용하려고 변경했다.</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOFFsQrJPtaKbAFAE6XirmNp2zBlyHRpgE4iOm9Cn1TZsxF6NHQU6N1PLVBSL-7Ay3Hyd6SiR5MrJNV7wEIeACkiiUz6w=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>추가 구성을 눌러<br />
데이터 베이스의 이름을 설정해줄 수 있다.<br />
이름을 지정한대로 후에 조회할때<br />
해당 데이터 베이스 이름으로 조회가 된다. (test라고 지정했다고 가정하자)</p>

<p><br /></p>

<p>이제 모든 설정은 끝났으니<br />
맨 하단에 데이터베이스 생성을 눌러 만들어주자<br />
데이터베이스가 생성이 완료되면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gN8tsT3QpYd684mkxbVNM6eWBUfuilsIcfBYaBjqCZfG4awLWyKRCR2NWeH9y4tslTrOXyOUDOfz2Mc7vWUhn6pvYEz=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>엔드 포인트와 설정했던 포트가 확인된다.<br />
이제 우리는 이 데이터베이스로 EC2에서 접근을하면 된다.</p>

<p>접근하기 이전에 정말로 정상적으로 동작되는지 확인해보고 싶다면<br />
터미널로 확인이 가능하다.</p>

<p>이전에 homebrew를 통해 MySQL을 설치했었다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>mysql
</code></pre></div></div>

<p>MYSQL이 정상적으로 설치가 완료되었다면</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-u</span> <span class="o">[</span>마스터 이름] <span class="nt">--host</span> <span class="o">[</span>엔드 포인트 주소] <span class="nt">-P</span> <span class="o">[</span>포트 번호] <span class="nt">-p</span>
</code></pre></div></div>
<p>이렇게 입력해주면 터미널로 mysql 접속이 된다.</p>

<p>예를 들어 데이터베이스 만들때 생성했던 정보가 아래와 같다고 가정해보자</p>

<p>마스터 이름 : admin<br />
마스터 비밀번호 : 1234<br />
데이터 베이스 엔드포인트 : be-88-mycatlikeschuru.c0nwl8c1futc.ap-northeast-2.rds.amazonaws.com</p>

<p>위와 같다고 가정할 때 아래와 같이 터미널에 명령을 실행시켜주면 된다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code> mysql <span class="nt">-u</span> admin <span class="nt">--host</span> be-88-mycatlikeschuru.c0nwl8c1futc.ap-northeast-2.rds.amazonaws.com <span class="nt">-P</span> 13306 <span class="nt">-p</span>
</code></pre></div></div>
<p>위와 같이 입력하면 비밀번호를 입력라고 나올텐데<br />
우리가 설정했던 마스터 비밀번호 1234를 입력해주면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMOglrCiBEQQTzd9iNGlQLu4azD8EDI_e2QjmV4gPddeD7GCX8znn1b6L0BZSRTPu4ssWWyEg4vu12DNRtZF3rLBTBW=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위와 같이 mysql에 접근할 수 있는 것을 확인 할 수 있다.<br />
실제로 <code class="language-plaintext highlighter-rouge">show databases;</code>를 입력해서<br />
우리가 데이터베이스를 만들때 추가구성에서 넣었던 이름인<br />
<code class="language-plaintext highlighter-rouge">test</code> 데이터베이스가 있는 것을 확인할 수 있다.</p>

<p>이제 정상적으로 데이터베이스가 작동된다는 것도 확인하였고<br />
이제 EC2에서 S3와 RDS를 연결해줘야한다.</p>

<p><br /></p>

<h3 id="클라이언트---서버---db">클라이언트 - 서버 - DB</h3>

<p>위에서 클라이언트와 데이터베이스까지 생성하고 설정까지 끝냈다.</p>

<p>EC2는 생각보다 간단하다.<br />
여태까지 우리가 많이 설정해왔던 방식이고 익숙하기 때문이다.</p>

<p><code class="language-plaintext highlighter-rouge">.yml</code>파일이거나 혹은 <code class="language-plaintext highlighter-rouge">.properties</code>파일에 설정해주면된다.<br />
<code class="language-plaintext highlighter-rouge">.properties</code>파일로 만들었으니 해당 기준으로 적어본다.</p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.jpa.database</span><span class="p">=</span><span class="s">mysql</span>
<span class="py">spring.jpa.database-platform</span><span class="p">=</span><span class="s">org.hibernate.dialect.MySQL5InnoDBDialect</span>
<span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">jdbc:mysql://[AWS RDS 엔드포인트]/test?useSSL=false&amp;characterEncoding=UTF-8&amp;serverTimezone=UTC</span>
<span class="py">spring.datasource.username</span><span class="p">=</span><span class="s">[RDS 마스터 이름]</span>
<span class="py">spring.datasource.password</span><span class="p">=</span><span class="s">[RDS 마스터 비밀번호]</span>
<span class="py">spring.datasource.driver-class-name</span><span class="p">=</span><span class="s">com.mysql.cj.jdbc.Driver</span>
<span class="py">config.domain</span><span class="p">=</span><span class="s">[AWS S3 엔드포인트]</span>
</code></pre></div></div>
<p>위에 처럼 이제 우리가 모두 알 수 있는 정보다</p>

<p>RDS를 만들었기에 엔드포인트를 알 수 있고<br />
마스터 이름과 비밀번호도 우리가 생성했다.</p>

<p>그리고 S3와 연결하기 위해 즉, 클라이언트와 연결하기위해<br />
AWS S3 엔드포인트를 설정해주면 클라이언트에서<br />
API 요청이 오면 이제 정상적으로 EC2 서버에서 작성한 프로그램대로<br />
동작하는 모습을 확인할 수 있을 것이다.</p>

<p><br /></p>

<hr />

<p>이렇게 아주 기초적인 3티어 아키텍처로<br />
인스턴스를 만들어서 배포를 진행 해보았다.</p>

<p>배포하는 과정에 엄청 공부할게 많구나라고 느꼈다.<br />
지금은 거의 따라하는 수준이지만… 나중에는 실제로 운영을하려면<br />
입맛에 맞게 변경하고 관리를 해야하기 때문에 AWS에 대한<br />
공부가 필요해 보였다.</p>

<p>어제 오늘 이렇게 배포를 해보면서 대략적인 감을 익혔고<br />
같이 페어했던분이랑 너무 재밌게해서<br />
더 오래 기억에 남을 것 같다.</p>

<p>오늘 공부는 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 김치찌개, 스팸계란부침, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[저번주에는 기본적인 Cloud 운영 환경에 대한 구성들을 배워 보았다. 이번 공부에서는 3티어 아키텍처 형태로 배포하는 방법을 배울 것이고, 저번주에 EC2에 서버를 배포해보는 것까지 해봤었다.]]></summary></entry><entry><title type="html">macOs) brew update Error Another active Homebrew update process is already in progress. 문제 해결</title><link href="http://localhost:4000/macos/2022/12/04/OS-macOs-5.html" rel="alternate" type="text/html" title="macOs) brew update Error Another active Homebrew update process is already in progress. 문제 해결" /><published>2022-12-04T00:00:00+09:00</published><updated>2022-12-04T00:00:00+09:00</updated><id>http://localhost:4000/macos/2022/12/04/OS-macOs-5</id><content type="html" xml:base="http://localhost:4000/macos/2022/12/04/OS-macOs-5.html"><![CDATA[<p>Mac용 패키지 관리자 Homebrew를 사용하다가</p>

<p>brew update 중 아래와 같은 에러가 발생했다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPgnf_Jlr6jF5QrJ3a1bIdej3lBiR4_o-5y7SfrHRjvujgPSqqZkSrl29Kf4TWNO2frqh1AoHoQrYmTsdS_4V134Mnzig=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Error: Another active Homebrew update process is already <span class="k">in </span>progress.
Please <span class="nb">wait </span><span class="k">for </span>it to finish or terminate it to <span class="k">continue</span><span class="nb">.</span>
</code></pre></div></div>

<p>내용으로보아선 프로세스가 실행중이니 기다리거나 종료해야하는 것 같다.<br />
아마 brew update중 Ctrl+Z를 눌러 종료하거나 bash를 강제로 끌 경우 <br />
발생하는 것 같다. 만약 다시 brew update를 진행하고 싶다면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNt4jGQKvpg6v4idw1qCOQfMrClt6WEeSjGurKDYsmUv0A6kUzSff5ib5LtR5rpktmwbejPAmrg0g50hQjoqKSAVJsM0w=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>/opt/homebrew/var/homebrew 경로에 있는<br />
locks파일을 삭제해주면 된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">rm</span> <span class="nt">-rf</span> /opt/homebrew/var/homebrew/locks
</code></pre></div></div>

<p>터미널 명령어로 삭제를 해도 무방하다.<br />
<strong><em>(여러 블로그를 살펴보니 homebrew 경로가 다른 것 같다.<br />
즉, locks 파일 위치가 환경마다 다른 것 같다..)</em></strong></p>

<p>그렇게 locks 폴더를 삭제 후</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew update
</code></pre></div></div>
<p>다시 진행 해주면 정상적으로 업데이트가 되는 것을 확인 할 수 있다.</p>

<p><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="macOs" /><category term="macOs" /><summary type="html"><![CDATA[Mac용 패키지 관리자 Homebrew를 사용하다가]]></summary></entry><entry><title type="html">TIL) Cloud 운영 환경 구성 1</title><link href="http://localhost:4000/til/2022/12/02/til.html" rel="alternate" type="text/html" title="TIL) Cloud 운영 환경 구성 1" /><published>2022-12-02T00:00:00+09:00</published><updated>2022-12-02T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/12/02/til</id><content type="html" xml:base="http://localhost:4000/til/2022/12/02/til.html"><![CDATA[<p>날씨가 갑자기 겨울로 넘어왔다…<br />
손발이 떨릴정도로 이제 추운 날씨가 왔다.</p>

<p>갑자기 추워진만큼 건강관리를 잘해야겠다.<br />
이제 다음주 부터 슬슬 프로젝트가 시작될 것 같으니<br />
열심히 공부해서 참여하도록해야겠다 !</p>

<hr />

<h2 id="운영-환경-구성">운영 환경 구성</h2>

<p>여태까지 애플리케이션을 위한 프로그램을 배웠다면<br />
이제 유저들이 사용할 수 있도록, 웹서비스에 배포를 해야한다.<br />
그러기 위해서는 클라우드 서비스에 대한 내용을 알아야하며<br />
가장 많이 사용하는 <strong>AWS</strong>(Amazon Web Service)를 이용할 예정이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOqOLzNVFQEsg_qVlTE8LMUqfss5wT_TUYqngNJB6_sgDfVqJyntlKRdVf4o86XtCoGcpGM3EHGia4hRgiH-bbS5wnd=w1920-h919" alt="image" class="align-left" style="max-width: 70%" /></p>

<p><br /></p>

<h3 id="cloud-computing">Cloud Computing</h3>

<p>기존에는 같은 공간에 더 많은 컴퓨터를 추가하거나, 컴퓨터 성능을 업그레이드했다.<br />
하지만 이러한 방식에는 한계가 존재했다.</p>
<ol>
  <li>주기적인 관리가 필요</li>
  <li>공간의 한계</li>
</ol>

<p>와 같은 한계가 존재하다보니 거대 기업들은 데이터 센터라는<br />
건물을 세워 유휴 자원을 대여해주는 서비스들이 생기기 시작했다.<br />
이러한 서비스들은 서버의 자원과 공간, 네트워크 환경을 제공해준다.<br />
이러한 환경을 <strong>On-premise</strong>라고 한다.</p>

<p><strong><em>On-Premise : 자체적으로 보유한 전산실 서버에 직접 설치해 운영하는 방식</em></strong></p>

<p><br /></p>

<p>현대의 클라우드 컴퓨팅은 데이터 센터와 비슷한 역할을하지만<br />
물리적인 컴퓨터가 아닌, 가상컴퓨터를 대여해준다는 점이 다르다.</p>

<p>그럼 클라우드 서비스의 장점이 무었이 있냐면</p>
<ol>
  <li>컴퓨팅 능력을 유연하게 조절가능</li>
  <li>사용한 만큼 요금만 지불</li>
  <li>컴퓨터의 스냅샷을 이용해 다른 컴퓨터로 즉시 이주가 가능</li>
</ol>

<p>클라우드 서비스 형태는<br />
SaaS (Software as a Service) : 네트워크+하드웨어+운영체제+DB/플랫폼+애플리케이션<br />
PasS(Platform as a Service) : 네트워크+하드웨어+운영체제+DB/플랫폼<br />
IaaS(Infrastructure as a Service) : 네트워크+하드웨어</p>

<p>이러한 서비스 형태를 제공해주고 서비스 범위가 각각 다르다.<br />
AWS 같은 경우는 IaaS와 가까운 형태이다.</p>

<p><br /></p>

<h3 id="deploy">Deploy</h3>

<p>전개하다, 배포하다라는 의미를 가지고 있다.<br />
배포는 우리가 개발한 서비스를 사용자들이 이용 가능하게 하는 일련의 과정이다.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>✅ 1단계 : Development  
로컬환경에서 개발 및 테스트 하는 단계이다.  

            ↓

✅ 2단계 : Intergration  
각자의 환경에서 개발된 부분을 취합하는 단계이다.  

            ↓

✅ 3단계 : Staging  
다양한 환경에서 테스트를 진행하는 단계이다.

            ↓

✅ 4단계 : Production  
실제로 서비스가 제공되는 단계이다.  
</code></pre></div></div>

<p>작성한 코드가 다른 환경에서 정상 작동할 수 있게 하려면<br />
설정을 환경변수에 저장해야 한다.<br />
환경 변수는 코드 변경 없이 배포 때마다 쉽게 변경할 수 있다.</p>

<p>이 외에도 docker와 같은 개발 환경 자체를 통일시키는<br />
솔루션을 사용할 수 도 있다.</p>

<p><br /></p>

<h3 id="aws-ec2">AWS EC2</h3>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOtO5zNG-mSGQ0VpIrnDtKv8WjStCZz80s64TdpaTziPs4U4w2NrWWr-2PCFgKEx1F9AZ6MgqbDeUn9oKYze6SjTKfr=w1920-h919" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>Amazon Elastic Compute Cloud라고도 부른다.<br />
AWS에서 원격으로 제어할 수 있는 가상의 컴퓨터 한 대를 빌리는 것을 말한다.<br />
이렇게 빌린 컴퓨터를 인스턴스(Instance)라고한다.</p>

<p>Elastic(탄력적인)이라는 영어 단어에서 알 수 있듯이<br />
우리가 사용한 만큼 비용을 지불하기 때문에<br />
비용,성능,용량을 자유롭게 조절할 수가 있다.</p>

<p>EC2의 사용의 장점?</p>
<ol>
  <li>구성하는데 필요한 시간이 짧다</li>
  <li>다양한 운영체제에 대한 선택이 가능하다</li>
</ol>

<p>AMI는 Amazon Machine Image의 약자로<br />
소프트웨어 구성이 기재된 템플릿이다.<br />
(윈도우, 우분투 리눅스, 우분투+node.js 등등)<br />
인스턴스 생성시 선택해야하는 소프트웨어라고 생각하면 될 것 같다.<br />
사용 용도에 맞게 운영체제, 런타임 등의 구성된 셋팅을 선택할 수 있다.</p>

<p><a href="https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/concepts.html">AWS EC2 설명서</a>를 확인해보면 도움이 될 것 같다.</p>

<p><br /></p>

<h3 id="rds">RDS</h3>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gN7nLYSONV59gpEN-AxxvVVseentMz1scQ3svv2baW-tIKb0ddiTx5w_BNK7X9_4WqxQmttPUh9sUH9av2MmooXk_zsYg=w1920-h919" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>Relational Database Service의 약자로<br />
AWS에서 제공하는 관계형 데이터 베이스 서비스이다.</p>

<p>EC2에서 빌린 가상의 컴퓨터에서 MySQL을 설치해서 사용할 수도 있다.<br />
하지만 RDS를 따로 사용하는 이유는</p>

<p>EC2 인스턴스를 사용하면 DB 관련해서<br />
자동으로 관리를 담당하는 부분이 매우 적기 때문에, 사용자가 일일이<br />
시간을 투자해서 데이터베이스 엔진의 설치, 버전관리, 데이터 백업을 해야한다.<br />
또한 가용성과 내구성이 확보되지 않기 때문에, DB의 데이터가 유실되가나<br />
정상적으로 사용하지 못할 확률이 커지고, 후에 필요에 따른 확장이 어렵기 때문이다.</p>

<p>즉, RDS를 이용하면 DB 유지보수와 관련된 일을 RDS에서 자동 관리한다.<br />
사용자가 해야할 일은 초기 설정을 제외하고 DB에 저장된 데이터를 관리하는<br />
일 밖에 없어지기 때문에 큰 편의성을 느낄 수 있다.</p>

<p>또한 여러가지 DB 엔진(Oracle, MySQL, MairaDB 등) 선택지를 제공해준다.</p>

<p><br /></p>

<h3 id="s3">S3</h3>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPyX47-O0zlGcOuOrGwR40VZM8bDpk1COUH1tS16G9Z2SxWkYDkjNyVlfi-EuCJ46PbsuRvLkYR_IOIjxQdxQkNKQl1lg=w1920-h919" alt="image" class="align-left" style="max-width: 40%" /></p>

<p>Simple Storage Service를 줄여서 S3라고 부른다.<br />
AWS에서 제공하는 클라우드 스토리지 서비스이며,<br />
클라우드 스토리지 서비스는 인터넷 공간에 데이터를 저장하는 저장소를 얘끼한다.<br />
ex) 구글 드라이브, 아이클라우드 등</p>

<p>S3 사용 시 장점?</p>
<ol>
  <li>데이터를 무한히 저장 가능하다.</li>
  <li>스토리지의 내구성이 높다 (파일 유실가능성이 적다)</li>
  <li>가용성이 보장된다.(저장된 파일들을 정상적으로 사용할 수있는 시간이 길다)</li>
  <li>다양한 스토리지 클래스 제공 <br />
-. Standard 클래스 : 데이터에 자주 엑세스할 때 사용
-. Glacier 클래스 : 데이터를 장기보관할 때 사용</li>
  <li>정적 웹 사이트 호스팅이   가능</li>
</ol>

<p><em><strong>정적 파일 : 서버의 개입없이 생성된 파일</strong></em> <br />
<strong><em>웹 호스팅 : 공간을 임대해 주는 서비스</em></strong></p>

<p>S3에서는 버킷이 사용자들이 웹사이트를 배포할 수 있는 공간을 제공해준다.</p>

<p>버킷은 S3에 저장되는 파일을 담는 최상위 디렉토리이다.<br />
저장되는 파일을 객체라 부르며, 키-값 페어 형식으로 데이터를 저장한다.</p>

<p>또한 S3에 저장되는 객체는 메타데이터가 있다.<br />
객체의 생성일, 크기, 유형등의 정보를 담고있는 데이터 이다.</p>

<p>그리고 모든 객체는 고유한 URL 주소를 가지고 있다.</p>

<p><br /></p>

<h3 id="3-티어-아키텍처">3 티어 아키텍처</h3>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNdT-BlxNhiUbdv4av_8HXLA9C0nN5uxsAAk3-Qs26EWWJPkMA7rgXgpEc8lcRXoiCLRkfMKylvorlDOAMa4WHMIAehjg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /><br />
<a href="https://docs.aws.amazon.com/ko_kr/whitepapers/latest/serverless-multi-tier-architectures-api-gateway-lambda/three-tier-architecture-overview.html">출처 - amazon 3 Tier Architecture</a></p>

<p>3 티어 아키텍처는 배포 전략중 하나로 <br />
Client, Server, Database로 나누어 서비스를 제공할 수 있다.</p>

<p>S3 서비스로 Client를 제공할 수 있다.<br />
EC2 서비스로 Sever를 제공해줄 수 있다.  <br />
RDS 서비스로 Database를 제공해줄 수 있다.</p>

<p><br /></p>

<h3 id="서버-배포">서버 배포</h3>

<p>인스턴스 생성과정은 생략하려한다. AMI는 우분투이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOOs9dXoVlxUnDghCnZt618o7m0rdY0vzDl18ChINSDbBBG7Gpl-cj3FrS4dV5hrez8sLKsR2mKROev8SUXg0OjTvRwHQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>인스턴스에 연결을 하면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gN2yvWvOOqcKCByF_cKadUZS6r1gMIDTDoH64uyFEmX7xamfZe9zoqlkICswPW6q0f5r6Xn9NN2Y-DiMKLIOg0E_fLbVA=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위와 같은 화면이 뜬다. 이제 여기서 나는 bash가 편하기때문에</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash
</code></pre></div></div>

<p>그리고 폴더 Root경로를 상단으로 변경했다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> ~
</code></pre></div></div>
<p>여기서 root경로를 상단에 두지않고 <code class="language-plaintext highlighter-rouge">git clone</code>과 같은 명령어를<br />
내보낼 경우 Permission denied 에러가 발생할 수 있으니 주의하자</p>

<p>본격적으로 인스턴스에 개발환경을 구축해야한다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
</code></pre></div></div>
<p>패키지 매니저가 관리하는 패키지의 정보를 최신 상태로 업데이트한다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>openjdk-11-jre-headless
</code></pre></div></div>
<p>그리고 jdk를 설치해준다. 확인창이나오면 “Y”를 눌러 진행</p>

<p>설치가 완료되었으면</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">--version</span>
</code></pre></div></div>
<p>을 입력하여 설치가 잘되었는지 확인이 가능하다.</p>

<p>이제 우리가 배포하기위한 프로젝트를 Git에서 가져오면된다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone 레포지토리주소
</code></pre></div></div>
<p>여기서 처음 셋팅하는 경우에는<br />
SSH Key를 우분투에 발급 받아야한다.<br />
그리고 발급받은 공개키를 GitHub SSH keys에 셋팅을 해줘야<br />
우분투 서버에서 GitHub를 통해 clone을 해올 수 있다..</p>

<p>키 발급과 등록하는것은 생략하겠다.</p>

<p>이제 우리의 프로젝트를 가져왔으니<br />
해당 프로젝트를 빌드해야한다. 우선 폴더경로로 진입해서</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./gradlew build
</code></pre></div></div>
<p>파일을 빌드시켜주면 된다.</p>

<p>그리고 빌드된 .jar파일을 통해 java를 실행시켜보면</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> build/libs/DeployServer-0.0.1-SNAPSHOT.jar
</code></pre></div></div>
<p>Jar파일의 폴더 경로를 지정한 것이다.<br />
그러면 내 인스턴스에서 만들었던 Spring 프로젝트가</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNrA5k8JSBJnGbyXfOB8y2Rm398vzC329yxq29jDQqLacYTabUWRlV00FKA9lkb88EcT00KBsWN-e9S0PV3Re4DgW9B=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>정상 적으로 실행된 모습을 볼 수 있다.</p>

<p>이제 인스턴스의 <code class="language-plaintext highlighter-rouge">퍼블릭 IPv4 DNS</code> 주소를 <code class="language-plaintext highlighter-rouge">:8080</code> 포트를 붙여<br />
웹 브라우저 상에서 접속을 시도해본다면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMEFzEzwGnFUUnCFLAnVY5C946SOyarcOzfBaUdrBE5Y1JhIJZ_JZ-Dl75VdRWuUackRT7Pgkh9b-ofsr_OIwxfgXLeaQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>내가 만들었던 프로젝트가 정상적으로<br />
보이는 것을 확인할 수 있다.</p>

<p><br /></p>

<hr />

<p>오늘은 이렇게 Cloud 운영환경에 대해 기초 지식과<br />
실제로 Spring 프로젝트 파일을 빌드해보았다.</p>

<p>여러가지로 신기하고 재밌었다.<br />
이렇게 가상으로 컴퓨터를 빌려 정말 간단하게 운영이 가능하다니..<br />
얼추 이제 어떻게 시스템이 구성되어있고 각자의 위치가<br />
어느정도 감이 잡히고 있다.</p>

<p>요번주도 공부하느라 고생많았다 !!!!<br />
주말에 프로젝트 대비를 위함 Spring MVC 공부를 더해야겠다.</p>

<p>오늘 공부는 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 김밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[날씨가 갑자기 겨울로 넘어왔다… 손발이 떨릴정도로 이제 추운 날씨가 왔다.]]></summary></entry><entry><title type="html">TIL) Spring WebFlux 구현하기</title><link href="http://localhost:4000/til/2022/12/01/til.html" rel="alternate" type="text/html" title="TIL) Spring WebFlux 구현하기" /><published>2022-12-01T00:00:00+09:00</published><updated>2022-12-01T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/12/01/til</id><content type="html" xml:base="http://localhost:4000/til/2022/12/01/til.html"><![CDATA[<p>12월이 시작되었다 !<br />
올해도 이렇게 시간이 빨리가는 구나<br />
점점 더빨리가는 시간이 조금 야속하다.</p>

<p>그래도 내가 당장할 수 있는 일에<br />
늘 집중할 수 있게 다시한번 마음을 다져보며<br />
오늘 공부를 시작해보자</p>

<hr />

<p>오늘은 WebFlux 기술을 이용한 애플리케이션을 구현해볼 생각이다.</p>

<h3 id="spring-webfulx-">Spring WebFulx ?</h3>

<p>Spring WebFlux는 전통적인 Spring MVC방식의 애플리케이션보다<br />
대량 클라이언트 요청을 좀 더 효율적으로 처리할 수 있는 현대적인<br />
애플리케이션 구현을 위한 기술이라고 한다.</p>

<p>Spring 5에 Reactive 스택이라는 기술이 새롭게 추가되었고<br />
해당 기술에서 지원하는 타입 <code class="language-plaintext highlighter-rouge">Mono</code>와 <code class="language-plaintext highlighter-rouge">Flux</code>를 사용 했던 걸<br />
이전에 <a href="https://mycatlikeschuru.github.io/til/2022/11/30/til.html">Project Reactor</a>를 공부 하면서 배웠었다.</p>

<p>한마디로 저의를 하자면, Spring WebFlux는 <br />
리액티브 웹 애플리케이션을 위한 웹 프레임워크이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPoDOocq2SqLuJtAX2FsfgKnh4PxlFxW5qpbRJoRuH6MuZSKYcSqpK9hsYGiSumVaYCclCg3iKyd351ISGmBJNX3xHw=w777-h753" alt="image" class="align-left" style="max-width: 100%" /><br />
<a href="https://docs.spring.io/spring-framework/docs/5.2.5.RELEASE/spring-framework-reference/web-reactive.html#webflux-framework-choice">출처 - spring.io</a></p>

<p>Spring MVC와 Spring WebFlux를 벤다이어그램으로 비교한 사진이다.</p>

<p>이제 클라이언트의 요청을 적으로 받는다고 했었는데<br />
어떻게 차이가나는지 한번 비교해보자</p>

<p><br /></p>

<h3 id="spring-mvc-vs-spring-webflux">Spring MVC vs Spring WebFlux</h3>

<p>두개의 프레임워크를 사용해 어떠한 차이가 있는지 확인해보려한다.<br />
테스트 방식은 서버 2개를 띄워서 한쪽에서 다른쪽을 여러번 동시에 요청하였을 경우<br />
어떻게 처리가 진행되어지는지 비교해보자</p>

<p><br /></p>

<p><strong>1). Spring MVC 테스트 하기</strong></p>

<p>IntelliJ의 Spring Project를 두개를 만들고 각각 다른 서버로 만들 것이다.</p>
<ol>
  <li>호출하는 서버 - MAIN , PORT 8080</li>
  <li>호출받는 서버 - OUT, PORT 7070</li>
</ol>

<p>위와 같이 이름을 정해놓고 포트는</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">7070</span>
</code></pre></div></div>
<p>.yml 파일에 추가를 통해 변경이 가능하다.<br />
우선 MAIN 서버 부터 코드를 작성해보자</p>

<p><br /></p>

<ul>
  <li><strong>Main 서버</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v11/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcMainCoffeeController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>

    <span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="s">"http://localhost:7070/v11/coffees/1"</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SpringMvcMainCoffeeController</span><span class="o">(</span><span class="nc">RestTemplateBuilder</span> <span class="n">restTemplateBuilder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">restTemplate</span> <span class="o">=</span> <span class="n">restTemplateBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{coffee-id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">getCoffee</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"coffee-id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# call Spring MVC Main Controller: {}"</span><span class="o">,</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
        <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForEntity</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="nc">CoffeeResponseDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getBody</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>해당 Controller가 호출되었을 때, OUT서버를 호출하는 프로그램이다.<br />
log로 현재 시간을 기록해 시간을 체크할 예정이다.<br />
(Dto 코드는 간단하기 때문에 따로 올리지 않겠습니다!)</p>

<p>그리고 Spring 애플리케이션쪽에는</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcMainSampleApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringMvcMainSampleApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">CommandLineRunner</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# 요청 시작 시간: {}"</span><span class="o">,</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>

			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">CoffeeResponseDto</span> <span class="n">response</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getCoffee</span><span class="o">();</span>
				<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"{}: coffee name: {}"</span><span class="o">,</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">getKorName</span><span class="o">());</span>
			<span class="o">}</span>
		<span class="o">};</span>
	<span class="o">}</span>

	<span class="c1">// Postman처럼 아래 주소로 5번 요청</span>
	<span class="c1">// 그에따른 7070 서버에 5번 요청</span>
	<span class="kd">private</span> <span class="nc">CoffeeResponseDto</span> <span class="nf">getCoffee</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">RestTemplate</span> <span class="n">restTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RestTemplate</span><span class="o">();</span>
		<span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="s">"http://localhost:8080/v11/coffees/1"</span><span class="o">;</span>
		<span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForEntity</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="nc">CoffeeResponseDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

		<span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">CommandLineRunner</code>를 반환타입으로한 메서드로<br />
애플리케이션이 실행 시 5번 MAIN서버 API를 요청하도록 하였다.<br />
5번을 실행하면서 OUT서버에서 응답받은 Coffee 이름과 현재 시간을 기록하게 작성했다.</p>

<p><br /></p>

<p>이제 MAIN서버에서 호출받는 OUT서버를 작성해보자</p>

<ul>
  <li>OUT 서버
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v11/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcOutboundCoffeeController</span> <span class="o">{</span>
  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{coffee-id}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">getCoffee</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"coffee-id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
      <span class="nc">CoffeeResponseDto</span> <span class="n">responseDto</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CoffeeResponseDto</span><span class="o">(</span><span class="n">coffeeId</span><span class="o">,</span> <span class="s">"카페라떼"</span><span class="o">,</span> <span class="s">"CafeLattee"</span><span class="o">,</span> <span class="mi">4000</span><span class="o">);</span>

      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
      <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">responseDto</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <p>간단하다 MAIN서버에서 API호출 받는 서버로 Port번호는 7070으로 변경했다.<br />
쓰레드를 5초간 정지시켜놓고 응답을해주는 프로그램이다.</p>
  </li>
</ul>

<p>이제 OUT서버 애플리케이션을 먼저 실행시킨후<br />
MAIN서버 애플리케이션을 동작시키면 작성한 코드에 의해 OUT서버 API가 5번 호출 될 것이다.</p>

<p>MAIN서버에서 출력된 로그를 확인해보면</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2022-12-01 21:35:51.097  INFO 46801 --- [nio-8080-exec-1] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:35:51.097332
2022-12-01 21:35:56.325  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:35:56.325066: coffee name: 카페라떼
2022-12-01 21:35:56.330  INFO 46801 --- [nio-8080-exec-5] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:35:56.330589
2022-12-01 21:36:01.354  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:36:01.354035: coffee name: 카페라떼
2022-12-01 21:36:01.367  INFO 46801 --- [nio-8080-exec-3] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:36:01.367418
2022-12-01 21:36:06.388  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:36:06.388594: coffee name: 카페라떼
2022-12-01 21:36:06.399  INFO 46801 --- [nio-8080-exec-6] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:36:06.399304
2022-12-01 21:36:11.428  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:36:11.428414: coffee name: 카페라떼
2022-12-01 21:36:11.444  INFO 46801 --- [nio-8080-exec-2] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:36:11.444136
2022-12-01 21:36:16.466  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:36:16.466802: coffee name: 카페라떼
</code></pre></div></div>
<p>5초 간격으로 API가 호출된 것을 볼 수 있다. <br />
총 25초 정도 소요되었음을 확인할 수 있다.</p>

<p>이유는 무었일까? Spring MVC는 Blocking 처리 방식이기 때문에<br />
5번의 요청이 빠르게 들어와도 하나의 요청처리가 끝나고<br />
다음 처리를 하지못하는 모습을 볼 수 있다.</p>

<p><br /></p>

<p><strong>2). Spring WebFlux 테스트 하기</strong></p>

<p>그럼 우리가배운 Non-Blocking처리를 하는<br />
Spring WebFlux를 사용해서 한번 작성해보자.<br />
방식은 Spring MVC와 동일 방법으로 테스트를 진행해보려한다.</p>

<ul>
  <li>MAIN 서버</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v11/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringWebFluxMainCoffeeController</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="s">"http://localhost:7070/v11/coffees/1"</span><span class="o">;</span>

    <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">)</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{coffee-id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="nf">getCoffee</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"coffee-id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# call Spring WebFlux Main Controller: {}"</span><span class="o">,</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
        <span class="k">return</span> <span class="nc">WebClient</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
                <span class="o">.</span><span class="na">get</span><span class="o">()</span>
                <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
                <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
                <span class="o">.</span><span class="na">bodyToMono</span><span class="o">(</span><span class="nc">CoffeeResponseDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>마찬가지로 OUT서버를 호출하는 동작이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringWebFluxMainSampleApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"reactor.netty.ioWorkerCount"</span><span class="o">,</span> <span class="s">"1"</span><span class="o">);</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringWebFluxMainSampleApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">CommandLineRunner</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# 요청 시작 시간: {}"</span><span class="o">,</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>

			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">this</span><span class="o">.</span><span class="na">getCoffee</span><span class="o">().</span><span class="na">subscribe</span><span class="o">(</span>
                                        <span class="n">response</span> <span class="o">-&gt;</span> <span class="o">{</span>
                                            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"{}: coffee name: {}"</span><span class="o">,</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">getKorName</span><span class="o">());</span>
                                        <span class="o">}</span>
                <span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="nf">getCoffee</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="s">"http://localhost:8080/v11/coffees/1"</span><span class="o">;</span>
        <span class="k">return</span> <span class="nc">WebClient</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
                <span class="o">.</span><span class="na">get</span><span class="o">()</span>
                <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
                <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
                <span class="o">.</span><span class="na">bodyToMono</span><span class="o">(</span><span class="nc">CoffeeResponseDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Spring MVC와 동일하게 Spring WebFlux 방식으로<br />
OUT서버를 호출하는 프로그램이다.</p>

<ul>
  <li>OUT 서버
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v11/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringWebFluxOutboundCoffeeController</span> <span class="o">{</span>
  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">)</span>
  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{coffee-id}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="nf">getCoffee</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"coffee-id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
      <span class="nc">CoffeeResponseDto</span> <span class="n">responseDto</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CoffeeResponseDto</span><span class="o">(</span><span class="n">coffeeId</span><span class="o">,</span> <span class="s">"카페라떼"</span><span class="o">,</span> <span class="s">"CafeLattee"</span><span class="o">,</span> <span class="mi">4000</span><span class="o">);</span>

      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
      <span class="k">return</span> <span class="nc">Mono</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">responseDto</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <p>이제 OUT 서버도 동일하게 쓰레드에 5초의 딜레이를 걸어놓고<br />
OUT서버 애플리케이션부터 실행하고 MAIN서버를 실행하게되면</p>
  </li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2022-12-01 21:41:38.540  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.540514: coffee name: 카페라떼
2022-12-01 21:41:38.541  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.541614: coffee name: 카페라떼
2022-12-01 21:41:38.543  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.543159: coffee name: 카페라떼
2022-12-01 21:41:38.544  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.544006: coffee name: 카페라떼
2022-12-01 21:41:38.544  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.544734: coffee name: 카페라떼
</code></pre></div></div>
<p>이렇게 콘솔에 로그가 발생할 것이다.<br />
우리가 요청시간을 확인하려고 남긴로그고 실제로 로그 시간을 확인해보면<br />
1초도 차이나지않게 5개의 요청이 전부처리가된 것을 볼 수 있다.</p>

<p>이 말은 즉, Non-Blocking 처리방식이다.<br />
여러번의 요청이 들어와도 밀리지 않고 동작이 동시에 처리된 모습이다.</p>

<p>이렇게 Non-Blocking으로 처리되는 것을 눈으로 보았는데<br />
실제 Spring WebFlux안에는 이렇게 처리해줄 수 있는<br />
엄청난 기술과 코드가 들어가 있을 것이다.. 실제로 Spring MVC처럼<br />
클래스를 모두 찾아보고 아키텍처를 그리고 상속관계를 파악해보고<br />
깊게 탐구해보고 싶지만… 현실적으로 지금 공부하는 단계에서는 전부 확인하는 것은<br />
무리가 있어보인다. 이렇게 사용을하면 일단.. Non-Blocking 처리가 되는구나! 하고<br />
후에 Advance한 공부를 해야할 것 같다.</p>

<p><br /></p>

<h3 id="spring-webflux-적용">Spring WebFlux 적용</h3>

<p>실제로 우리가 Controller 계층과 Service 계층에<br />
어떻게 Spring WebFlux를 적용할 수 있는지 알아보자</p>

<p>애플리케이션 컨셉은<br />
커피를 등록하면 해당 커피가 DB에 저장되는 컨셉이며<br />
H2 Database를 사용하였다.</p>

<p>우선 resources로 활용할 데이터를 저장해야한다.<br />
첫번째로 <code class="language-plaintext highlighter-rouge">.sql</code> 파일을 작성해야한다.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE TABLE IF NOT EXISTS COFFEE (
    COFFEE_ID bigint NOT NULL AUTO_INCREMENT,
    KOR_NAME varchar(100) NOT NULL,
    ENG_NAME varchar(100) NOT NULL,
    PRICE number NOT NULL,
    COFFEE_CODE char(3) NOT NULL,
    COFFEE_STATUS varchar(100) NOT NULL,
    CREATED_AT datetime NOT NULL,
    LAST_MODIFIED_AT datetime NOT NULL,
    PRIMARY KEY (COFFEE_ID)
);
</code></pre></div></div>

<p>그리고 <code class="language-plaintext highlighter-rouge">.yml</code> 파일을 설정해주자</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">r2dbc</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">r2dbc:h2:mem:///test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
  <span class="na">sql</span><span class="pi">:</span>
    <span class="na">init</span><span class="pi">:</span>
      <span class="na">schema-locations</span><span class="pi">:</span> <span class="s">classpath*:db/h2/schema.sql</span>
<span class="na">logging</span><span class="pi">:</span>
  <span class="na">level</span><span class="pi">:</span>
    <span class="na">org</span><span class="pi">:</span>
      <span class="na">springframework</span><span class="pi">:</span>
        <span class="na">r2dbc</span><span class="pi">:</span> <span class="s">DEBUG</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">schema.sql</code>은 위에서 설정한 <code class="language-plaintext highlighter-rouge">.sql</code>파일이름이다.<br />
<code class="language-plaintext highlighter-rouge">r2dbc</code>를 설정해줘야 h2 데이터베이스를 웹으로 접근할 수 있다.<br />
후에 아래에서 접근하기 위한 코드를 작성해야한다.</p>

<p>그리고 <code class="language-plaintext highlighter-rouge">build.gradle</code> 파일의 설정이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">webflux</span><span class="err">'</span> <span class="c1">// 추가</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">validation</span><span class="err">'</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">data</span><span class="o">-</span><span class="n">r2dbc</span><span class="err">'</span> <span class="c1">// 추가</span>
	<span class="n">compileOnly</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">:</span><span class="n">lombok</span><span class="err">'</span>
	<span class="n">annotationProcessor</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">:</span><span class="n">lombok</span><span class="err">'</span>
	<span class="n">testImplementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">test</span><span class="err">'</span>
	<span class="n">testImplementation</span> <span class="err">'</span><span class="n">io</span><span class="o">.</span><span class="na">projectreactor</span><span class="o">:</span><span class="n">reactor</span><span class="o">-</span><span class="n">test</span><span class="err">'</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">mapstruct</span><span class="o">:</span><span class="nl">mapstruct:</span><span class="mf">1.5</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">Final</span><span class="err">'</span>
	<span class="n">annotationProcessor</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">mapstruct</span><span class="o">:</span><span class="n">mapstruct</span><span class="o">-</span><span class="nl">processor:</span><span class="mf">1.5</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">Final</span><span class="err">'</span>
	<span class="n">runtimeOnly</span> <span class="err">'</span><span class="n">io</span><span class="o">.</span><span class="na">r2dbc</span><span class="o">:</span><span class="n">r2dbc</span><span class="o">-</span><span class="n">h2</span><span class="err">'</span> <span class="c1">// 추가</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">com</span><span class="o">.</span><span class="na">h2database</span><span class="o">:</span><span class="n">h2</span><span class="err">'</span> 
<span class="o">}</span>
</code></pre></div></div>
<p>여러가지가 있지만 우리가 WebFlux를 사용하기 위해<br />
추가한 의존라이브러리 <code class="language-plaintext highlighter-rouge">// 추가</code>라고 되어있는 부분을 꼭 추가해주자</p>

<p>처음으로는 h2 DB를 접근할 수 있는 코드를 작성해보자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">H2Console</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Server</span> <span class="n">webServer</span><span class="o">;</span>

    <span class="nd">@EventListener</span><span class="o">(</span><span class="nc">ContextRefreshedEvent</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">SQLException</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"starting h2 console at port 8078"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">webServer</span> <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">h2</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">Server</span><span class="o">.</span><span class="na">createWebServer</span><span class="o">(</span><span class="s">"-webPort"</span><span class="o">,</span> <span class="s">"8078"</span><span class="o">,</span> <span class="s">"-tcpAllowOthers"</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@EventListener</span><span class="o">(</span><span class="nc">ContextClosedEvent</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"stopping h2 console at port 8078"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">webServer</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Port 8078로 설정하여<br />
<code class="language-plaintext highlighter-rouge">localhost:8078</code>을 웹주소로 입력해 기존과 동일하게 접근이 가능하다.</p>

<p>이제 우리가 확인해야할 Controller가 어떻게<br />
변경되었는지 확인해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v12/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeeController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CoffeeService</span> <span class="n">coffeeService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CoffeeMapper</span> <span class="n">mapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CoffeeController</span><span class="o">(</span><span class="nc">CoffeeService</span> <span class="n">coffeeService</span><span class="o">,</span> <span class="nc">CoffeeMapper</span> <span class="n">mapper</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">coffeeService</span> <span class="o">=</span> <span class="n">coffeeService</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mapper</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">()</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">createCoffee</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeDto</span><span class="o">.</span><span class="na">Post</span><span class="o">&gt;</span> <span class="n">requestBody</span><span class="o">){</span>

        <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeDto</span><span class="o">.</span><span class="na">Response</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span>
                <span class="n">requestBody</span>
                        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">post</span> <span class="o">-&gt;</span> <span class="n">coffeeService</span><span class="o">.</span><span class="na">createCoffee</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">coffeePostDtoToCoffee</span><span class="o">(</span><span class="n">post</span><span class="o">)))</span>
                        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">coffee</span> <span class="o">-&gt;</span> <span class="n">mapper</span><span class="o">.</span><span class="na">coffeeToCoffeeResponseDto</span><span class="o">(</span><span class="n">coffee</span><span class="o">));</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="n">result</span><span class="o">,</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>정말 간단하게 되어있는 Controller 계층이다.<br />
Post요청하나만 존재하는 클래스이고, <code class="language-plaintext highlighter-rouge">Mono</code>를 이용했다.<br />
<code class="language-plaintext highlighter-rouge">Mono&lt;&gt;</code>로 감싼 객체를 받고, 응답을해주면 된다.</p>

<p>객체를 변환하기 위해서 <code class="language-plaintext highlighter-rouge">flatMap()</code> , <code class="language-plaintext highlighter-rouge">map()</code>을 사용했고<br />
Mono에 감싸여있는 객체 <code class="language-plaintext highlighter-rouge">CoffeeDto.Response</code>를 꺼내서<br />
우리가 만든 mapper 클래스를 이용해 <code class="language-plaintext highlighter-rouge">Coffee</code> 객체로 변환해주고 있다.</p>

<p>변환된 객체를 <code class="language-plaintext highlighter-rouge">coffeeService.createCoffee();</code>메서드에 매개변수로 넣어<br />
Service 계층을 호출하는 모습이다. 이제 Service 계층에서는 데이터를 DB에 저장하고<br />
다시 반환받은 객체를 <code class="language-plaintext highlighter-rouge">map();</code>메서드로 반환 타입에 맞는 형태로 변경하여</p>

<p><code class="language-plaintext highlighter-rouge">ResponseEntity</code> 객체를 만들어 반환해주면 끝이다.<br />
기존 Spring MVC와 달라진 점은 <code class="language-plaintext highlighter-rouge">Mono</code>를 사용한점만 변경되었다.</p>

<p>그럼 Service 계층을 살펴보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeeService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CoffeeRepository</span> <span class="n">coffeeRepository</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">R2dbcEntityTemplate</span> <span class="n">template</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CoffeeService</span><span class="o">(</span><span class="nc">CoffeeRepository</span> <span class="n">coffeeRepository</span><span class="o">,</span> <span class="nc">R2dbcEntityTemplate</span> <span class="n">template</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">coffeeRepository</span> <span class="o">=</span> <span class="n">coffeeRepository</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">template</span> <span class="o">=</span> <span class="n">template</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">Coffee</span><span class="o">&gt;</span> <span class="nf">createCoffee</span><span class="o">(</span><span class="nc">Coffee</span> <span class="n">coffee</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">Coffee</span><span class="o">&gt;</span> <span class="n">coffeeMono</span> <span class="o">=</span> <span class="n">findVerifiedCoffee</span><span class="o">(</span><span class="n">coffee</span><span class="o">.</span><span class="na">getCoffeeCode</span><span class="o">())</span>
                <span class="o">.</span><span class="na">then</span><span class="o">(</span><span class="n">coffeeRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">coffee</span><span class="o">));</span>

        <span class="k">return</span> <span class="n">coffeeMono</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">Void</span><span class="o">&gt;</span> <span class="nf">findVerifiedCoffee</span><span class="o">(</span><span class="nc">String</span> <span class="n">coffeeCode</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">coffeeRepository</span><span class="o">.</span><span class="na">findByCoffeeCode</span><span class="o">(</span><span class="n">coffeeCode</span><span class="o">)</span>
                <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">findCoffee</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">findCoffee</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="nc">Mono</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="k">new</span> <span class="nc">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">COFFEE_CODE_EXISTS</span><span class="o">));</span>
                    <span class="o">}</span>
                    <span class="k">return</span> <span class="nc">Mono</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
                <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Service 계층도 기존과 동일한 코드들이고<br />
CoffeeCode를 통해 유무를 확인하는 <code class="language-plaintext highlighter-rouge">findVerifiedCoffee();</code>메서드와<br />
실제로 DB에 저장을하기위한 <code class="language-plaintext highlighter-rouge">createCoffee();</code>메서드가 존재한다.</p>

<p>여기도 안에있는 내용들이 <code class="language-plaintext highlighter-rouge">Mono</code>를 이용해 처리한점만 다르다.</p>

<p>그럼 이제 Repository 계층을 살펴보자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CoffeeRepository</span> <span class="kd">extends</span> <span class="nc">R2dbcRepository</span><span class="o">&lt;</span><span class="nc">Coffee</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">Coffee</span><span class="o">&gt;</span> <span class="nf">findByCoffeeCode</span><span class="o">(</span><span class="nc">String</span> <span class="n">coffeeCode</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>기존에 Spring MVC를 사용할 때는 JDBC,JPA를 사용했지만<br />
Spring WebFlux에서는 R2dbc를 사용하고있다.</p>

<p>형식은 기존에 설정하는 것과 비슷하다.<br />
여기서도 다른점은 <code class="language-plaintext highlighter-rouge">Mono</code>를 사용했다는 점</p>

<p>이렇게 작성을 완료하고 Postman을 통해 API를 호출해보면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMjWMzoUG84NMNpT7pz0VgGN-ybnZKqlYSH5gZz5h8ljPVKuQeR_DO_ECGFSSbn1ZKojbxKb9qlYgRFDjO-D24JuRQaeQ=w777-h807" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>Spring MVC와 동일하게 요청과 응답이 오는 것을 볼 수 있다.<br />
실제로 Postman을 통해서 여러개 요청하는 작업은 못해봤지만</p>

<p>처음에 테스트해보았던 동시에 호출하였을 경우처럼<br />
동시에 많은 요청처리가 이을 경우 확연히 다른 차이를 보일 것 같다.</p>

<p><br /></p>

<p>기타로 정상적으로 테스트하기 위해 필요한 코드인<br />
<code class="language-plaintext highlighter-rouge">Coffee</code>, <code class="language-plaintext highlighter-rouge">CoffeeDto</code>, <code class="language-plaintext highlighter-rouge">CoffeeMapper</code>, <br />
<code class="language-plaintext highlighter-rouge">BusinessLogicException</code>, <code class="language-plaintext highlighter-rouge">ExceptionCode</code>를 아래에 적어본다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@Table</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Coffee</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">coffeeId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">korName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">engName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">price</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">coffeeCode</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">CoffeeStatus</span> <span class="n">coffeeStatus</span> <span class="o">=</span> <span class="nc">CoffeeStatus</span><span class="o">.</span><span class="na">COFFEE_FOR_SALE</span><span class="o">;</span>

    <span class="nd">@CreatedDate</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="nd">@LastModifiedDate</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="s">"last_modified_at"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">modifiedAt</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">enum</span> <span class="nc">CoffeeStatus</span> <span class="o">{</span>
        <span class="no">COFFEE_FOR_SALE</span><span class="o">(</span><span class="s">"판매중"</span><span class="o">),</span>
        <span class="no">COFFEE_SOLD_OUT</span><span class="o">(</span><span class="s">"판매 중지"</span><span class="o">);</span>

        <span class="nd">@Getter</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">status</span><span class="o">;</span>

        <span class="nc">CoffeeStatus</span><span class="o">(</span><span class="nc">String</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeeDto</span> <span class="o">{</span>
    <span class="nd">@Getter</span>
    <span class="nd">@AllArgsConstructor</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Post</span> <span class="o">{</span>
        <span class="nd">@NotBlank</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">korName</span><span class="o">;</span>

        <span class="nd">@NotBlank</span>
        <span class="nd">@Pattern</span><span class="o">(</span><span class="n">regexp</span> <span class="o">=</span> <span class="s">"^([A-Za-z])(\\s?[A-Za-z])*$"</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"커피명(영문)은 영문이어야 합니다(단어 사이 공백 한 칸 포함). 예) Cafe Latte"</span><span class="o">)</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">engName</span><span class="o">;</span>

        <span class="nd">@Range</span><span class="o">(</span><span class="n">min</span><span class="o">=</span> <span class="mi">100</span><span class="o">,</span> <span class="n">max</span><span class="o">=</span> <span class="mi">50000</span><span class="o">)</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>

        <span class="nd">@NotBlank</span>
        <span class="nd">@Pattern</span><span class="o">(</span><span class="n">regexp</span> <span class="o">=</span> <span class="s">"^([A-Za-z]){3}$"</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"커피 코드는 3자리 영문이어야 합니다."</span><span class="o">)</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">coffeeCode</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span><span class="o">(</span><span class="n">componentModel</span> <span class="o">=</span> <span class="s">"spring"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CoffeeMapper</span> <span class="o">{</span>
    <span class="nc">Coffee</span> <span class="nf">coffeePostDtoToCoffee</span><span class="o">(</span><span class="nc">CoffeeDto</span><span class="o">.</span><span class="na">Post</span> <span class="n">coffeePostDto</span><span class="o">);</span>
    <span class="nc">CoffeeDto</span><span class="o">.</span><span class="na">Response</span> <span class="nf">coffeeToCoffeeResponseDto</span><span class="o">(</span><span class="nc">Coffee</span> <span class="n">coffee</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BusinessLogicException</span> <span class="kd">extends</span> <span class="nc">RuntimeException</span> <span class="o">{</span>
    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="nc">ExceptionCode</span> <span class="n">exceptionCode</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span> <span class="n">exceptionCode</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">exceptionCode</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="k">this</span><span class="o">.</span><span class="na">exceptionCode</span> <span class="o">=</span> <span class="n">exceptionCode</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">ExceptionCode</span> <span class="o">{</span>
    <span class="no">COFFEE_NOT_FOUND</span><span class="o">(</span><span class="mi">404</span><span class="o">,</span> <span class="s">"Coffee not found"</span><span class="o">),</span>
    <span class="no">COFFEE_CODE_EXISTS</span><span class="o">(</span><span class="mi">409</span><span class="o">,</span> <span class="s">"Coffee Code exists"</span><span class="o">);</span>

    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">status</span><span class="o">;</span>

    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>

    <span class="nc">ExceptionCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">code</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<hr />

<p>오늘은 이렇게 SpringWebFlux를 실제 우리가<br />
애플리케이션 계층에 적용하는 방식과 동일하게 적용해보았다.</p>

<p>확실히 Spring MVC보다 사용하기 어려운 느낌이든다.<br />
아무래도 익숙해지려면 실제 내부 프로그램도 많이 봐야할 것 같고<br />
<code class="language-plaintext highlighter-rouge">Backpressure</code>라든가 <code class="language-plaintext highlighter-rouge">Non-Blocking</code>처리 라든가<br />
정확히 어떻게 코드로 동작하는지 개념과 흐름 파악이 필요할 것 같다.<br />
또한 Operator들도 많이 알아야할 것같다..ㅠㅠ</p>

<p>우선 아직 Spring MVC도 애플리케이션 구현 경험이 거의 없다보니까<br />
눈앞에 있는 기술부터 체득과 습득을하고 이후로 나아가보려한다.</p>

<p>이렇게 수박 겉 핥기인 WebFlux는 여기서 끝 !</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 짜장밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[12월이 시작되었다 ! 올해도 이렇게 시간이 빨리가는 구나 점점 더빨리가는 시간이 조금 야속하다.]]></summary></entry><entry><title type="html">TIL) Spring WebFlux Project Reactor</title><link href="http://localhost:4000/til/2022/11/30/til.html" rel="alternate" type="text/html" title="TIL) Spring WebFlux Project Reactor" /><published>2022-11-30T00:00:00+09:00</published><updated>2022-11-30T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/30/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/30/til.html"><![CDATA[<p>어느덧 11월의 마지막이 다가왔다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gP-V3f78gzYoHWe4BsoYdT3mBXrBTI7YNQJSLWZStK3WDB2VvN0qjzA3GflB1maNYmMaDLa5a3SAqzjBTNSgMxDF3ee=w1185-h921" alt="image" class="align-left" style="max-width: 50%" /></p>

<p>코딩 공부를 시작한게 8월인데 벌써 4개월이 지났다니<br />
믿기지 않는다.. 그만큼 많이 발전도 했지만<br />
아직도 많이 부족하다고 느끼기에 시간이 더욱더 간절하게 느껴진다.</p>

<p>오늘은 어제배운 Reactive 프로그램의 스트림즈의 구현체인<br />
Project Reactor에 대해 공부해보는 시간이다.</p>

<hr />

<h2 id="project-reactor">Project Reactor</h2>

<h3 id="project-reactor-란">Project Reactor 란?</h3>

<p><a href="https://projectreactor.io/">Project Reactor</a> 줄여서 Reactor라고 부른다. 리액티브 스트림즈의 구현체 중 하나로써<br />
Reactive 기반 Spring Web Application을 만들때 사용하는 핵심기술이다.</p>

<p>리액티브 프로그래밍은 Non-Blocking통신을 지원하며, Non-Blocking이 핵심적인 특징이다. <br />
간단하게 얘기하지면 요청 쓰레드가 차단이 되지 않는다 정도로 알면될 것 같다.</p>

<p>Publisher 타입으로 Mono[0|1]와 Flux[N]이라는 두 가지 타입을 제공한다.</p>

<p><br /></p>

<h3 id="marble-diagram">Marble Diagram</h3>

<p><strong>1). Mono</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNhCC3gMyVY9U2tYfXL1Ugml0_Fey_7uS4w1fYYfafR-twQzcbefQVQDrr0dAmTnmofFKkHwbcguv_pVuYEj0mmm6Hn3g=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>Marble Diagram으로 동그란것 하나를 데이터라 생각하면 쉬울 것 같다.</p>

<p>흐름 순서는 위에 다이어그램을 보면 이해가 쉬울 것 같다. <br />
Mono 시퀀스가 시작되고 데이터를 emit한다. Mono는 Mono[0|1] 즉, 0건 또는 1의<br />
데이터만 emit 하는 Reactor 타입이기 때문에 위와 같이 표현되었다.</p>

<p>그리고 Mono 시퀀스가 종료되고, Operator를 통해 데이터가 가공된다.<br />
그리고 Downstream의 타임라인으로 전달되어<br />
정의되어있는 해당 시퀀스를 실행하고 종료하게 되어진다.</p>

<p>코드로 보면 이렇게 볼 수 있을 것 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Mono</span>
                <span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">"Hello, Reactive"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">())</span>
                <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span>
                        <span class="n">message</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">),</span>
                        <span class="n">error</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()),</span>
                        <span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Complete"</span><span class="o">)</span>
                <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 출력</span>
<span class="no">HELLO</span><span class="o">,</span> <span class="no">REACTIVE</span>
<span class="nc">Complete</span>
</code></pre></div></div>
<p>위에 코드를 보면 <code class="language-plaintext highlighter-rouge">.map();</code>메서드가 Operator의 역할이다.<br />
<code class="language-plaintext highlighter-rouge">just();</code>에서 데이터를 emit한 후 <code class="language-plaintext highlighter-rouge">.UpperCase();</code> 대문자로 변환시키고 있다.<br />
그리고 최종적으로 Downstream쪽에서 데이터를 전달해<br />
<code class="language-plaintext highlighter-rouge">.subscribe();</code> 메서드로 전달받은 데이터를 처리해준 모습을 볼 수 있다.<br />
해당 상황은 우선 Error가 발생하지 않은 경우를 테스트 해보았다.</p>

<p>이제 만약 Downstream에서 Error가 발생했을 경우<br />
비정상적인 종료를 한번 확인해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Mono</span>
                <span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">"Hello, Reactive"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">))</span>
                <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span>
                        <span class="n">message</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">[</span><span class="mi">3</span><span class="o">]),</span>
                        <span class="n">error</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"! Error : "</span><span class="o">+</span> <span class="n">error</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()),</span>
                        <span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Complete"</span><span class="o">)</span>
                <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 출력</span>
<span class="o">!</span> <span class="nc">Error</span> <span class="o">:</span> <span class="nc">Index</span> <span class="mi">3</span> <span class="n">out</span> <span class="n">of</span> <span class="n">bounds</span> <span class="k">for</span> <span class="n">length</span> <span class="mi">2</span>
<span class="nc">Complete</span>
</code></pre></div></div>
<p>위에 예제 코드를 보면 단순히 String을 배열로 쪼개서<br />
Downstream으로 넘겨주는 코드이다.<br />
받았을때 공백기준으로 나눴기때문에 배열방에는 2개만 존재하고<br />
범위를 벗어나는 데이터를 조회하려고 명령을 내렸을 경우<br />
error를 처리해주는 메서드를 만들어 표현할 수 있다.</p>

<p><br /></p>

<p><strong>2). Flux</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNa2bYw_449zSbZ1QB7bHvPkp-iEamCVUmFSVFMs6xh0U2LZ9zmFCflb1hwKNBcdZqL4xl-pGtpMAa8KWzt3xKEWHHZHA=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>기본 적인 흐름은 Mono와 전부 동일하다.<br />
다른 점은 처리해야할 데이터가 Flux[N]개로<br />
여러개의 데이터를 emit할 수 있는 모습을 다이어그램에서 볼 수 있다.</p>

<p><br /></p>

<h3 id="scheduler">Scheduler</h3>

<p>Reactor에서 Scheduler는 쓰레드를 관리하는 관리자 역할이다.<br />
즉, Reactor Sequence 상에서 처리되는 동작들을 하나 이상의 쓰레드에서<br />
동작하도록 별도의 쓰레드를 제공해준다고 생각하면 쉬울 것 같다.</p>

<p>Reactor는 기본적으로 Non-Blocking 통신을 위한 비동프로그래밍을 위해<br />
탄생했기 때문에 여러 쓰레드를 손쉽게 관리해주는 Scheduler의 역할이 중요하다 할 수 있다.</p>

<p>간단한 코드로 비교예제를 살펴보자
먼저 Scheduler를 추가하지 않았을 경우를 살펴보자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Scheduler를 추가하지 않았을 경우</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SchedulersExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Flux</span>
            <span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>
            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# onNext: {}"</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>20:51:36.461 [main] DEBUG reactor.util.Loggers - Using Slf4j logging framework
20:51:36.481 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 4
20:51:36.483 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 8
20:51:36.483 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 12
20:51:36.483 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 16
20:51:36.483 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 20
</code></pre></div></div>
<p>해당 프로그램을 실행시켰을때 콘솔에서 확인할 수 있는 로그이다.<br />
Scheduler를 추가하지 않고 기존과 동일하게 사용하였고<br />
여기서 알 수 있는 점은 <code class="language-plaintext highlighter-rouge">[main]</code>쓰레드를 사용하고 있다는 점이다.</p>

<p><br /></p>

<p>Scheduler를 적용한 코드를 확인해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Scheduler를 사용하였을 경우</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SchedulersExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Flux</span>
                <span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
                <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="nc">Schedulers</span><span class="o">.</span><span class="na">boundedElastic</span><span class="o">())</span>
                <span class="o">.</span><span class="na">doOnSubscribe</span><span class="o">(</span><span class="n">subscription</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# doOnSubscribe"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# onNext: {}"</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>

        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100L</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>20:53:19.592 [main] DEBUG reactor.util.Loggers - Using Slf4j logging framework
20:53:19.623 [main] INFO com.codestates.example.schedulers.SchedulersExample02 - # doOnSubscribe
20:53:19.630 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 4
20:53:19.631 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 8
20:53:19.631 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 12
20:53:19.631 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 16
20:53:19.631 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 20
</code></pre></div></div>

<p>위에 코드는 Scheduler를 사용하였을때의 코드이다.<br />
첫번째 코드와 차이점은 <code class="language-plaintext highlighter-rouge">subscribeOn();</code>, <code class="language-plaintext highlighter-rouge">doOnSubscribe();</code>  <br />
Operator를 추가해서 사용을 하고 있다는 점이다.</p>

<p><code class="language-plaintext highlighter-rouge">subscribeOn();</code> Operator는 <code class="language-plaintext highlighter-rouge">Schedulers.boundedElastic()</code>와 같은<br />
Scheduler를 지정하면 구독 직후에 실행되는 쓰레드가 main 쓰레드에서 해당 쓰레드로 변경된다.</p>

<p><code class="language-plaintext highlighter-rouge">doOnSubscribe();</code>Operator는 구독 발생 직후에 Trigger되는 Operator로<br />
구독 직후에 어떤 동작을 수행하고 싶을때 사용하는 Operator이다.</p>

<p>출력 결과를 보면 알 수 있듯이 <code class="language-plaintext highlighter-rouge">[main]</code>쓰레드에서 진행 중이던 흐름이<br />
<code class="language-plaintext highlighter-rouge">[boundedElastic-1]</code> 쓰레드로 변경된 모습을 로그로 확인해 볼 수 있다.</p>

<p><br /></p>

<p>마지막으로 예제하나만 더보고 넘어가자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SchedulersExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Flux</span>
            <span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
            <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="nc">Schedulers</span><span class="o">.</span><span class="na">boundedElastic</span><span class="o">())</span>
            <span class="o">.</span><span class="na">doOnSubscribe</span><span class="o">(</span><span class="n">subscription</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# doOnSubscribe"</span><span class="o">))</span>

            <span class="o">.</span><span class="na">publishOn</span><span class="o">(</span><span class="nc">Schedulers</span><span class="o">.</span><span class="na">parallel</span><span class="o">())</span>  <span class="c1">// (1)</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="o">.</span><span class="na">doOnNext</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# filter doOnNext"</span><span class="o">))</span>  <span class="c1">// (2)</span>

            <span class="o">.</span><span class="na">publishOn</span><span class="o">(</span><span class="nc">Schedulers</span><span class="o">.</span><span class="na">parallel</span><span class="o">())</span>    <span class="c1">// (3)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>
            <span class="o">.</span><span class="na">doOnNext</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# map doOnNext"</span><span class="o">))</span> <span class="c1">// (4)</span>

            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# onNext: {}"</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>

        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100L</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>21:03:32.441 [main] INFO com.codestates.example.schedulers.SchedulersExample - # doOnSubscribe
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 4
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 8
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 12
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 16
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 20
</code></pre></div></div>
<p>해당코드가 이전과 다른점은 <code class="language-plaintext highlighter-rouge">publishOn();</code>이라는 Operator가 추가된 예제이다.<br />
<code class="language-plaintext highlighter-rouge">publishOn();</code>은 <code class="language-plaintext highlighter-rouge">publishOn();</code> 기준으로 Downstream쪽 쓰레드가<br />
<code class="language-plaintext highlighter-rouge">publishOn();</code>에서 Scheduler로 지정한 쓰레드로 변경이된다. (Schedulers.parallel())</p>

<p><code class="language-plaintext highlighter-rouge">doOnNext();</code> Operator는 바로앞에 위치한 Operaotr가 실행될 때<br />
Trigger되는 Operator이다. 위에선 filter와 map을 구분짓기위해 사용했다.</p>

<p>콘솔로그에서 볼 수 있듯이 <code class="language-plaintext highlighter-rouge">[main]</code>쓰레드에서 <code class="language-plaintext highlighter-rouge">[parallel-2]</code>로 쓰레드가 변경되었고<br />
<code class="language-plaintext highlighter-rouge">[parallel-1]</code>로 변경된 모습을 볼 수 있다. 내부적으로 <code class="language-plaintext highlighter-rouge">[parallel]</code> 쓰레드의 순서는 보장되지 않는다.</p>

<p><br /></p>

<h3 id="operator">Operator</h3>

<p>이전부터 계속 Operator를 사용한는 코드들을 보았다.<br />
그만큼 Reactor와 Operator를 뗄래야 뗄 수 없는 관계이다.</p>

<p>Operator 관련해서는 사실 지원하는 종류가 너무 많기 때문에<br />
부가적인 Advance 공부는 추후에 해봐야할 것 같고<br />
목록만 우선 정리 해놓으려고 한다.</p>

<p>그 중에서 자주사용하고 중요한 것 들을 <span style="color:#CC00CC"><strong>보라색</strong></span>으로 표시해둔다.</p>

<p>✅ <strong>새로운 Sequence를 생성하고자 할 경우 (Creating)</strong></p>
<ul>
  <li>just()</li>
  <li><span style="color:#CC00CC"><strong>fromStream()</strong></span></li>
  <li><span style="color:#CC00CC"><strong>fromIterable()</strong></span></li>
  <li>fromArray()</li>
  <li>range()</li>
  <li>interval()</li>
  <li>empty()</li>
  <li>never</li>
  <li>defer()</li>
  <li>using()</li>
  <li>generate()</li>
  <li><span style="color:#CC00CC"><strong>create()</strong></span></li>
</ul>

<p>✅ <strong>기존 Sequence에서 변환작업이 필요한 경우 (Transforming)</strong></p>
<ul>
  <li><span style="color:#CC00CC"><strong>map()</strong></span></li>
  <li><span style="color:#CC00CC"><strong>flatMap()</strong></span></li>
  <li><span style="color:#CC00CC"><strong>concat()</strong></span></li>
  <li>collectList()</li>
  <li>collectMap()</li>
  <li>merge()</li>
  <li><span style="color:#CC00CC"><strong>zip()</strong></span></li>
  <li>the()</li>
  <li>switchIfEmpty</li>
  <li>and()</li>
  <li>when()</li>
</ul>

<p>✅ <strong>Sequence에서 내부의 동작을 확인하고자 할 경우 (Peeking)</strong></p>
<ul>
  <li>doOnSubscribe</li>
  <li><span style="color:#CC00CC"><strong>doOnNext()</strong></span></li>
  <li>doOnError()</li>
  <li>doOnCancel()</li>
  <li>doFirst()</li>
  <li>doOnRequest()</li>
  <li>doOnTerminate()</li>
  <li>doAfterTerminate()</li>
  <li>doOnEach()</li>
  <li>doFinally()</li>
  <li><span style="color:#CC00CC"><strong>log()</strong></span></li>
</ul>

<p>✅ <strong>Sequence에서 데이터를 걸러야할 경우 (Filtering)</strong></p>
<ul>
  <li><span style="color:#CC00CC"><strong>filter()</strong></span></li>
  <li>ignoreElements()</li>
  <li>distinct()</li>
  <li><span style="color:#CC00CC"><strong>take()</strong></span></li>
  <li>next()</li>
  <li>skip()</li>
  <li>sample()</li>
  <li>single()</li>
</ul>

<p>✅ <strong>에러를 처리하고자할 경우 (Handling errors)</strong></p>
<ul>
  <li><span style="color:#CC00CC"><strong>error()</strong></span></li>
  <li><span style="color:#CC00CC"><strong>timeout()</strong></span></li>
  <li>onErrorReturn()</li>
  <li>onErrorResume()</li>
  <li>onErrorMap()</li>
  <li>doFinally()</li>
  <li><span style="color:#CC00CC"><strong>retry()</strong></span></li>
</ul>

<p><br /></p>

<hr />

<p>오늘은 어제보다 조금더 Spring WebFlux에 대해 알아보았고<br />
사실 아직 Spring MVC 어떻게 대체해서 사용해야할지 크게<br />
감이 잡히지는 않는다. 뭔가 Stream API와 비슷한 느낌이 들어 친숙하긴하지만<br />
개념들이 많이 다른 것 처럼 느껴져서 어렵고 생소했다.</p>

<p>내일 우리가 구현했던 Spring MVC 대신<br />
Spring WebFlux 기술을 활용해서 한번 적용해보자</p>

<p>오늘 공부는 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 제육볶음, 김치찌개, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[어느덧 11월의 마지막이 다가왔다.]]></summary></entry><entry><title type="html">TIL) Spring WebFlux Reactive 프로그래밍</title><link href="http://localhost:4000/til/2022/11/29/til.html" rel="alternate" type="text/html" title="TIL) Spring WebFlux Reactive 프로그래밍" /><published>2022-11-29T00:00:00+09:00</published><updated>2022-11-29T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/29/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/29/til.html"><![CDATA[<p>오늘은 리액티브 프로그래밍에 대해 공부해보는 날이다.<br />
아마 깊은 내용은 다루지 않고, 간단한 지식들만 공부 할 것 같다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOLvm3Tcr7jOo11hO8F_VEjXkI7bN97rGtSVrf1Ti3xqf3ZQe4jQOr1kpMnycZ3ZuOxgeCDU8X3g9guLl8uMN_t1zRm8Q=w1185-h864" alt="image" class="align-left" style="max-width: 30%" /></p>

<p>우리는 Spring MVC 기반의 애플리케이션을 사용하고있는데<br />
최신 기술로 Spring Reactive가 나와서 후에 어떻게<br />
바뀔지는 아무도 모르니 Spring MVC 이해를 마친 후<br />
해당 기술에 대해 깊게 공부해볼 필요가 있을 것 같다.</p>

<hr />

<h3 id="리액티브-프로그래밍이란">리액티브 프로그래밍이란?</h3>

<p>기존의 명령형 프로그래밍 방식과 달리 선언형 프로그래밍 방식을 사용한다.<br />
클라이언트의 요청에 반응을 잘하는 시스템을 의미한다.<br />
리액티브 시스템 관점에서의 반응은 쓰레드의 Non-Blocking과 관련이 있다.<br />
클라이언트의 요청에 대한 대기 시간을 최소화 할 수 있도록<br />
요청 쓰레드가 차단되지 않게 함으로써, 클라이언트에게 즉각적으로<br />
반응하도록 구성된 시스템이라고 볼 수 있다.</p>

<p>리액티브 시스템의 특징을 알아보자</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMC17N9996c0CAWJ2CXGoDaByldzZ7UTKzUtpNVQbGGwNbemzqeKFNeAeqE8q_mHlA_5DEs1EUS4hO70psikE0WUvyOhg=w1554-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>1). MEANS<br />
-. 리액티브 시스템에서 사용하는 커뮤니케이션 수단</p>
<ul>
  <li>Message Driven  <br />
-. 리액티브 시스템에서는 메세지 기반 통신을 통해 여러 시스템 간에 느슨한 결합을 유지한다.</li>
</ul>

<p>2). FORM<br />
-. 메세지 기반 통신을 통해 리액티브 시스템이 어떤 특성을 가지는 구조로 형성되는지를 의미</p>
<ul>
  <li>Elastic<br />
-. 시스템으로 들어오는 요청량이 적거나 많거나에 상관없이 일정한 응답성을 유지하는 것</li>
  <li>Resillient<br />
-. 시스템의 일부분에 장애가 발생하더라도 응답성을 유지하는 것</li>
</ul>

<p>3). VALUE<br />
-. 리액티브 시스템의 핵심 가치가 무엇인지를 표현하는 영역</p>
<ul>
  <li>Responsive<br />
-. 리액티브 시스템은 클라이언트의 요청에 즉각적으로 응답할 수 있어야함을 의미</li>
  <li>Maintainable<br />
-. 클라이언트의 요청에 대한 즉각적인 응답이 지속가능해야함을 의미</li>
  <li>Extensible<br />
-. 클라이언트의 요청에 대한 처리량을 자동으로 확장하고 축소할 수 있어야함을 의미</li>
</ul>

<p><br /></p>

<h3 id="리액티브-스트림즈란">리액티브 스트림즈란?</h3>
<p>리액티브 프로그래밍을 위한 표준사양이다.<br />
리액티브 스트림즈에서 사양으로 정의된 구성요소를 알아보자</p>

<p><strong>1). Publisher 인터페이스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Publisher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">subscribe</span><span class="o">(</span><span class="nc">Subscriber</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-. 데이터 소스로 부터 데이터를 내보내는(emit) 역할을 한다. <br />
-. <code class="language-plaintext highlighter-rouge">subscribe();</code>추상 메서드를 포함하고 있고, 매개변수로 전달되는 Subscriberrk<br />
Publisher로부터 내보내진 데이터를 소비하는 역할을 한다.</p>

<p><br /></p>

<p><strong>2). Subscriber 인터페이스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSubscribe</span><span class="o">(</span><span class="nc">Subscription</span> <span class="n">s</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">t</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onComplete</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-. Publisher로 부터 내보내진 데이터를 소비하는 역할을 한다.</p>

<p>-. <code class="language-plaintext highlighter-rouge">onSubscribe(Subscription s);</code></p>
<ul>
  <li>구독이 시작되는 시점에 호출됨.</li>
  <li>Pusblisher에게 요청할 데이터의 개수를 지정하거나 구독해지 처리가 가능</li>
</ul>

<p>-. <code class="language-plaintext highlighter-rouge">onNext(T t)</code></p>
<ul>
  <li>Publisher가 데이터를 emit할 때 호출됨</li>
  <li>emti된 데이터를 전달 받아서 소비할 수 있다.</li>
</ul>

<p>-. <code class="language-plaintext highlighter-rouge">onError(Throwable t)</code></p>
<ul>
  <li>Publisher로부터 emit된 데이터가 Subscriber에게 전달되는 과정에서<br />
에러가 발생할 경우에 호출된다.</li>
</ul>

<p>-. <code class="language-plaintext highlighter-rouge">onComplete()</code></p>
<ul>
  <li>Publisher가 데이터를 emit하는 과정이 종료될 경우 호출됨</li>
  <li>emit이 정상적으로 완료된 후, 처리해야 될 작업이 있다면 해당 메서드 내에서 수행할 수 있다.</li>
</ul>

<p><br /></p>

<p><strong>3). Subscription 인터페이스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subscription</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">(</span><span class="kt">long</span> <span class="n">n</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-. Subscriber의 구독 자체를 표현한 인터페이스이다.
-. <code class="language-plaintext highlighter-rouge">request(long n)</code></p>
<ul>
  <li>Publisher가 emit하는 데이터의 개수를 요청</li>
</ul>

<p>-. <code class="language-plaintext highlighter-rouge">cancel()</code></p>
<ul>
  <li>구독을 해지하는 역할을한다. 구독해지가 발생하면 Publisher는 더이상 데이터를 Emit하지 않는다.</li>
</ul>

<p><br /></p>

<p><strong>4). Processor 인터페이스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Processor</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;,</span> <span class="nc">Publisher</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-. 별도로 구현해야 되는 추상메서드는 없다.<br />
-. Publisher와 Subscriber의 역할을 동시에 할 수 있는 특징을 가지고 있다.</p>

<p><br /></p>

<p><strong>5). 구현체들</strong></p>
<ul>
  <li>Project Reactor</li>
  <li>RxJava</li>
  <li>Java Flow API</li>
</ul>

<p>코드로 알아보기</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Publisher의 역할</span>
        <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">mono</span> <span class="o">=</span> <span class="nc">Mono</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">"Hello, Reactive"</span><span class="o">);</span>

        <span class="c1">// Subscriber의 역할</span>
        <span class="n">mono</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">message</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 출력</span>
<span class="nc">Hello</span><span class="o">,</span> <span class="nc">Reactive</span>
</code></pre></div></div>
<p>리액티브 스트림즈 구현체인 Project Reactor을 통해 출력하고 있는 모습이다.<br />
<code class="language-plaintext highlighter-rouge">Mono</code>의 역할이 Publisher의 역할이고<br />
Subscriber는 Publisher가 emit한 데이터를 전달 받아서<br />
소비하는 역할이라고 위에서 공부했었다.</p>

<p>Subscriber 역할을 하는 것은 <code class="language-plaintext highlighter-rouge">mono.subscribe();</code> 메서드이고<br />
내부에 정의된 람다 표현식을 사용하고 있다.</p>

<p>기존에 우리가 사용했던 Stream과 동일하게 메서드 체인형식으로 구성도 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Mono</span>
            <span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">"Hello, Reactive"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">message</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 출력</span>
<span class="nc">Hello</span><span class="o">,</span> <span class="nc">Reactive</span>
</code></pre></div></div>

<p>다른 형식의 예제를 알아보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveGlossaryExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Flux</span>
            <span class="o">.</span><span class="na">fromIterable</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">11</span><span class="o">))</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">number</span> <span class="o">-&gt;</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">))</span>
            <span class="o">.</span><span class="na">reduce</span><span class="o">((</span><span class="n">n1</span><span class="o">,</span> <span class="n">n2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="o">)</span>
            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 출력</span>
<span class="mi">14</span>
</code></pre></div></div>
<p><strong>Publisher -&gt;</strong> <code class="language-plaintext highlighter-rouge">Flux</code>가 Pusblisher 이다.</p>

<p><strong>Emit -&gt;</strong> <code class="language-plaintext highlighter-rouge">Flux</code>가 데이터를 내보내는 것을 가르킴</p>

<p><strong>Subscriber -&gt;</strong> <code class="language-plaintext highlighter-rouge">Flux</code>가 emit한 데이터를 전달 받아서 소비하는 주체 <br />
즉, <code class="language-plaintext highlighter-rouge">System.out::println</code> 부분이 Subscriber에 해당한다.</p>

<p><strong>Subscribe -&gt;</strong> <code class="language-plaintext highlighter-rouge">subscribe</code> 메서드를 호출하면 구독을 하는 것이다.</p>

<p><strong>Signal -&gt;</strong> Publisher가 발생시키는 이벤트를 의미한다.</p>

<p><strong>Operator -&gt;</strong> 어떤 동작을 수행하는 메서드를 의미한다.<br />
<code class="language-plaintext highlighter-rouge">fromIterable()</code>, <code class="language-plaintext highlighter-rouge">filter()</code>, <code class="language-plaintext highlighter-rouge">reduce()</code>등 하나하나들 Operator이라 한다.</p>

<p><strong>Sequence -&gt;</strong> Operator 체인으로 표현되는 데이터의 흐름을 의미한다.<br />
해당 코드에선 코드자체를 하나의 Sequence라고 보면된다.</p>

<p><strong>Upstream -&gt;</strong> Operator 기준으로 위쪽 Sequence 일부를 Upstream이라함<br />
<strong>Downstream -&gt;</strong> Operator 기준으로 아래쪽 Sequence 일부를 Downstream이라함</p>

<p><br /></p>

<hr />

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 제육볶음, 김치찌개, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[오늘은 리액티브 프로그래밍에 대해 공부해보는 날이다. 아마 깊은 내용은 다루지 않고, 간단한 지식들만 공부 할 것 같다.]]></summary></entry><entry><title type="html">TIL) Spring Security, JWT , OAuth 2 인증</title><link href="http://localhost:4000/til/2022/11/28/til.html" rel="alternate" type="text/html" title="TIL) Spring Security, JWT , OAuth 2 인증" /><published>2022-11-28T00:00:00+09:00</published><updated>2022-11-28T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/28/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/28/til.html"><![CDATA[<p>다시 시작된 월요일!!</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMbQN6-pRfE1nN6vp5n5bBxnzsRqAV9BVPdgdDtWEnmszNdkYWeBFUUR3XTJDQMFuQ4R9pAKdzVK7cB7d9feDMhlllDAQ=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>드디어 프로젝트를 해야할 시간이 다가오기 시작한다.</p>

<p>현재까지 배운 기술을 이용해 무언가 만들어본다는게 너무 설레고 기대된다.<br />
여태까지 배운 기술들에 대한 내용 중 크게 이해가 안되는 부분은 없었고<br />
Advance한 공부가 필요한 내용들이 많았다.</p>

<p>프로젝트를 기회로 깊이 파헤쳐보는 기회가 올 것 같아 너무나 기대된다.<br />
오늘은 OAuth2에 대한 마지막 시간이다.</p>

<p>그 동안 배운 Spring Security와 JWT, OAuth2를<br />
전부 이용해서 인증과 권한부여 코드를 작성해보는 것이다.</p>

<hr />

<h2 id="oauth2-인증-하기">OAuth2 인증 하기</h2>

<p>저번주에 배웠던 이론을 토대로 <br />
OAuth2 인증을 실제로 적용해 보자</p>

<p>우선 Frontend와 Backend가 분리되어있는<br />
CSR 방식의 애플리케이션에서 Google OAuth2 인증을 기준으로<br />
적용해볼 생각이다. Frontend 쪽 애플리케이션은<br />
Apache 웹 서버를 이용해 테스트 할 것이다.</p>

<p>그리고 저번주에 사전에 준비했던 <a href="https://console.cloud.google.com/apis">구글 API 콘솔</a> 애플리케이션을<br />
미리 만들어두어야 테스트가 가능하다.</p>

<p><strong>1). 구글 OAuth2 로그인 인증하기</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPYCl2OOAe2LzCPgn7AQnO8UlsiBuNOeltWAqxTW2abHw4z1QBzsc0U4uLd_c6l4a6Aw6wBcn-AxXgMyQCDUjStijQcAg=w1299-h920" alt="image" class="align-left" style="max-width: 120%" /></p>

<p>이제 가장 중요한 처리 흐름에 대해 이해해야한다.<br />
현재 빨간색으로 되어있는 부분은 우리가 구현해줘야하는 부분이고<br />
파란색 부분은 구현하지 않아도 Spring Security에서 처리해준다.</p>

<p>처음으로 (1)번 로그인 링크를 Frontend 서버에서 클릭을하면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNEUrb0C3R5OQ64jxKBOQ2RZmo0stTpPeSGsr_TD-oZb_u8a1K9qBDeExZ7GR8XUZ8quM1L1S9_A3lwrcxbQlf-PyVTZg=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /><br />
(테스트 용도로 Apache 웹서버에 해당 html을 만들었다.)</p>

<p>(2)번과 같은 형식의 인증 URI로 request 전송을 해줘야한다.<br />
<code class="language-plaintext highlighter-rouge">OAuth2LoginAuthenticationFilter</code> 클래스가 이부분을 처리해준다.<br />
해당 클래스도 <code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code>와 같이<br />
<code class="language-plaintext highlighter-rouge">AbstractAuthenticationProcessingFilter</code> 추상 클래스를 상속하고 있다.<br />
즉 필터가 시작되면 추상클래스에 정의된 <code class="language-plaintext highlighter-rouge">doFilter();</code>메서드를 실행하는 것이다.</p>

<p>그리고 (3)번에서 Google을 로그인 화면을 요청하는 URI로 리다이렉트한다.<br />
또한 Authorization Server가 Backend 애플리케이션 쪽으로<br />
Authorization Code를 전송할 Redirect URI(<code class="language-plaintext highlighter-rouge">http://localhost:8080/login/oauth2/code/google</code>)를<br />
쿼리 파리미터로 전달해준다. Redirect URI는 Spring Security가 내부적으로 제공해준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPPdDAGDY39IwFa0FL10w8N0wMvZKXU62PSF8IeM9KDaMb5N48amtymQFMn9uQ8JpkmTFtCWgUkev_Xt-7gr4iPANG1-g=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>즉, <code class="language-plaintext highlighter-rouge">https://accounts.google.com/o/oauth2/v2/auth/oauthchooseaccount?redirect_uri=http://localhost:8080/login/oauth2/code/google</code><br />
와 같은 형식으로 리다이렉션해 (4)번인 로그인 화면을 보여준다. 이외에 쿼리들도 있지만 따로 적지는 않겠다.</p>

<p>그러면 이제 구글 로그인 화면이 Resource Owner한테 보일테니<br />
(5)번 로그인을 해주면 된다. 그렇게 되면 Backend 애플리케이션 서버에서<br />
위에서 받은 Redirect URI로 Authorization Code를 요청하고<br />
그럼과 같은 순서대로 Access Token을 받고, Resource Server에<br />
요청하여 데이터를 접근할 수 있게되는 것이다.</p>

<p>그리고 마지막으로 전송받으면 로그인 완료 Redirect를 진행할<br />
URI를 만들어 Frontend 애플리케이션으로 던져주면<br />
OAuth2 로그인 인증 구현에는 끝난다.<br />
(JWT 토큰도 만들어 함께 보낸다)</p>

<p><br /></p>

<p>코드로 한번 살펴보자</p>

<p>우선 JWT를 만들어주는 클래스를 먼저 작성해보자<br />
이전에 JWT 코드와 동일하다</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenizer</span> <span class="o">{</span>

    <span class="nd">@Getter</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jwt.key.secret}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">securityKey</span><span class="o">;</span>

    <span class="nd">@Getter</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jwt.access-token-expiration-minutes}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">accessTokenExpirationMinutes</span><span class="o">;</span>

    <span class="nd">@Getter</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jwt.refresh-token-expiration-minutes}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">refreshTokenExpirationMinutes</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">encodeBase64SecretKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">securityKey</span><span class="o">){</span>
        <span class="k">return</span> <span class="nc">Encoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">securityKey</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">generateAccessToken</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span> <span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span><span class="o">,</span> <span class="nc">String</span> <span class="n">subject</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiration</span><span class="o">,</span> <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>

        <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKeyFromBase64EncodedKey</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">subject</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setClaims</span><span class="o">(</span><span class="n">claims</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setIssuedAt</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getTime</span><span class="o">())</span>
                <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="n">expiration</span><span class="o">)</span>
                <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
                <span class="o">.</span><span class="na">compact</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">generateRefreshToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">subject</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiration</span><span class="o">,</span> <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>

        <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKeyFromBase64EncodedKey</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">subject</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setIssuedAt</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getTime</span><span class="o">())</span>
                <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="n">expiration</span><span class="o">)</span>
                <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
                <span class="o">.</span><span class="na">compact</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Jws</span><span class="o">&lt;</span><span class="nc">Claims</span><span class="o">&gt;</span> <span class="nf">getClaims</span><span class="o">(</span><span class="nc">String</span> <span class="n">jws</span><span class="o">,</span> <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>

        <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKeyFromBase64EncodedKey</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="nc">Jws</span><span class="o">&lt;</span><span class="nc">Claims</span><span class="o">&gt;</span> <span class="n">claimsJws</span> <span class="o">=</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">parserBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">setSigningKey</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">()</span>
                <span class="o">.</span><span class="na">parseClaimsJws</span><span class="o">(</span><span class="n">jws</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">claimsJws</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Date</span> <span class="nf">getTokenExpiration</span><span class="o">(</span><span class="kt">int</span> <span class="n">expirationMinutes</span><span class="o">){</span>
        <span class="nc">Calendar</span> <span class="n">instance</span> <span class="o">=</span> <span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="n">instance</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">MINUTE</span><span class="o">,</span> <span class="n">expirationMinutes</span><span class="o">);</span>
        <span class="nc">Date</span> <span class="n">expiration</span> <span class="o">=</span> <span class="n">instance</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>

        <span class="k">return</span> <span class="n">expiration</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Key</span> <span class="nf">getKeyFromBase64EncodedKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">keyBytes</span> <span class="o">=</span> <span class="nc">Decoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">Keys</span><span class="o">.</span><span class="na">hmacShaKeyFor</span><span class="o">(</span><span class="n">keyBytes</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>달라진점은 없고, 후에 JWT를 만들때 DI받아 사용해주면 된다.</p>

<p><br /></p>

<p>두번째로는 SecurityFilterChain을 구성해보자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableWebSecurity</span><span class="o">(</span><span class="n">debug</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfigurationV2</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SecurityConfigurationV2</span><span class="o">(</span><span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">,</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">,</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenizer</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authorityUtils</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span>
                <span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">frameOptions</span><span class="o">().</span><span class="na">sameOrigin</span><span class="o">()</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                <span class="o">.</span><span class="na">cors</span><span class="o">(</span><span class="n">withDefaults</span><span class="o">())</span>
                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">().</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="nc">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                <span class="o">.</span><span class="na">httpBasic</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
                <span class="o">.</span><span class="na">authenticationEntryPoint</span><span class="o">(</span><span class="k">new</span> <span class="nc">MemberAuthenticationEntryPoint</span><span class="o">())</span>
                <span class="o">.</span><span class="na">accessDeniedHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">MemberAccessDeniedHandler</span><span class="o">())</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="nc">CustomFilterConfigurer</span><span class="o">())</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">(</span><span class="n">authorize</span> <span class="o">-&gt;</span> <span class="n">authorize</span> <span class="c1">// url authorization 전체 추가</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">"/*/coffees"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">PATCH</span><span class="o">,</span> <span class="s">"/*/coffees/**"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">"/*/coffees/**"</span><span class="o">).</span><span class="na">hasAnyRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">,</span> <span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">"/*/coffees"</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">,</span> <span class="s">"/*/coffees"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">"/*/orders"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">PATCH</span><span class="o">,</span> <span class="s">"/*/orders"</span><span class="o">).</span><span class="na">hasAnyRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">,</span> <span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">"/*/orders/**"</span><span class="o">).</span><span class="na">hasAnyRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">,</span> <span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">,</span> <span class="s">"/*/orders"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">permitAll</span><span class="o">()</span>
                <span class="o">)</span>
                <span class="o">.</span><span class="na">oauth2Login</span><span class="o">(</span><span class="n">oauth2</span> <span class="o">-&gt;</span> <span class="n">oauth2</span>
                        <span class="o">.</span><span class="na">successHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">OAuth2MemberSuccessHandler</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">,</span> <span class="n">authorityUtils</span><span class="o">,</span> <span class="n">memberService</span><span class="o">))</span>
                <span class="o">);</span>

        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">CorsConfigurationSource</span> <span class="nf">corsConfigurationSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">CorsConfiguration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CorsConfiguration</span><span class="o">();</span>
        <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"*"</span><span class="o">));</span>
        <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedMethods</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span><span class="s">"POST"</span><span class="o">,</span> <span class="s">"PATCH"</span><span class="o">,</span> <span class="s">"DELETE"</span><span class="o">));</span>
        <span class="nc">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
        <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">"/**"</span><span class="o">,</span> <span class="n">configuration</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">source</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomFilterConfigurer</span> <span class="kd">extends</span> <span class="nc">AbstractHttpConfigurer</span><span class="o">&lt;</span><span class="nc">CustomFilterConfigurer</span><span class="o">,</span> <span class="nc">HttpSecurity</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">builder</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
            <span class="nc">JwtVerificationFilter</span> <span class="n">jwtVerificationFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JwtVerificationFilter</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">,</span> <span class="n">authorityUtils</span><span class="o">);</span>

            <span class="n">builder</span><span class="o">.</span><span class="na">addFilterAfter</span><span class="o">(</span><span class="n">jwtVerificationFilter</span><span class="o">,</span> <span class="nc">OAuth2LoginAuthenticationFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>필터체인 구성도 크게 바뀐건 없다.<br />
달라진점은 JWT 인증을 사용했을 때는, <code class="language-plaintext highlighter-rouge">jwtAuthenticationFilter</code>라는 필터 클래스를<br />
우리가 직접 구현해줘서, 필터체인에 등록해주었었다. 그 부분이 사라지고<br />
우리는 OAuth2 인증을 이용하기 위해 <code class="language-plaintext highlighter-rouge">.oauth2Login()</code> 가 추가되었고, 추가됨에 따라  <br />
<code class="language-plaintext highlighter-rouge">OAuth2AuthorizationRequestRedirectFilter</code> 와 <br />
<code class="language-plaintext highlighter-rouge">OAuth2LoginAuthenticationFilter</code> 가 추가된다. <br />
해당 필터들이 추가됨에따라 OAuth2 인증을 진행해주고, 인증에 성공시
<code class="language-plaintext highlighter-rouge">AbstractAuthenticationProcessingFilter</code> 클래스에서<br />
<code class="language-plaintext highlighter-rouge">successfulAuthentication();</code>메서드를 호출하게 되어진다.</p>

<p>호출되면 인증된 객체가 <code class="language-plaintext highlighter-rouge">SecurityContext</code>에 저장되고<br />
<code class="language-plaintext highlighter-rouge">AuthenticationSuccessHandler</code> 인터페이스에 <code class="language-plaintext highlighter-rouge">onAuthenticationSuccess();</code>를 호출하게된다.<br />
말은 즉슨 해당 인터페이스를 상속해 구현하는 클래스를 우리가 만들어서 Frontend쪽 서버로<br />
JWT 토큰을 만들어서 보낸다거나, 리다이렉트할 URI를 생성한다든가 조작이 가능하다는 점이다.</p>

<p>그렇게 조작하는 클래스를 우리가 만들어보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuth2MemberSuccessHandler</span> <span class="kd">extends</span> <span class="nc">SimpleUrlAuthenticationSuccessHandler</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OAuth2MemberSuccessHandler</span><span class="o">(</span><span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">,</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">,</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenizer</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authorityUtils</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAuthenticationSuccess</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Authentication</span> <span class="n">authentication</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="c1">// 인증된 객체로 부터 Resource Owner의 이메일 주소를 얻을 수 있다.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# Redirect to Frontend"</span><span class="o">);</span>
        <span class="nc">OAuth2User</span> <span class="n">oAuth2User</span> <span class="o">=</span> <span class="o">(</span><span class="nc">OAuth2User</span><span class="o">)</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">email</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

        <span class="cm">/*
         * 플랫폼에 따른 email 가져오기
         * */</span>
        <span class="k">if</span><span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"삭제"</span><span class="o">)){</span> <span class="c1">// 해당 부분은 getName();의 번호를 가져오는 부분으로 비교함. 혹시 몰라서 번호는 삭제</span>
            <span class="c1">// 구글</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# Google 로그인 실행"</span><span class="o">);</span>
            <span class="n">email</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"삭제"</span><span class="o">)){</span>
            <span class="c1">//카카오</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# Kakao 로그인 실행"</span><span class="o">);</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">kakao_account</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"kakao_account"</span><span class="o">);</span>
            <span class="n">email</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">kakao_account</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"삭제"</span><span class="o">)){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# GitHub 로그인 실행"</span><span class="o">);</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
            <span class="n">email</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"login"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# Naver 로그인 실행"</span><span class="o">);</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">naver_account</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"response"</span><span class="o">);</span>
            <span class="n">email</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">naver_account</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 강제 admin 권한 부여 (테스트 용도)</span>
        <span class="nc">String</span> <span class="n">adminCheck</span> <span class="o">=</span> <span class="s">"admin@gmail.com"</span><span class="o">;</span>
        <span class="c1">// 얻은 email 주소로 권한 List 만들기</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorities</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">.</span><span class="na">createRoles</span><span class="o">(</span><span class="n">adminCheck</span><span class="o">);</span>

        <span class="c1">// email을 토대로 Member 객체 만들어서 DB에 저장</span>
        <span class="c1">// 현재는 저장안하도록 테스트만진행</span>
<span class="c1">//        saveMember(email);</span>

        <span class="c1">// 리다이렉트를 하기위한 정보들을 보내줌</span>
        <span class="n">redirect</span><span class="o">(</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">,</span><span class="n">email</span><span class="o">,</span><span class="n">authorities</span><span class="o">);</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">redirect</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorities</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// 받은 정보를 토대로 AccessToken, Refresh Token을 만듬</span>
        <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">delegateAccessToken</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">authorities</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">delegateRefreshToken</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>

        <span class="c1">// Token을 토대로 URI를 만들어서 String으로 변환</span>
        <span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">createURI</span><span class="o">(</span><span class="n">accessToken</span><span class="o">,</span> <span class="n">refreshToken</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>

        <span class="c1">// 만든 URI로 리다이렉트 보냄</span>
        <span class="n">getRedirectStrategy</span><span class="o">().</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">,</span><span class="n">uri</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">delegateAccessToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorities</span><span class="o">){</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"username"</span><span class="o">,</span><span class="n">username</span><span class="o">);</span>
        <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"roles"</span><span class="o">,</span><span class="n">authorities</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
        <span class="nc">Date</span> <span class="n">expiration</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getTokenExpiration</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getAccessTokenExpirationMinutes</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">encodeBase64SecretKey</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getSecurityKey</span><span class="o">());</span>

        <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">generateAccessToken</span><span class="o">(</span><span class="n">claims</span><span class="o">,</span> <span class="n">subject</span><span class="o">,</span> <span class="n">expiration</span><span class="o">,</span> <span class="n">base64EncodedSecretKey</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">accessToken</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">delegateRefreshToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">){</span>

        <span class="nc">String</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
        <span class="nc">Date</span> <span class="n">expiration</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getTokenExpiration</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getRefreshTokenExpirationMinutes</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">encodeBase64SecretKey</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getSecurityKey</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">generateRefreshToken</span><span class="o">(</span><span class="n">subject</span><span class="o">,</span> <span class="n">expiration</span><span class="o">,</span> <span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">refreshToken</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="no">URI</span> <span class="nf">createURI</span><span class="o">(</span><span class="nc">String</span> <span class="n">accessToken</span><span class="o">,</span> <span class="nc">String</span> <span class="n">refreshToken</span><span class="o">){</span>
        <span class="nc">MultiValueMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">queryParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedMultiValueMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">queryParams</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"access_token"</span><span class="o">,</span> <span class="n">accessToken</span><span class="o">);</span>
        <span class="n">queryParams</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"refresh_token"</span><span class="o">,</span> <span class="n">refreshToken</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">UriComponentsBuilder</span>
                <span class="o">.</span><span class="na">newInstance</span><span class="o">()</span>
                <span class="o">.</span><span class="na">scheme</span><span class="o">(</span><span class="s">"http"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">host</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">)</span>
<span class="c1">//                .port(80) // 기본 포트가 80이기 때문에 괜찮다</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/receive-token.html"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">queryParams</span><span class="o">(</span><span class="n">queryParams</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">()</span>
                <span class="o">.</span><span class="na">toUri</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">SimpleUrlAuthenticationSuccessHandler</code>클래스를 상속받고 있다.<br />
해당 클래스는 <code class="language-plaintext highlighter-rouge">AuthenticationSuccessHandler</code> 인터이스를 상속받고있다.<br />
위에서 얘기했듯이 인증에 성공시 해당 인터페이스의 <code class="language-plaintext highlighter-rouge">onAuthenticationSuccess();</code>가<br />
호출되어지고, 이 메서드를 Overriding하여 구현하면 된다.</p>

<p>구현 내용은 인증된 객체에서 우선 정보를 꺼내도록했다.<br />
email 정보를 꺼내서 추후에 DB에 관리한다면 저장할 예정이다.<br />
또한 여러가지 Google,Kakao,Github,Kakao 등을 구별하기위해<br />
<code class="language-plaintext highlighter-rouge">getName();</code>의 값을 사용했지만… 이부분은 따로 header에서 구분할 수 있는<br />
무언가를 가져와야할 것 같은 느낌이든다. (아직 해결못한 숙제다)</p>

<p>그래도 우선 구현테스트를 위해 name값으로 케이스를 나눠<br />
<code class="language-plaintext highlighter-rouge">getAttributes();</code> 안에있는 email 정보를 꺼내서 저장하는 것을 구현했다.</p>

<p>그리고 가장 중요한 부분인 Redirect 부분인데<br />
현재 구글 인증이 정상적으로 이루어져 흐름이 이쪽으로 넘어온 것이고<br />
이제 우리는 로그인을 완료했으니 다른페이지를 Redirect 해야하며<br />
JWT을 만들어서 header에 싦어주는 코드를 구현해야한다.</p>

<p>그 구현 부분이 <code class="language-plaintext highlighter-rouge">redirect();</code>으로 작성했고<br />
해당 내용은 accessToken, refreshToken을 만들고<br />
UriComponentsBuilder를 통해서 우리가 Redirect할 주소와<br />
queryParams로 추가해서 URI만들었다.</p>

<p>이제 Redirect만 진행하면된다. <code class="language-plaintext highlighter-rouge">getRedirectStrategy().sendRedirect();</code>를 구현해<br />
Redirect를 진행하도록했고 해당 메서드는 <code class="language-plaintext highlighter-rouge">AbstractAuthenticationTargetUrlRequestHandler</code> <br />
인터페이스의 메서드로 마찬가지로 <code class="language-plaintext highlighter-rouge">SimpleUrlAuthenticationSuccessHandler</code>와 상속관계라<br />
Overriding하여 우리가 구현이 가능한 부분이다. 매개 변수로는</p>

<p>HttpServletRequest 객체, HttpServletResponse 객체, String uri<br />
이렇게 매개변수로 넘겨주면 Redirect하게 되어지는 것이다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">security</span><span class="pi">:</span>
    <span class="na">oauth2</span><span class="pi">:</span>
      <span class="na">client</span><span class="pi">:</span>
        <span class="na">registration</span><span class="pi">:</span>
          <span class="na">google</span><span class="pi">:</span>
            <span class="na">clientId</span><span class="pi">:</span> <span class="s">${G_CLIENT_ID}</span> <span class="c1"># 구글 API콘솔로 발급받은 ID</span>
            <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${G_CLIENT_SECRET}</span> <span class="c1"># 구글 API콘솔로 발급받은 SECRET</span>
            <span class="na">scope</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s">email</span>
              <span class="pi">-</span> <span class="s">profile</span>
</code></pre></div></div>
<p>이제 마지막으로 .yml 파일에 필요한 설정정보를 입력해주면<br />
Springn Security에서 자동으로 진행해준다.</p>

<p>정말 대단하다… 내가 직접구현한 코드는 완전 극히 일부일텐데<br />
이모든걸 자동화시켜놓고 우리같은 초짜 개발자도 이용할 수 있다는게…<br />
후에 실제 Filter 동작에 디버그를 걸어놓고 어떻게 OAuth2 인증 과정을<br />
거치가는지는 면밀한 파악이 필요할 것 같다.</p>

<p><br /></p>

<p>이렇게 구현을 완료한 다음에<br />
실제로 로그인을 진행해보았을 때, 구글 로그인 완료 후에</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMsRfmFlCV2832vUEdC9XNM1u89sACuHGq-cKq-QfuuzyoTLPQDhc32NXsUg5dDd33-8J3tJXvUQ1V14h3ailY1wbfrjg=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>개발자도구로 원하는 페이지에 리다이렉션이 되었고<br />
우리가 만들어준 accessToken과 refreshToken이 정상적으로<br />
로컬 스토리지에 담겨있는 모습을 확인해 볼 수 있다.</p>

<p>로컬 스토리지에 담긴 이유는 Frontend 쪽 서버에<br />
javaScript언어로 저장하도록 코드를 추가해놓아서 저장되어지는 것이다.<br />
물론 <code class="language-plaintext highlighter-rouge">response.setHeader();</code>메서드를 통해서 header로 전송할 수도 있다.</p>

<p><br /></p>

<p><strong>2). 카카오톡 OAuth2 로그인 인증하기</strong></p>

<p>구글 로그인 인증을 완료해 보았으니<br />
다른 로그인도 한번 시도해보고 싶었다.</p>

<p>위에 코드는 전부 그대로 두고 .yml 설정 파일의 설정 정보만 변경하면 똑같이 인증이 가능하다.</p>

<p>구글 콘솔 API처럼 카카오톡도 <a href="https://developers.kakao.com/docs/latest/ko/kakaologin/common">카카오톡 로그인 애플리케이션</a>을 만들어 줘야한다.<br />
해당 사이트에 들어가 애플리케이션을 만들고</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMNQi6w61DyZV6ZpqvZm6pPcQJYYnsPc7iY0O_zUDGz-JTOT5txnrrNGQNFkUn52am_j-h4ZDHflC0zWCl5wQPJcc5S1A=w1299-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>client-id와 client-secret를 발급 받으면 된다.<br />
그 외에 scope 정보 동의 설정들도 가능했다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">security</span><span class="pi">:</span>
    <span class="na">oauth2</span><span class="pi">:</span>
      <span class="na">client</span><span class="pi">:</span>
        <span class="na">registration</span><span class="pi">:</span>
          <span class="na">google</span><span class="pi">:</span>
            <span class="na">clientId</span><span class="pi">:</span> <span class="s">${G_CLIENT_ID}</span> <span class="c1"># 구글 API콘솔로 발급받은 ID</span>
            <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${G_CLIENT_SECRET}</span> <span class="c1"># 구글 API콘솔로 발급받은 SECRET</span>
            <span class="na">scope</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s">email</span>
              <span class="pi">-</span> <span class="s">profile</span>
          <span class="na">kakao</span><span class="pi">:</span>
            <span class="na">client-id</span><span class="pi">:</span> <span class="s">${K_CLIENT_ID}</span> <span class="c1"># 앱 설정 -&gt; 앱 키 -&gt; REST API 키</span>
            <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${K_CLIENT_SECRET}</span>  <span class="c1"># 제품 설정 -&gt; 카카오 로그인 -&gt; 보안 -&gt; Client Secret</span>
            <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s">http://localhost:8080/login/oauth2/code/kakao</span>
            <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
            <span class="na">client-authentication-method</span><span class="pi">:</span> <span class="s">POST</span>
            <span class="na">client-name</span><span class="pi">:</span> <span class="s">Kakao</span>
            <span class="na">scope</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s">profile_nickname</span>
              <span class="pi">-</span> <span class="s">profile_image</span>
              <span class="pi">-</span> <span class="s">account_email</span>
        <span class="na">provider</span><span class="pi">:</span>
          <span class="na">kakao</span><span class="pi">:</span>
            <span class="na">authorization-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/authorize</span>
            <span class="na">token-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/token</span>
            <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://kapi.kakao.com/v2/user/me</span>
            <span class="na">user-name-attribute</span><span class="pi">:</span> <span class="s">id</span>
</code></pre></div></div>

<p>기존 구글설정에 밑에 카카오관련 설정을 넣어주고</p>

<p>Frontend 서버에서 <code class="language-plaintext highlighter-rouge">http://localhost:8080/oauth2/authorization/kakao</code> 로 요청을 보내주면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPAV4LBZQ-47VonDS63Xdnq372ABlm7MY1RK4wselyaycZ2FsH9ZGokzqYFMESSg8Qk8DGXiK5CfZcn55FoQ1xLok2RAQ=w1920-h920" alt="image" class="align-left" style="max-width: 80%" /></p>

<p>우리가 설정한대로 카카오톡 로그인 인증이 동일하게 진행할 수 있다.</p>

<p><br /></p>

<p><strong>3). 네이버 OAuth2 로그인 인증하기</strong></p>

<p>네이버도 마찬가지다 <a href="https://developers.naver.com/products/login/api/api.md">네이버 로그인 애플리케이션</a>에 들어가  <br />
애플리케이션을 만들어준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNKLUTpN-9m9o5CXOIedRwYXZbs5uBcW6AxtCgKUjRgT1qAjRtU7vDZfTgjaQiOQ5Jj_3aq_zmAas4fzv67DLhASES5=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>동일하게 id와 secretKey를 받았을 것이다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">security</span><span class="pi">:</span>
      <span class="na">oauth2</span><span class="pi">:</span>
        <span class="na">client</span><span class="pi">:</span>
          <span class="na">registration</span><span class="pi">:</span>
            <span class="na">google</span><span class="pi">:</span>
              <span class="na">clientId</span><span class="pi">:</span> <span class="s">${G_CLIENT_ID}</span> <span class="c1"># 구글 API콘솔로 발급받은 ID</span>
              <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${G_CLIENT_SECRET}</span> <span class="c1"># 구글 API콘솔로 발급받은 SECRET</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">email</span>
                <span class="pi">-</span> <span class="s">profile</span>
            <span class="na">kakao</span><span class="pi">:</span>
              <span class="na">client-id</span><span class="pi">:</span> <span class="s">${K_CLIENT_ID}</span> <span class="c1"># 앱 설정 -&gt; 앱 키 -&gt; REST API 키</span>
              <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${K_CLIENT_SECRET}</span>  <span class="c1"># 제품 설정 -&gt; 카카오 로그인 -&gt; 보안 -&gt; Client Secret</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s">http://localhost:8080/login/oauth2/code/kakao</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">client-authentication-method</span><span class="pi">:</span> <span class="s">POST</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">Kakao</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">profile_nickname</span>
                <span class="pi">-</span> <span class="s">profile_image</span>
                <span class="pi">-</span> <span class="s">account_email</span>
            <span class="na">naver</span><span class="pi">:</span>
              <span class="na">client-id</span><span class="pi">:</span> <span class="s">${N_CLIENT_ID}</span>
              <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${N_CLIENT_SECRET}</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{baseUrl}/{action}/oauth2/code/{registrationId}"</span> <span class="c1"># (== http://localhost:8080/login/oauth2/code/naver)</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">scope</span><span class="pi">:</span> <span class="s">name, email, profile_image</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">Naver</span>
          <span class="na">provider</span><span class="pi">:</span>
            <span class="na">kakao</span><span class="pi">:</span>
              <span class="na">authorization-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/authorize</span>
              <span class="na">token-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/token</span>
              <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://kapi.kakao.com/v2/user/me</span>
              <span class="na">user-name-attribute</span><span class="pi">:</span> <span class="s">id</span>
            <span class="na">naver</span><span class="pi">:</span>
              <span class="na">authorization_uri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/authorize</span>
              <span class="na">token_uri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/token</span>
              <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://openapi.naver.com/v1/nid/me</span>
              <span class="na">user_name_attribute</span><span class="pi">:</span> <span class="s">response</span>
</code></pre></div></div>

<p>네이버도 동일하게 설정을 완료해주고<br />
Frontend 서버에서 <code class="language-plaintext highlighter-rouge">http://localhost:8080/oauth2/authorization/naver</code> 로 요청을 보내주면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOzNDUxcjFONc6GXx7sdUQHD8X7MyLz6P4HC8egracTxzybn6-6Ik4dC1jcgxtySNbwe7ueB3K3vvpz-jXu1jrpC9l-=w1299-h920" alt="image" class="align-left" style="max-width: 80%" /></p>

<p>위와 같이 네이버 로그인 인증을 사용할 수 있게된다.</p>

<p><br /></p>

<p><strong>4). Github OAuth2 로그인 인증하기</strong></p>

<p>마지막으로 Github OAuth2도 적용해보고 싶어 시도해봤다.</p>

<p>GitHub 홈페이지에서<br />
<code class="language-plaintext highlighter-rouge">Setting -&gt; Developer settings -&gt; OAuth Apps</code><br />
경로로 접속하면 아래와 같이 애플리케이션을 만들수 있는 화면이 나온다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO851leSPchx-qwjJ_xI7KGIzTiarPVJUFY6-Ix1iWnh7kyS2RqWZBzZqGbLXiqoUnvcaFzV8jSvKNtDivX-r6hHmyIZA=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>나는 practice라는 이름으로 애플리케이션을 만들었다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">security</span><span class="pi">:</span>
      <span class="na">oauth2</span><span class="pi">:</span>
        <span class="na">client</span><span class="pi">:</span>
          <span class="na">registration</span><span class="pi">:</span>
            <span class="na">google</span><span class="pi">:</span>
              <span class="na">clientId</span><span class="pi">:</span> <span class="s">${G_CLIENT_ID}</span> <span class="c1"># 구글 API콘솔로 발급받은 ID</span>
              <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${G_CLIENT_SECRET}</span> <span class="c1"># 구글 API콘솔로 발급받은 SECRET</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">email</span>
                <span class="pi">-</span> <span class="s">profile</span>
            <span class="na">kakao</span><span class="pi">:</span>
              <span class="na">client-id</span><span class="pi">:</span> <span class="s">${K_CLIENT_ID}</span> <span class="c1"># 앱 설정 -&gt; 앱 키 -&gt; REST API 키</span>
              <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${K_CLIENT_SECRET}</span>  <span class="c1"># 제품 설정 -&gt; 카카오 로그인 -&gt; 보안 -&gt; Client Secret</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s">http://localhost:8080/login/oauth2/code/kakao</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">client-authentication-method</span><span class="pi">:</span> <span class="s">POST</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">Kakao</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">profile_nickname</span>
                <span class="pi">-</span> <span class="s">profile_image</span>
                <span class="pi">-</span> <span class="s">account_email</span>
            <span class="na">naver</span><span class="pi">:</span>
              <span class="na">client-id</span><span class="pi">:</span> <span class="s">${N_CLIENT_ID}</span>
              <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${N_CLIENT_SECRET}</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{baseUrl}/{action}/oauth2/code/{registrationId}"</span> <span class="c1"># (== http://localhost:8080/login/oauth2/code/naver)</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">scope</span><span class="pi">:</span> <span class="s">name, email, profile_image</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">Naver</span>
            <span class="na">github</span><span class="pi">:</span>
              <span class="na">clientId</span><span class="pi">:</span> <span class="s">${H_CLIENT_ID}</span>
              <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${H_CLIENT_SECRET}</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{baseUrl}/{action}/oauth2/code/{registrationId}"</span> <span class="c1"># (== http://localhost:8080/login/oauth2/code/google)</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">GitHub</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">email</span>
                <span class="pi">-</span> <span class="s">profile</span>
          <span class="na">provider</span><span class="pi">:</span>
            <span class="na">kakao</span><span class="pi">:</span>
              <span class="na">authorization-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/authorize</span>
              <span class="na">token-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/token</span>
              <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://kapi.kakao.com/v2/user/me</span>
              <span class="na">user-name-attribute</span><span class="pi">:</span> <span class="s">id</span>
            <span class="na">naver</span><span class="pi">:</span>
              <span class="na">authorization_uri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/authorize</span>
              <span class="na">token_uri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/token</span>
              <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://openapi.naver.com/v1/nid/me</span>
              <span class="na">user_name_attribute</span><span class="pi">:</span> <span class="s">response</span>
</code></pre></div></div>

<p>위에서 했던 구글,카카오,네이버와 동일하게<br />
.yml 파일에 설정 정보만 추가해주면 인증 사용이 가능하고</p>

<p>Frontend 서버에서 <code class="language-plaintext highlighter-rouge">http://localhost:8080/oauth2/authorization/github</code> 로 요청을 보내주면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOaC_iiUM1AFkW7zDZbf4FANkrFWyZsicq-OxPRG3aqYGgXWLsZYCi_DzPa-aTNW8OWIfJnoVBC5-Ze7u6eXct9r5ch=w1299-h920" alt="image" class="align-left" style="max-width: 70%" /></p>

<p>동일하게 로그인 요청을 보내면<br />
정상적으로 인증이되고 AccessToken과 Refresh Token이 발급되는<br />
모습을 확인할 수 있다.</p>

<p><br /></p>

<hr />

<p>이렇게 오늘은 OAuth2 인증에 대한<br />
여러가지 벤더들의 로그인 기능을 사용해 보았다.<br />
실질적으로 어떤 회사냐에 따라 변경하는 부분은 크게 어렵지 않은 것 같다.</p>

<p>하지만 Spring이 상당히 많은 부분을 작업해주고<br />
내가 구현하는 부분인 정망 극히 일부이기 때문에<br />
OAuth2에 대한 완벽한 이해가 되었다고는 할 수 없을 것 같다.</p>

<p>계속 공부하면서 느끼는 것은 프레임워크에 대한 세부 내용<br />
이해하는 것이 정말 중요하다고 느끼고<br />
추후에 이부분에 대한 흐름들은 따로 공부를하려고한다.</p>

<p>오늘 공부는 여기서 끝 !</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 라면, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[다시 시작된 월요일!!]]></summary></entry><entry><title type="html">macOs) Apache 웹 서버 AH00558 Could not reliable determine the server’s fully qualified domain name ..</title><link href="http://localhost:4000/macos/2022/11/27/OS-macOs-4.html" rel="alternate" type="text/html" title="macOs) Apache 웹 서버 AH00558 Could not reliable determine the server’s fully qualified domain name .." /><published>2022-11-27T00:00:00+09:00</published><updated>2022-11-27T00:00:00+09:00</updated><id>http://localhost:4000/macos/2022/11/27/OS-macOs-4</id><content type="html" xml:base="http://localhost:4000/macos/2022/11/27/OS-macOs-4.html"><![CDATA[<p>오늘 공부하다가 막혔던 부분이 있어서 <br />
도움이 될까 싶어 적어본다.</p>

<h3 id="apache-웹-서버">APACHE 웹 서버</h3>

<p>아파치 HTTP 서버(Apache HTTP Server)는 <br />
아파치 소프트웨어 재단에서 관리하는 오픈 소스, 크로스 플랫폼 HTTP 웹 서버 소프트웨어다. <br />
BSD, 리눅스 등 유닉스 계열 뿐 아니라 마이크로소프트 윈도우나 노벨 넷웨어 <br />
같은 기종에서도 무료로 운용할 수 있다고 한다. <strong>[<a href="https://ko.wikipedia.org/wiki/%EC%95%84%ED%8C%8C%EC%B9%98_HTTP_%EC%84%9C%EB%B2%84">출처 - 위키백과</a>]</strong></p>

<p>Mac 환경에서 Apache 웹서버를 사용해보려하다 오류가 발생했다.<br />
오류를 얘기하기전 우선 설치 과정을 아래의 사이트를 참고했다.<br />
<strong>[<a href="https://www.javatpoint.com/how-to-install-apache-on-mac">Apache 설치 방법 - 참고사이트</a>]</strong></p>

<p><br /></p>

<p>homebrew를 이용한 설치방법이고<br />
Mac 사용 유저라면 익히 알고 있을 것이다.</p>

<p>설치를 완료한다음 <br />
문제는 아파치 서버를 실행/종료 시키기위해서<br />
<code class="language-plaintext highlighter-rouge">sudo apachectl start</code> 명령어와 <code class="language-plaintext highlighter-rouge">sudo apachectl stop</code> 명령어를<br />
사용하게 되는데… AH00558 코드로된 알람이 발생했다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMPblHp1IrHpidEB8NNOHDrTqEx8Q_JW9oJb7H4iCMDJNIKJUgNoYoQPhx8afmEEUw_UNIczBB2e98aG8ey3dT_HzWk=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AH00558: httpd: Could not reliably determine the server<span class="s1">'s fully qualified domain name, using MacBook-Pro.local. Set the '</span>ServerName<span class="s1">' directive globally to suppress this message
</span></code></pre></div></div>

<p>오류는 그렇다 쳐도, 기본 적으로 localhost에 접속하면<br />
<code class="language-plaintext highlighter-rouge">It works!</code> 화면이 노출되지 않았다.<br />
localhost:8080에 접속해야지만 화면이 노출되었고<br />
설정을 바꿀 필요가 있다고 느껴졌다.</p>

<p><br /></p>

<p><strong>1). httpd.conf 파일 찾기</strong></p>

<p>설정을 변경하기 위해서는 <code class="language-plaintext highlighter-rouge">httpd.conf</code> 파일을 수정해줘야한다.<br />
해당 파일 경로를 찾기위해 여러가지 블로그를 찾아보았는데</p>

<p>사람마다 여러가지 경로로 수정을 하는걸 보았다.</p>

<p><code class="language-plaintext highlighter-rouge">/etc/apache2/httpd.conf</code><br />
<code class="language-plaintext highlighter-rouge">/private/etc/apache2/httpd.conf</code><br />
와 같은 경로로 수정한 사람들도 있는 것 같다.<br />
하지만 나와 같은 경우는 제대로 반영되지 않았고…</p>

<p>어떠한 차이인지는 아직 불분명하지만 내가 수정했던 경로는 아래와 같다.  <br />
📌<code class="language-plaintext highlighter-rouge">/opt/homebrew/etc/httpd/httpd.conf</code>📌 <br />
아마 homebrew를 통해 실행하는 것이기 때문이지 않을까? 라는 생각을 해본다.</p>

<p><code class="language-plaintext highlighter-rouge">httpd.conf</code> 파일을 찾는데 처음에 애먹어서 시간을 많이 쓴 것 같다.</p>

<p>파일을 찾았으면 이제 shell에서 vi 편집기로 값을 수정해주면된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /opt/homebrew/etc/httpd/httpd.conf
</code></pre></div></div>

<p><br /></p>

<p><strong>2). Port 80 으로 변경하기</strong></p>

<p>편집기를 열고 아래와 같은 Listen을 찾아준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPzEEFalQYxag6NQ4wOJV1AuBpyHFHn9LwAi4g0PY8YljuKfpiPQY-9H1mOU1Vxqa-0reRKR1itloqQ_nXt8n7xKAh8=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>아마 기본적으로 8080으로 설정되어있을 것이다.<br />
#으로 주석처리를 해준다음, 아래에서 <code class="language-plaintext highlighter-rouge">Listen 80</code>으로 설정해주었다.</p>

<p><br /></p>

<p><strong>3). localhost로 변경 하기</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO9rZHRQQQ0HI4HBe-UBcgFt4ZMl91uomBFpsZLjsruipSi2KrdWjR89J1rptKW4mQSwI7iFSbjmpV5PgPfGLj88BO4yw=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위의 사진과 같이 ServerName을 localhost로 설정해주면 된다.</p>

<p><br /></p>

<p><strong>4). 결과 확인하기</strong></p>

<p>아파치 웹서버 실행 명령어인<br />
<code class="language-plaintext highlighter-rouge">sudo apachectl start</code>,<code class="language-plaintext highlighter-rouge">sudo apachectl stop</code>를 입력해도</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMxycEEiyoGZsXP0ZAh9sdmRXbB9ucK6Ar42OXNGDH3-OZW4FNBlpa68ehMFGULCDXcXODH-iLfmTYgK239LTRz134ZRg=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>더 이상 AH00558 오류가 발생하지 않는 모습이다.</p>

<p><br /></p>

<p>아파치 웹서버를 실행 시켜놓은 상태에서</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMRbasfobijEvOlwe60oFwSiELjJ7dm4RE7huFv2fFxSceyEPbFWQtmJCGSotTjXhbdaHpxJMCUOK2eMNPAneRzzlNyKA=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>localhost를 입력하여 접속할 경우<br />
이제 드디어 <code class="language-plaintext highlighter-rouge">It works</code> 화면을 볼 수 있게 된다 !!</p>

<p><br /></p>

<p><strong>5). html 파일 로딩하기</strong></p>

<p>이 부분은 참고차 한번 적어본다.<br />
아파치 웹서버에 내가 만든 html 파일을 적용 시키고싶을때</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPcmo_lcNtNltnX94Eob3uyBQJybrqArcuxv2z-iwhwBK57y-p25jsZ_Ix3I54tn2Nd91TGqAAm2KLiE9OkCGh4SiZwgA=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><code class="language-plaintext highlighter-rouge">httpd.conf</code> 파일에서 <code class="language-plaintext highlighter-rouge">DocumentRoot</code>를 수정해주면 html 파일을 사용할 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPgBo-oGeeI700xa9M9BOdiv2Uw4FQKR_C_9gwzceG8GVhNMT8iTUzJBVJLLQpGRRA_itVQOTuAz3AQGnJ_c7Ci0c9m8A=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>예를 들어서 index.html 이라는 파일을 만들어 위의 경로에 파일을 두었을때</p>

<p>기존에 localhost:80 접속 시 <code class="language-plaintext highlighter-rouge">It wroks!</code>로 나왔던 화면이<br />
내가 만든 화면으로 대체된 모습을 볼 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNlhfc-M7DRb35wAbT-xovzxuD54T512fR8OIeFZV-EtR0ngdJiUFt3vW4ToqBe3FzhdN8ZagQMmwTk5rt2syRzbW0dOA=w1782-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>이 화면은 테스트용으로 만든 화면이고<br />
정상적으로 파일이 접속된 모습을 볼 수 있다.<br />
이후 부터는 폴더경로를 만들어 html 파일에 접근하면된다.</p>

<p><br /></p>

<hr />

<p>혹시나 싶어 <a href="https://mainia.tistory.com/5490">WindowOS 해결 방법 - 출처 mainia님</a> 찾다가 좋은글인 것 같아 올려본다.<br />
좀 더 자세한 내용을 보고싶다면 <a href="https://velog.io/@diduya/macOS%EC%97%90-Homebrew%EB%A1%9C-Apache-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0">내가 참고한 해결 방법 - 출처 diduya님</a> 포스팅을 봐도<br />
좋은 해결법이될 것 같다.</p>

<p><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="macOs" /><category term="macOs" /><summary type="html"><![CDATA[오늘 공부하다가 막혔던 부분이 있어서 도움이 될까 싶어 적어본다.]]></summary></entry><entry><title type="html">TIL) OAuth 2 인증 기초</title><link href="http://localhost:4000/til/2022/11/25/til.html" rel="alternate" type="text/html" title="TIL) OAuth 2 인증 기초" /><published>2022-11-25T00:00:00+09:00</published><updated>2022-11-25T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/25/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/25/til.html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPDuT8mojlcwDj4isWJwyJvwaEPSsequtCg9insTbysDEVk6R7VRiRwBIm8ta5JK6J4r7ZDnBUypheW5SWHioLCJ0f8=w1920-h864" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>이번주는 정말 게으르게 보낸 것 같다.</p>

<p>물론 옛날에 비하면 엄청난 발전이지만… 역시 한번 쉬면<br />
계속 쉬고 싶은 마음이 생겨서,, 조금 게으르게 학습한 느낌을 받았다.</p>

<p>다시한번 각성하여 Spring 세션을 잘 마무리 해보자.</p>

<hr />

<h2 id="oauth-2">OAuth 2</h2>

<h3 id="oauth-2-란">OAuth 2 란?</h3>

<p>흔히 생각해보면, 우리가 웹사이트 로그인을 할때<br />
소셜 로그인(구글,카카오톡 등) 인증방식을 사용해 로그인을 하는데<br />
이런 인증방식들은 OAuth2라는 기술을 바탕으로 구현이 된다.</p>

<p>우리가 알고 있는 일반적인 애플리케이션은<br />
서비스를 이용하는 사용자에 대한 인증처리는 해당 애플리케이션이 직접했다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOtOEbcjSRPGtg0QXyV8y1h1SCQegF3vUKPYwVCv7sEcPex_-9W-jvRfU7gcNry-watl1K_E1i57hcZE0mSkiSjOoVg=w1920-h921" alt="image" class="align-left" style="max-width: 80%" /><br />
<strong><em>- 크리덴셜을 저장하지 않는 아키텍처 -</em></strong></p>

<p>OAuth2 인증 프토토콜은 특정 애플리케이션에서 사용자의 인증을 직접<br />
처리하는 것이아니라 사용자 정보를 보유하고 있는 신뢰할 만한 써드 파티<br />
애플리케이션(구글,카카오톡 등)에서 인증을 대신 처리해주고 Resource에 대한<br />
자격 증명용 토큰을 발급한후, Client가 해당토큰을 이용해 써드파티 애플리케이션의<br />
서비스를 사용하게 해주는 방식이다.</p>

<p><br /></p>

<p><strong>*써드 파티(3rd Party)란?</strong><br />
프로그래밍을 도와주는 라이브러리를 만드는 외부 생산자를 뜻한다.</p>

<p>1st 파티 개발자 : 하드웨어 생상자가 ‘직접’ 소프트웨어를 개발하는 경우<br />
2nd 파티 개발자 : 하드웨어 생산지인 기업과 자사간의 관계에 속한 소프트웨어 개발자<br />
3rd 파티 개발자 : 아무 관련없는 제3자 소프트웨어 개발자<br />
이렇게 예를 들어볼 수 있을 것 같다.</p>

<p><br /></p>

<h3 id="oauth-2-인증-컴포넌트-역할">OAuth 2 인증 컴포넌트 역할</h3>

<p>시작에 앞서 OAuth 2 인증을 처리하는 <br />
컴포넌트들이 무엇이 있고 어떠한 역할을하는지 알아보자</p>

<ol>
  <li>Resource Owner<br />
-&gt; 사용하고자 하는 Resource의 소유자를 의미한다.</li>
  <li>Client<br />
-&gt; Resource Owner를 대신해 보호된 Resource에 엑세스하는 애플리케이션</li>
  <li>Resource Server<br />
-&gt; Client의 요청을 수락하고 Resource Owner에 해당하는 Resource를 제공하는 서버</li>
  <li>Authorization Server<br />
-&gt; Clinet가 Resource Server에 접근할 수 있는 권한을 부여하는 서버</li>
</ol>

<p>이렇게 글로만 정리하자면 사실 이해하기 힘들 것이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOuRXi0z_GnyDCCDHETh73m4ATTFc7XkcLLrbwxEbd_Rd71mekz5lc9oxBxt5WGwp-6BLNg3GiMQ4jErSdSRIpCvj3kkw=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>대략적인 역할을 보면 이렇게 나눠볼 수 있을 것 같다.<br />
기존에 우리가 불러오던 Client가 웹 애플리케이션 서버로<br />
변경된 모습을 볼 수 있다.</p>

<p>Resource Owner의 대리인으로써 구글에 인증과 Resource를<br />
요청하고 있기때문에 Client라고 부를 수 있다</p>

<p><br /></p>

<h3 id="authorization-grant-유형">Authorization Grant 유형</h3>
<p>Authorization Grant는 Client 애플리케이션이 Access Token을<br />
얻기 위한 Resource Owner의 권한을 표현하는 크리덴셜(Credential)을 의미한다.</p>

<p>즉, Access Token을 얻기 위한 수단이다.</p>

<p><strong><em>*Access Token 이란?<br />
Client가 Resource Server에 보호된 Resource에<br />
엑세스하기 위해 사용하는 자격 증명용 토큰이다.</em></strong></p>

<p><br /></p>

<p>총 4가지의 타입이 있으니 알아보자</p>

<p><strong>1). Authorization Code Grant (권한부여 승인 코드 방식)</strong> <br />
-. 가장 많이 쓰이는 방법이고 기본이 되는 방식이다.<br />
-. 권한 부여 승인을 위해 자체 생성한 Authorization Code를 전달하는 방식이다.<br />
-. Refresh Token을 사용할 수 있다.<br />
-. 권한 부여 승인 요청시 응답 타입을 <code class="language-plaintext highlighter-rouge">code</code>로 지정하여 요청한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPgVHuUuCDajpaRydkqDrMFvzkbLFg3gep5w9RB8biTR9VOow-YfScef_SaV6QJH5cGhGZwcx6giLOKPrAC4ppHoW1TNQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<p><strong>2). Implicit Grant (암묵적 승인 방식)</strong><br />
-. 별도의 Authorization Code 없이 바로 Access Token을 발급받는 방식이다.<br />
-. 자격증명을 안전하게 저장하기 힘든 Client에게 최적화된 방식이다.<br />
-. Refresh Token 사용이 불가능하다.<br />
-. 권한 부여 승인 요청시 응답타입을 <code class="language-plaintext highlighter-rouge">token</code>으로 지정하여 요청한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMa7L3zIQi3fKSZII9kd56k64SdaQpQJjnDrCev_ByGw1cuJYu3r61IXE0Ubx-pNNUJKs9tkNeOeQmBFZnGtOLekTEQCg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<p><strong>3). Resource Owner Password Credential Grant (자원 소유자 자격증명 승인방식)</strong><br />
-. 로그인 시 필요한 정보로 Access Token을 발급 받는 방식이다.<br />
-. 자신의 서비스에서 제공하는 애플리케이션의 경우에만 사용되는 인증 방식이다.<br />
(Authorization Server, Resource Server, Client가 모두 같은 시스템에 속해있을 경우에만 가능)<br />
-. Refresh Token 사용이 가능하다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMijQTmGrLYDoKw37n3jPJRqt5i6JjFcp8XeFprwPcptgPdHdPvhscdpyh52SFQHU7ju84XmIWMYyJIR6TYVznjIuPpsw=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<p><strong>4). Client Credentials Grant (클라이언트 자격증명 승인방식)</strong><br />
-. Client 자신이 관리하는 Resource, Authorization Server에 해당 Client를 위한<br />
제한된 Resource 접근 권한이 설정되어 있을 경우 사용 가능한 방식이다.<br />
-. Refresh Token의 사용이 불가능하다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOmLKEo6UjsefDdk3MWt5D0fLVXTDfA9dnjjHZibE6A55PjTKLDzqBn-NZTS3WsK-6ojytFXEXqtgqkjvuTIclhg3RH4w=w1299-h921" alt="image" class="align-left" style="max-width: 90%" /></p>

<p><br /></p>

<h3 id="사전-준비">사전 준비</h3>
<p>위에서 얘기했듯이 우리는 써드파티 애플리케이션 중<br />
OAuth 2 인증 프로토콜을 제공하는 벤더(구글, 카카오톡, 페이스북 등)를<br />
선정 한다음 프로그램을 작성해야한다.</p>

<p>그중 위에서 예로든 구글의 OAuth 2 프로토콜을 이용해볼 예정이고<br />
프로그램 작성 전에 먼저 클라이언트 ID와 Secret를 생성해야한다.<br />
<a href="http://yoonbumtae.com/?p=2631">구글 API 콘솔에서의 OAuth 2 설정 - 출처: yoonbumtae님</a>을 보고<br />
클라이언트 ID와 Secret를 생성하면 준비는 끝난다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO3kkRX35q-9PPahcVGwcdd2LGECoC7sez4uGlFClTNsVllR01dQocyQJSuF42Ej0tF7n3FIYHclCxtaNIefADUtJgiJw=w1920-h864" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<hr />

<p>오늘은 OAuth 2 에대한 간단한 지식을 알아봤다.<br />
사실 이론만 보기에는 코드를 보지않아서<br />
느낌이 확 와닿지는 않는다…</p>

<p>하지만 큰그림을 보고 코드를 보면 더 눈에 잘들어오기 때문에<br />
큰 아키텍처를 생각하고 코드를 다움주부터 연습을 해봐야겠다.</p>

<p>오늘 공부는 여기서 끝 !</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 김밥, 된장찌개</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[]]></summary></entry></feed>