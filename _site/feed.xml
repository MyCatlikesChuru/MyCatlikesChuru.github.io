<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-26T18:26:10+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LeeJellan</title><subtitle>안녕하세요!🙂 IT,여행,기타 등 기록을 남기기위한 블로그 입니다 !</subtitle><author><name>LEE JAEHYEOK</name></author><entry><title type="html">디자인 패턴 - 전략 패턴 [Java 예제]</title><link href="http://localhost:4000/cs/2023/04/26/it-etc-pattern.html" rel="alternate" type="text/html" title="디자인 패턴 - 전략 패턴 [Java 예제]" /><published>2023-04-26T00:00:00+09:00</published><updated>2023-04-26T00:00:00+09:00</updated><id>http://localhost:4000/cs/2023/04/26/it-etc-pattern</id><content type="html" xml:base="http://localhost:4000/cs/2023/04/26/it-etc-pattern.html"><![CDATA[<h2 id="전략-패턴">전략 패턴</h2>

<p><strong>전략 패턴(strategy pattern)은</strong> 정책 패턴(policy pattern)이라고도 하며 <br />
객체의 행위를 바꾸고 싶은 경우 직접 수정하지 않고 전략이라고 부르는 캡슐화한 알고리즘을 <br />
컨택스트 안에서 바꿔주면서 상호 교체가 가능하게 만드는 패턴이다.</p>

<blockquote>
  <p>컨택스트?</p>
  <blockquote>
    <p>프로그래밍에서의 컨텍스트는 상황, 맥락, 문맥을 의미한다.  <br />
개발자가 어떠한 작업을 완료하는 데 필요한 모든 관련 정보를 말한다.</p>
  </blockquote>
</blockquote>

<p><br /></p>

<hr />

<p>정의로만 보면 이해하기가 쉽지 않다.  <br />
예제를 통해 살펴보자</p>

<h3 id="전략-패턴-적용-">전략 패턴 적용 ❌</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>

        <span class="c1">// 오름차순 정렬</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">sortedData</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">sorted</span><span class="o">()</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sortedData</span><span class="o">);</span> <span class="c1">// Output: [1, 2, 3, 4, 5]</span>

        <span class="c1">// 내림차순 정렬</span>
        <span class="n">sortedData</span> <span class="o">=</span> <span class="n">data</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="nc">Collections</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">())</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sortedData</span><span class="o">);</span> <span class="c1">// Output: [5, 4, 3, 2, 1]</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>해당 코드는 정렬을 진행하는 코드이다.  <br />
정렬이라는 전략에 오름차순과 내림차순이 있지만 캡슐화가되어있지도 않고<br />
정렬이라는 행위를 바꾸기위해서는 해당 코드를 복사해 붙여넣어줘야하므로 <br />
다른 메서드에서 사용한다면 중복된 정렬 알고리즘 코드가 들어가게될 것 이다.</p>

<p><br /></p>

<h3 id="전략-패턴-적용-️">전략 패턴 적용 ⭕️</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">SortingStrategy</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">AscendingSortingStrategy</span> <span class="kd">implements</span> <span class="nc">SortingStrategy</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">data</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">DescendingSortingStrategy</span> <span class="kd">implements</span> <span class="nc">SortingStrategy</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">data</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">compareTo</span><span class="o">);</span>
        <span class="nc">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">data</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Sorter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">SortingStrategy</span> <span class="n">sortingStrategy</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setSortingStrategy</span><span class="o">(</span><span class="nc">SortingStrategy</span> <span class="n">sortingStrategy</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">sortingStrategy</span> <span class="o">=</span> <span class="n">sortingStrategy</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">sortingStrategy</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">data</span> <span class="o">=</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="nc">Sorter</span> <span class="n">sorter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sorter</span><span class="o">();</span>

        <span class="c1">// 오름차순 정렬</span>
        <span class="n">sorter</span><span class="o">.</span><span class="na">setSortingStrategy</span><span class="o">(</span><span class="k">new</span> <span class="nc">AscendingSortingStrategy</span><span class="o">());</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">sortedData</span> <span class="o">=</span> <span class="n">sorter</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sortedData</span><span class="o">);</span> <span class="c1">// Output: [1, 2, 3, 4, 5]</span>

        <span class="c1">// 내림차순 정렬</span>
        <span class="n">sorter</span><span class="o">.</span><span class="na">setSortingStrategy</span><span class="o">(</span><span class="k">new</span> <span class="nc">DescendingSortingStrategy</span><span class="o">());</span>
        <span class="n">sortedData</span> <span class="o">=</span> <span class="n">sorter</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">data</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sortedData</span><span class="o">);</span> <span class="c1">// Output: [5, 4, 3, 2, 1]</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>해당 코드에서는 오름차순과 내림차순이라는 전략을 클래스로 구현하였고 <br />
<code class="language-plaintext highlighter-rouge">SortingStrategy</code>라는 인터페이스를 상속하여 <code class="language-plaintext highlighter-rouge">sort()</code>메서드를 구현하고 있다.</p>

<p><code class="language-plaintext highlighter-rouge">Sorter</code> 클래스에서 <code class="language-plaintext highlighter-rouge">setSortingStrategy()</code>에 매개변수로 전략을 담은 <br />
<code class="language-plaintext highlighter-rouge">SortingStrategy</code> 구현체를 담아주게되면 해당 구현체에 따라 오름차순,내림차순 정렬 정책이 정해진다.</p>

<p>또한 <code class="language-plaintext highlighter-rouge">private SortingStrategy sortingStrategy;</code>으로 정렬전략은 캡슐화가 되어있다.</p>

<p>최종적으로 Main 메서드에서 <code class="language-plaintext highlighter-rouge">Sorter</code> 인스턴스를 생성해 <code class="language-plaintext highlighter-rouge">.setSortingStrategy()</code>를 통해 <br />
오름차순, 내림차순 클래스를 전략에 맞게 생성해준다면 전략패턴이 적용된 코드라고 할 수 있다.</p>

<hr />

<p><br /></p>

<h3 id="spring에서-전략패턴">Spring에서 전략패턴?</h3>

<p>그럼 Java 진영에서 사용하는 프레임워크인 <br />
SpringFramework에서는 어떤걸 전략패턴이라고 할 수 있을까?</p>

<p>우리가 자주 구현한 Spring Security에서 <code class="language-plaintext highlighter-rouge">UserDetailsService</code>를 예로 들을 수 있을 것이다.</p>

<ul>
  <li><strong>예제</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserDetailsService</span> <span class="o">{</span>

    <span class="cm">/**
     * Locates the user based on the username. In the actual implementation, the search
     * may possibly be case sensitive, or case insensitive depending on how the
     * implementation instance is configured. In this case, the &lt;code&gt;UserDetails&lt;/code&gt;
     * object that comes back may have a username that is of a different case than what
     * was actually requested..
     * @param username the username identifying the user whose data is required.
     * @return a fully populated user record (never &lt;code&gt;null&lt;/code&gt;)
     * @throws UsernameNotFoundException if the user could not be found or the user has no
     * GrantedAuthority
     */</span>
    <span class="nc">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UsernameNotFoundException</span><span class="o">;</span>

<span class="o">}</span>

</code></pre></div></div>

<p>해당 인터페이스를 가지고 사용자 이름을 기반으로 사용자 정보를 가져오는 <br />
<code class="language-plaintext highlighter-rouge">loadUserByUsername</code>메서드를 정의하여 사용한다.</p>

<p>해당 인터페이스를 상속받아 구현하여, 각기 다른 방식으로 <br />
사용자 인증을 처리하는 전략 클래스를 만들 수있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomUserDetailsService</span> <span class="kd">implements</span> <span class="nc">UserDetailsService</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UsernameNotFoundException</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">&gt;</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByUsername</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">user</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UsernameNotFoundException</span><span class="o">(</span><span class="s">"User not found"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">CustomUserDetails</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 예제로는 <code class="language-plaintext highlighter-rouge">loadUserByUsername</code> 메서드는 사용자의 이름을 기반으로 <br />
데이터베이스에서 사용자정보를 가져와 <code class="language-plaintext highlighter-rouge">CustomUserDetails</code> 객체로 반환하게된다.</p>

<p><code class="language-plaintext highlighter-rouge">CustomUserDetailsService</code>라는 우리가 만든 클래스는 <br />
위와 같이 데이터베이스에서 사용자정보를 이용한 전략을 가지고 있지만</p>

<p>만약 데이터베이스가 아니라 다른 전략이 생긴다고 가정하면
<code class="language-plaintext highlighter-rouge">UserDetailsService</code>를 상속받아 클래스를 만들어 코드를 작성해
<code class="language-plaintext highlighter-rouge">CustomUserDetails</code>를 반환해주면 다른 전략을 사용할 수 있게된다.  ㄴ</p>

<p>즉, 전략패턴이 적용된 예제로 코드의 재사용성과 유연성을 높일 수 있게된다.</p>

<p><br /></p>

<h3 id="전략패턴의-장점">전략패턴의 장점</h3>

<p>위에서 볼 수 있듯이 전략패턴을 적용하게되면 새로운 전략이 추가된다고 가정할때 <br />
OCP(개방 폐쇠의 원칙)을 지키면서 설계가 가능해진다. 또한 다른 서비스에서 정렬을 사용한다면 <br />
<code class="language-plaintext highlighter-rouge">Sorter</code>클래스 <code class="language-plaintext highlighter-rouge">.setSortingStrategy()</code>를 이용해서 정렬전략을 사용하기 떄문에 <br />
캡슐화한 알고리즘이 컨택스트 안에서 바뀌게되어 중복된 알고리즘을 작성할 필요가 없게된다.</p>

<blockquote>
  <p>OCP (개방 폐쇠의 원칙)</p>
  <blockquote>
    <p>기존의 코드를 변경하지 않으면서, 기능을 추가할 수 있도록 설계가 되어야 한다는 원칙</p>
  </blockquote>
</blockquote>

<p><br /></p>

<h3 id="전략패턴의-단점">전략패턴의 단점</h3>

<p>디자인 패턴에 익숙하다면 전략패턴의 코드가 편하겠지만, 일반적으로 짧은 코드에서는 <br />
전략패턴을 적용하지않은 코드가 보기 편할 수 있다.</p>

<p>즉, 모든 상황에서 전략패턴이 사용되는 것은 유용하지 않다. 컨텍스트에 적용되는 알고리즘이<br />
하나이거나 두개인 경우는 분기를 타는 것이 편한 경우도 있다. 그러나 요구사항의 변경으로 <br />
변경될 여지가 있고 변화의 형태가 다양함이 어느정도 보장될 때 전략패턴을 고려해보는 것이 좋을 것 같다.</p>

<p><br /><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="CS" /><category term="ComputerScience" /><summary type="html"><![CDATA[전략 패턴]]></summary></entry><entry><title type="html">[Programmers] 동명 동물 수 찾기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/24/sql-samename.html" rel="alternate" type="text/html" title="[Programmers] 동명 동물 수 찾기 (MySQL)" /><published>2023-04-24T00:00:00+09:00</published><updated>2023-04-24T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/24/sql-samename</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/24/sql-samename.html"><![CDATA[<h2 id="-문제--동명-동물-수-찾기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/59041">동명 동물 수 찾기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p><code>ANIMAL_INS</code> 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. <code>ANIMAL_INS</code> 테이블 구조는 다음과 같으며, <code>ANIMAL_ID</code>, <code>ANIMAL_TYPE</code>, <code>DATETIME</code>, <code>INTAKE_CONDITION</code>, <code>NAME</code>, <code>SEX_UPON_INTAKE</code>는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>NAME</th>
<th>TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td>ANIMAL_ID</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>ANIMAL_TYPE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DATETIME</td>
<td>DATETIME</td>
<td>FALSE</td>
</tr>
<tr>
<td>INTAKE_CONDITION</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>NAME</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
<tr>
<td>SEX_UPON_INTAKE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>동물 보호소에 들어온 동물 이름 중 두 번 이상 쓰인 이름과 해당 이름이 쓰인 횟수를 조회하는 SQL문을 작성해주세요. 이때 결과는 이름이 없는 동물은 집계에서 제외하며, 결과는 이름 순으로 조회해주세요. </p>

<h5>예시</h5>

<p>예를 들어 <code>ANIMAL_INS</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>ANIMAL_ID</th>
<th>ANIMAL_TYPE</th>
<th>DATETIME</th>
<th>INTAKE_CONDITION</th>
<th>NAME</th>
<th>SEX_UPON_INTAKE</th>
</tr>
</thead>
        <tbody><tr>
<td>A396810</td>
<td>Dog</td>
<td>2016-08-22 16:13:00</td>
<td>Injured</td>
<td>Raven</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A377750</td>
<td>Dog</td>
<td>2017-10-25 17:17:00</td>
<td>Normal</td>
<td>Lucy</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A355688</td>
<td>Dog</td>
<td>2014-01-26 13:48:00</td>
<td>Normal</td>
<td>Shadow</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A399421</td>
<td>Dog</td>
<td>2015-08-25 14:08:00</td>
<td>Normal</td>
<td>Lucy</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A400680</td>
<td>Dog</td>
<td>2017-06-17 13:29:00</td>
<td>Normal</td>
<td>Lucy</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A410668</td>
<td>Cat</td>
<td>2015-11-19 13:41:00</td>
<td>Normal</td>
<td>Raven</td>
<td>Spayed Female</td>
</tr>
</tbody>
      </table>
<ul>
<li>Raven 이름은 2번 쓰였습니다.</li>
<li>Lucy 이름은 3번 쓰였습니다</li>
<li>Shadow 이름은 1번 쓰였습니다.</li>
</ul>

<p>따라서 SQL문을 실행하면 다음과 같이 나와야 합니다. </p>
<table class="table">
        <thead><tr>
<th>NAME</th>
<th>COUNT</th>
</tr>
</thead>
        <tbody><tr>
<td>Lucy</td>
<td>3</td>
</tr>
<tr>
<td>Raven</td>
<td>2</td>
</tr>
</tbody>
      </table>
<hr />

<p>본 문제는 <a href="https://www.kaggle.com/aaronschlegel/austin-animal-center-shelter-intakes-and-outcomes" target="_blank" rel="noopener">Kaggle의 "Austin Animal Center Shelter Intakes and Outcomes"</a>에서 제공하는 데이터를 사용하였으며 <a href="https://opendatacommons.org/licenses/odbl/1.0/" target="_blank" rel="noopener">ODbL</a>의 적용을 받습니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>GROUP BY를 이용한 이름별 COUNT</li>
  <li>HAVING절을 이용해 2개 이상인 것들만 필터링</li>
  <li>이름 순으로 정렬</li>
</ol>

<pre><code class="language-roomsql">SELECT NAME,
    COUNT(NAME) AS COUNT
FROM ANIMAL_INS
GROUP BY NAME
HAVING COUNT &gt; 1
ORDER BY NAME ASC;

</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 동명 동물 수 찾기]]></summary></entry><entry><title type="html">[Programmers] 루시와 엘라 찾기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/23/sql-lucyorella.html" rel="alternate" type="text/html" title="[Programmers] 루시와 엘라 찾기 (MySQL)" /><published>2023-04-23T00:00:00+09:00</published><updated>2023-04-23T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/23/sql-lucyorella</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/23/sql-lucyorella.html"><![CDATA[<h2 id="-문제--루시와-엘라-찾기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/59046">루시와 엘라 찾기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p><code>ANIMAL_INS</code> 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. <code>ANIMAL_INS</code> 테이블 구조는 다음과 같으며, <code>ANIMAL_ID</code>, <code>ANIMAL_TYPE</code>, <code>DATETIME</code>, <code>INTAKE_CONDITION</code>, <code>NAME</code>, <code>SEX_UPON_INTAKE</code>는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>NAME</th>
<th>TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td>ANIMAL_ID</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>ANIMAL_TYPE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DATETIME</td>
<td>DATETIME</td>
<td>FALSE</td>
</tr>
<tr>
<td>INTAKE_CONDITION</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>NAME</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
<tr>
<td>SEX_UPON_INTAKE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>동물 보호소에 들어온 동물 중 이름이 Lucy, Ella, Pickle, Rogan, Sabrina, Mitty인 동물의 아이디와 이름, 성별 및 중성화 여부를 조회하는 SQL 문을 작성해주세요. </p>

<h5>예시</h5>

<p>이때 결과는 아이디 순으로 조회해주세요. 예를 들어 <code>ANIMAL_INS</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>ANIMAL_ID</th>
<th>ANIMAL_TYPE</th>
<th>DATETIME</th>
<th>INTAKE_CONDITION</th>
<th>NAME</th>
<th>SEX_UPON_INTAKE</th>
</tr>
</thead>
        <tbody><tr>
<td>A373219</td>
<td>Cat</td>
<td>2014-07-29 11:43:00</td>
<td>Normal</td>
<td>Ella</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A377750</td>
<td>Dog</td>
<td>2017-10-25 17:17:00</td>
<td>Normal</td>
<td>Lucy</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A353259</td>
<td>Dog</td>
<td>2016-05-08 12:57:00</td>
<td>Injured</td>
<td>Bj</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A354540</td>
<td>Cat</td>
<td>2014-12-11 11:48:00</td>
<td>Normal</td>
<td>Tux</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A354597</td>
<td>Cat</td>
<td>2014-05-02 12:16:00</td>
<td>Normal</td>
<td>Ariel</td>
<td>Spayed Female</td>
</tr>
</tbody>
      </table>
<p>SQL문을 실행하면 다음과 같이 나와야 합니다. </p>
<table class="table">
        <thead><tr>
<th>ANIMAL_ID</th>
<th>NAME</th>
<th>SEX_UPON_INTAKE</th>
</tr>
</thead>
        <tbody><tr>
<td>A373219</td>
<td>Ella</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A377750</td>
<td>Lucy</td>
<td>Spayed Female</td>
</tr>
</tbody>
      </table>
<hr />

<p>본 문제는 <a href="https://www.kaggle.com/aaronschlegel/austin-animal-center-shelter-intakes-and-outcomes" target="_blank" rel="noopener">Kaggle의 "Austin Animal Center Shelter Intakes and Outcomes"</a>에서 제공하는 데이터를 사용하였으며 <a href="https://opendatacommons.org/licenses/odbl/1.0/" target="_blank" rel="noopener">ODbL</a>의 적용을 받습니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>WHERE IN절을 이용해 이름 찾기</li>
  <li>ID순으로 오름차순 정렬</li>
</ol>

<pre><code class="language-roomsql">SELECT ANIMAL_ID,
    NAME,
    SEX_UPON_INTAKE
FROM ANIMAL_INS
WHERE NAME IN ('Lucy','Ella','Pickle','Rogan','Sabrina','Mitty')
ORDER BY ANIMAL_ID ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 루시와 엘라 찾기]]></summary></entry><entry><title type="html">[Programmers] 이름에 el이 들어가는 동물 찾기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/22/sql-dogname.html" rel="alternate" type="text/html" title="[Programmers] 이름에 el이 들어가는 동물 찾기 (MySQL)" /><published>2023-04-22T00:00:00+09:00</published><updated>2023-04-22T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/22/sql-dogname</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/22/sql-dogname.html"><![CDATA[<h2 id="-문제--이름에-el이-들어가는-동물-찾기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/59047#">이름에 el이 들어가는 동물 찾기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p><code>ANIMAL_INS</code> 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. <code>ANIMAL_INS</code> 테이블 구조는 다음과 같으며, <code>ANIMAL_ID</code>, <code>ANIMAL_TYPE</code>, <code>DATETIME</code>, <code>INTAKE_CONDITION</code>, <code>NAME</code>, <code>SEX_UPON_INTAKE</code>는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>NAME</th>
<th>TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td>ANIMAL_ID</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>ANIMAL_TYPE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DATETIME</td>
<td>DATETIME</td>
<td>FALSE</td>
</tr>
<tr>
<td>INTAKE_CONDITION</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>NAME</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
<tr>
<td>SEX_UPON_INTAKE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>보호소에 돌아가신 할머니가 기르던 개를 찾는 사람이 찾아왔습니다. 이 사람이 말하길 할머니가 기르던 개는 이름에 'el'이 들어간다고 합니다. 동물 보호소에 들어온 동물 이름 중, 이름에 "EL"이 들어가는 개의 아이디와 이름을 조회하는 SQL문을 작성해주세요. 이때 결과는 이름 순으로 조회해주세요. 단, 이름의 대소문자는 구분하지 않습니다.</p>

<h5>예시</h5>

<p>예를 들어 <code>ANIMAL_INS</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>ANIMAL_ID</th>
<th>ANIMAL_TYPE</th>
<th>DATETIME</th>
<th>INTAKE_CONDITION</th>
<th>NAME</th>
<th>SEX_UPON_INTAKE</th>
</tr>
</thead>
        <tbody><tr>
<td>A355753</td>
<td>Dog</td>
<td>2015-09-10 13:14:00</td>
<td>Normal</td>
<td>Elijah</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A352872</td>
<td>Dog</td>
<td>2015-07-09 17:51:00</td>
<td>Aged</td>
<td>Peanutbutter</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A353259</td>
<td>Dog</td>
<td>2016-05-08 12:57:00</td>
<td>Injured</td>
<td>Bj</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A373219</td>
<td>Cat</td>
<td>2014-07-29 11:43:00</td>
<td>Normal</td>
<td>Ella</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A382192</td>
<td>Dog</td>
<td>2015-03-13 13:14:00</td>
<td>Normal</td>
<td>Maxwell 2</td>
<td>Intact Male</td>
</tr>
</tbody>
      </table>
<ul>
<li>이름에 'el'이 들어가는 동물은 Elijah, Ella, Maxwell 2입니다.</li>
<li>이 중, 개는 Elijah, Maxwell 2입니다.</li>
</ul>

<p>따라서 SQL문을 실행하면 다음과 같이 나와야 합니다. </p>
<table class="table">
        <thead><tr>
<th>ANIMAL_ID</th>
<th>NAME</th>
</tr>
</thead>
        <tbody><tr>
<td>A355753</td>
<td>Elijah</td>
</tr>
<tr>
<td>A382192</td>
<td>Maxwell 2</td>
</tr>
</tbody>
      </table>
<hr />

<p>본 문제는 <a href="https://www.kaggle.com/aaronschlegel/austin-animal-center-shelter-intakes-and-outcomes" target="_blank" rel="noopener">Kaggle의 "Austin Animal Center Shelter Intakes and Outcomes"</a>에서 제공하는 데이터를 사용하였으며 <a href="https://opendatacommons.org/licenses/odbl/1.0/" target="_blank" rel="noopener">ODbL</a>의 적용을 받습니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>Dog로된 동물타입만 찾기위해 WHERE절을 이용해 필터링</li>
  <li>LIKE절을 이용해 el만 포함된 이름을 찾기</li>
  <li>NAME 오름차순으로 정렬</li>
</ol>

<pre><code class="language-roomsql">SELECT ANIMAL_ID,
    NAME
FROM ANIMAL_INS
WHERE ANIMAL_TYPE = 'Dog' AND
NAME LIKE '%el%'
ORDER BY NAME ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 이름에 el이 들어가는 동물 찾기]]></summary></entry><entry><title type="html">[Programmers] 중복 제거하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/18/sql-namedistinct.html" rel="alternate" type="text/html" title="[Programmers] 중복 제거하기 (MySQL)" /><published>2023-04-18T00:00:00+09:00</published><updated>2023-04-18T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/18/sql-namedistinct</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/18/sql-namedistinct.html"><![CDATA[<h2 id="-문제--중복-제거하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/59408">중복 제거하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p><code>ANIMAL_INS</code> 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. <code>ANIMAL_INS</code> 테이블 구조는 다음과 같으며, <code>ANIMAL_ID</code>, <code>ANIMAL_TYPE</code>, <code>DATETIME</code>, <code>INTAKE_CONDITION</code>, <code>NAME</code>, <code>SEX_UPON_INTAKE</code>는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>NAME</th>
<th>TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td>ANIMAL_ID</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>ANIMAL_TYPE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DATETIME</td>
<td>DATETIME</td>
<td>FALSE</td>
</tr>
<tr>
<td>INTAKE_CONDITION</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>NAME</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
<tr>
<td>SEX_UPON_INTAKE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>동물 보호소에 들어온 동물의 이름은 몇 개인지 조회하는 SQL 문을 작성해주세요. 이때 이름이 NULL인 경우는 집계하지 않으며 중복되는 이름은 하나로 칩니다. </p>

<h5>예시</h5>

<p>예를 들어 <code>ANIMAL_INS</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>ANIMAL_ID</th>
<th>ANIMAL_TYPE</th>
<th>DATETIME</th>
<th>INTAKE_CONDITION</th>
<th>NAME</th>
<th>SEX_UPON_INTAKE</th>
</tr>
</thead>
        <tbody><tr>
<td>A562649</td>
<td>Dog</td>
<td>2014-03-20 18:06:00</td>
<td>Sick</td>
<td>NULL</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A412626</td>
<td>Dog</td>
<td>2016-03-13 11:17:00</td>
<td>Normal</td>
<td>*Sam</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A563492</td>
<td>Dog</td>
<td>2014-10-24 14:45:00</td>
<td>Normal</td>
<td>*Sam</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A513956</td>
<td>Dog</td>
<td>2017-06-14 11:54:00</td>
<td>Normal</td>
<td>*Sweetie</td>
<td>Spayed Female</td>
</tr>
</tbody>
      </table>
<p>보호소에 들어온 동물의 이름은 NULL(없음), <code>*Sam</code>, <code>*Sam</code>, <code>*Sweetie</code>입니다. 이 중 NULL과 중복되는 이름을 고려하면, 보호소에 들어온 동물 이름의 수는 2입니다. 따라서 SQL문을 실행하면 다음과 같이 나와야 합니다.</p>
<table class="table">
        <thead><tr>
<th>count</th>
</tr>
</thead>
        <tbody><tr>
<td>2</td>
</tr>
</tbody>
      </table>
<p>※ 컬럼 이름(위 예제에서는 count)은 일치하지 않아도 됩니다.</p>

<hr />

<p>본 문제는 <a href="https://www.kaggle.com/aaronschlegel/austin-animal-center-shelter-intakes-and-outcomes" target="_blank" rel="noopener">Kaggle의 "Austin Animal Center Shelter Intakes and Outcomes"</a>에서 제공하는 데이터를 사용하였으며 <a href="https://opendatacommons.org/licenses/odbl/1.0/" target="_blank" rel="noopener">ODbL</a>의 적용을 받습니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>COUNT를 이용한 이름 집계</li>
  <li>DISTINCT를 이용한 중복제거</li>
  <li>WHERE절을 이용해 NAME의 Null이 아닌값을 필터링</li>
</ol>

<pre><code class="language-roomsql">SELECT COUNT(DISTINCT(NAME)) AS count
FROM ANIMAL_INS
WHERE NAME is not null;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 중복 제거하기]]></summary></entry><entry><title type="html">[Programmers] 중성화 여부 파악하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/16/sql-animalsex.html" rel="alternate" type="text/html" title="[Programmers] 중성화 여부 파악하기 (MySQL)" /><published>2023-04-16T00:00:00+09:00</published><updated>2023-04-16T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/16/sql-animalsex</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/16/sql-animalsex.html"><![CDATA[<h2 id="-문제--중성화-여부-파악하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/59409">중성화 여부 파악하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p><code>ANIMAL_INS</code> 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. <code>ANIMAL_INS</code> 테이블 구조는 다음과 같으며, <code>ANIMAL_ID</code>, <code>ANIMAL_TYPE</code>, <code>DATETIME</code>, <code>INTAKE_CONDITION</code>, <code>NAME</code>, <code>SEX_UPON_INTAKE</code>는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>NAME</th>
<th>TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td>ANIMAL_ID</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>ANIMAL_TYPE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DATETIME</td>
<td>DATETIME</td>
<td>FALSE</td>
</tr>
<tr>
<td>INTAKE_CONDITION</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>NAME</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
<tr>
<td>SEX_UPON_INTAKE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>보호소의 동물이 중성화되었는지 아닌지 파악하려 합니다. 중성화된 동물은 <code>SEX_UPON_INTAKE</code> 컬럼에 'Neutered' 또는 'Spayed'라는 단어가 들어있습니다. 동물의 아이디와 이름, 중성화 여부를 아이디 순으로 조회하는 SQL문을 작성해주세요. 이때 중성화가 되어있다면 'O', 아니라면 'X'라고 표시해주세요.</p>

<h5>예시</h5>

<p>예를 들어 <code>ANIMAL_INS</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>ANIMAL_ID</th>
<th>ANIMAL_TYPE</th>
<th>DATETIME</th>
<th>INTAKE_CONDITION</th>
<th>NAME</th>
<th>SEX_UPON_INTAKE</th>
</tr>
</thead>
        <tbody><tr>
<td>A355753</td>
<td>Dog</td>
<td>2015-09-10 13:14:00</td>
<td>Normal</td>
<td>Elijah</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A373219</td>
<td>Cat</td>
<td>2014-07-29 11:43:00</td>
<td>Normal</td>
<td>Ella</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A382192</td>
<td>Dog</td>
<td>2015-03-13 13:14:00</td>
<td>Normal</td>
<td>Maxwell 2</td>
<td>Intact Male</td>
</tr>
</tbody>
      </table>
<ul>
<li>중성화한 동물: Elijah, Ella</li>
<li>중성화하지 않은 동물: Maxwell 2</li>
</ul>

<p>따라서 SQL문을 실행하면 다음과 같이 나와야 합니다. </p>
<table class="table">
        <thead><tr>
<th>ANIMAL_ID</th>
<th>NAME</th>
<th>중성화</th>
</tr>
</thead>
        <tbody><tr>
<td>A355753</td>
<td>Elijah</td>
<td>O</td>
</tr>
<tr>
<td>A373219</td>
<td>Ella</td>
<td>O</td>
</tr>
<tr>
<td>A382192</td>
<td>Maxwell 2</td>
<td>X</td>
</tr>
</tbody>
      </table>
<p>※ 컬럼 이름은 일치하지 않아도 됩니다.</p>

<hr />

<p>본 문제는 <a href="https://www.kaggle.com/aaronschlegel/austin-animal-center-shelter-intakes-and-outcomes" target="_blank" rel="noopener">Kaggle의 "Austin Animal Center Shelter Intakes and Outcomes"</a>에서 제공하는 데이터를 사용하였으며 <a href="https://opendatacommons.org/licenses/odbl/1.0/" target="_blank" rel="noopener">ODbL</a>의 적용을 받습니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>특정 단어를 포함하는 것을 찾기 위해 LIKE를 사용</li>
  <li>CASE WHEN THEN 문법으로 구분하여 O, X 출력</li>
  <li>동물 ID순으로 오름차순 정렬</li>
</ol>

<pre><code class="language-roomsql">SELECT ANIMAL_ID,
    NAME,
    CASE WHEN (SEX_UPON_INTAKE LIKE '%Neutered%' 
    OR SEX_UPON_INTAKE LIKE '%Spayed%') THEN 'O'
    ELSE 'X' END AS '중성화'
FROM ANIMAL_INS
ORDER BY ANIMAL_ID ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 중성화 여부 파악하기]]></summary></entry><entry><title type="html">[Programmers] NULL 처리하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/15/sql-animalnull.html" rel="alternate" type="text/html" title="[Programmers] NULL 처리하기 (MySQL)" /><published>2023-04-15T00:00:00+09:00</published><updated>2023-04-15T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/15/sql-animalnull</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/15/sql-animalnull.html"><![CDATA[<h2 id="-문제--null-처리하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/59410">NULL 처리하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p><code>ANIMAL_INS</code> 테이블은 동물 보호소에 들어온 동물의 정보를 담은 테이블입니다. <code>ANIMAL_INS</code> 테이블 구조는 다음과 같으며, <code>ANIMAL_ID</code>, <code>ANIMAL_TYPE</code>, <code>DATETIME</code>, <code>INTAKE_CONDITION</code>, <code>NAME</code>, <code>SEX_UPON_INTAKE</code>는 각각 동물의 아이디, 생물 종, 보호 시작일, 보호 시작 시 상태, 이름, 성별 및 중성화 여부를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>NAME</th>
<th>TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td>ANIMAL_ID</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>ANIMAL_TYPE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DATETIME</td>
<td>DATETIME</td>
<td>FALSE</td>
</tr>
<tr>
<td>INTAKE_CONDITION</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>NAME</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
<tr>
<td>SEX_UPON_INTAKE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>입양 게시판에 동물 정보를 게시하려 합니다. 동물의 생물 종, 이름, 성별 및 중성화 여부를 아이디 순으로 조회하는 SQL문을 작성해주세요. 이때 프로그래밍을 모르는 사람들은 NULL이라는 기호를 모르기 때문에, 이름이 없는 동물의 이름은 "No name"으로 표시해 주세요.</p>

<h5>예시</h5>

<p>예를 들어 <code>ANIMAL_INS</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>ANIMAL_ID</th>
<th>ANIMAL_TYPE</th>
<th>DATETIME</th>
<th>INTAKE_CONDITION</th>
<th>NAME</th>
<th>SEX_UPON_INTAKE</th>
</tr>
</thead>
        <tbody><tr>
<td>A350276</td>
<td>Cat</td>
<td>2017-08-13 13:50:00</td>
<td>Normal</td>
<td>Jewel</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>A350375</td>
<td>Cat</td>
<td>2017-03-06 15:01:00</td>
<td>Normal</td>
<td>Meo</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>A368930</td>
<td>Dog</td>
<td>2014-06-08 13:20:00</td>
<td>Normal</td>
<td>NULL</td>
<td>Spayed Female</td>
</tr>
</tbody>
      </table>
<p>마지막 줄의 개는 이름이 없기 때문에, 이 개의 이름은 "No name"으로 표시합니다. 따라서 SQL문을 실행하면 다음과 같이 나와야 합니다. </p>
<table class="table">
        <thead><tr>
<th>ANIMAL_TYPE</th>
<th>NAME</th>
<th>SEX_UPON_INTAKE</th>
</tr>
</thead>
        <tbody><tr>
<td>Cat</td>
<td>Jewel</td>
<td>Spayed Female</td>
</tr>
<tr>
<td>Cat</td>
<td>Meo</td>
<td>Neutered Male</td>
</tr>
<tr>
<td>Dog</td>
<td>No name</td>
<td>Spayed Female</td>
</tr>
</tbody>
      </table>
<p>※ 컬럼 이름은 일치하지 않아도 됩니다.</p>

<hr />

<p>본 문제는 <a href="https://www.kaggle.com/aaronschlegel/austin-animal-center-shelter-intakes-and-outcomes" target="_blank" rel="noopener">Kaggle의 "Austin Animal Center Shelter Intakes and Outcomes"</a>에서 제공하는 데이터를 사용하였으며 <a href="https://opendatacommons.org/licenses/odbl/1.0/" target="_blank" rel="noopener">ODbL</a>의 적용을 받습니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>동물이름 중 Null로된 이름을 ‘No name’으로 변경하는 문제</li>
  <li>IFNULL을 이용해 처리하기</li>
  <li>ANIMAL_ID로 오름차순</li>
</ol>

<pre><code class="language-roomsql">SELECT ANIMAL_TYPE,
     IFNULL(NAME,'No name') AS NAME,
     SEX_UPON_INTAKE
FROM ANIMAL_INS
ORDER BY ANIMAL_ID ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : NULL 처리하기]]></summary></entry><entry><title type="html">[Programmers] 입양 시각 구하기(1) (MySQL)</title><link href="http://localhost:4000/sql/2023/04/14/sql-animaltime.html" rel="alternate" type="text/html" title="[Programmers] 입양 시각 구하기(1) (MySQL)" /><published>2023-04-14T00:00:00+09:00</published><updated>2023-04-14T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/14/sql-animaltime</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/14/sql-animaltime.html"><![CDATA[<h2 id="-문제--입양-시각-구하기1">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/59412">입양 시각 구하기(1)</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p><code>ANIMAL_OUTS</code> 테이블은 동물 보호소에서 입양 보낸 동물의 정보를 담은 테이블입니다. <code>ANIMAL_OUTS</code> 테이블 구조는 다음과 같으며, <code>ANIMAL_ID</code>, <code>ANIMAL_TYPE</code>, <code>DATETIME</code>, <code>NAME</code>, <code>SEX_UPON_OUTCOME</code>는 각각 동물의 아이디, 생물 종, 입양일, 이름, 성별 및 중성화 여부를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>NAME</th>
<th>TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td>ANIMAL_ID</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>ANIMAL_TYPE</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DATETIME</td>
<td>DATETIME</td>
<td>FALSE</td>
</tr>
<tr>
<td>NAME</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
<tr>
<td>SEX_UPON_OUTCOME</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>보호소에서는 몇 시에 입양이 가장 활발하게 일어나는지 알아보려 합니다. 09:00부터 19:59까지, 각 시간대별로 입양이 몇 건이나 발생했는지 조회하는 SQL문을 작성해주세요. 이때 결과는 시간대 순으로 정렬해야 합니다.</p>

<h5>예시</h5>

<p>SQL문을 실행하면 다음과 같이 나와야 합니다.</p>
<table class="table">
        <thead><tr>
<th>HOUR</th>
<th>COUNT</th>
</tr>
</thead>
        <tbody><tr>
<td>9</td>
<td>1</td>
</tr>
<tr>
<td>10</td>
<td>2</td>
</tr>
<tr>
<td>11</td>
<td>13</td>
</tr>
<tr>
<td>12</td>
<td>10</td>
</tr>
<tr>
<td>13</td>
<td>14</td>
</tr>
<tr>
<td>14</td>
<td>9</td>
</tr>
<tr>
<td>15</td>
<td>7</td>
</tr>
<tr>
<td>16</td>
<td>10</td>
</tr>
<tr>
<td>17</td>
<td>12</td>
</tr>
<tr>
<td>18</td>
<td>16</td>
</tr>
<tr>
<td>19</td>
<td>2</td>
</tr>
</tbody>
      </table>
<hr />

<p>본 문제는 <a href="https://www.kaggle.com/aaronschlegel/austin-animal-center-shelter-intakes-and-outcomes" target="_blank" rel="noopener">Kaggle의 "Austin Animal Center Shelter Intakes and Outcomes"</a>에서 제공하는 데이터를 사용하였으며 <a href="https://opendatacommons.org/licenses/odbl/1.0/" target="_blank" rel="noopener">ODbL</a>의 적용을 받습니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>HOUR함수를 이용해 DATETIME의 시간만 추출한다</li>
  <li>DATETIME을 COUNT 함수로 집계한다.</li>
  <li>WHERE절로 09~19에 해당하는 데이터만 필터링한다.</li>
  <li>GROUP BY로 시간별로 집계하도록 해준다.</li>
</ol>

<pre><code class="language-roomsql">SELECT HOUR(DATETIME) AS HOUR,
    COUNT(DATETIME) AS COUNT
FROM ANIMAL_OUTS
WHERE HOUR(DATETIME) BETWEEN '09' AND '19'
GROUP BY HOUR
ORDER BY HOUR ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 입양 시각 구하기(1)]]></summary></entry><entry><title type="html">[Spring] GraphQL 이란? 실습해보기</title><link href="http://localhost:4000/spring/2023/04/13/spring-graphql.html" rel="alternate" type="text/html" title="[Spring] GraphQL 이란? 실습해보기" /><published>2023-04-13T00:00:00+09:00</published><updated>2023-04-13T00:00:00+09:00</updated><id>http://localhost:4000/spring/2023/04/13/spring-graphql</id><content type="html" xml:base="http://localhost:4000/spring/2023/04/13/spring-graphql.html"><![CDATA[<p>오늘은 REST API와 조금 다룬 GraphQL에 대해서  <br />
기본적인 개념와 실습을 위해 프로젝트를 하나파서 만들어봤다.</p>

<p>내가 만든 <a href="https://github.com/MyCatlikesChuru/graphql-practice">GitHub 레포지토리</a>를 참고하면 가장 기초적인 셋팅과 <br />
사용법을 볼 수 있으니 참고바란다.</p>

<p><br /></p>

<h2 id="graphql">GraphQL</h2>

<h3 id="graphql-이란">GraphQL 이란?</h3>

<p>GraphQL은 REST API의 대안으로 페이스북에서 제시한 새로운 Web API 컨셉이라고한다.</p>

<p><strong><span style="color:#F04965">REST API</span></strong> 는 우리가 알듯이 다양한 HTTP Method가 서버에 존재하는 리소스와 대응되어서 동작한다.  <br />
클라이언트의 요청사항과 리소스가 잘 들어맞지 않는다면 성능 문제가 발생할 수 있다.</p>

<p><strong><span style="color:#F04965">GraphQL</span></strong> 은 클라이언트 단일 요청에서 여러 하위 자원 탐색을 포함하여 원하는 <br />
데이터만 정확하게 지정할 수 있다.</p>

<p><br /></p>

<p>이로서 얻을 수 있는 장점은 아래와 같다.</p>

<ul>
  <li>
    <p><strong>Overfetching</strong><br />
기존의 Rest Api에선 api 호출 시 필요 이상의 정보를 전달받는 문제가 있었다.<br />
GraphQL은 client에서 필요한 데이터만을 요청하므로 overfetching이 해결 된다.</p>
  </li>
  <li>
    <p><strong>Endpoint</strong><br />
Rest Api는 각 api마다 다른 endpoint가 있어서 이름을 짓거나 관련성이 있는 것들끼리 묶는 등의 관리가 어렵다.<br />
GraphQL은 단 하나의 endpoint가 있어서 요청 주소가 매우 간단해진다.</p>
  </li>
</ul>

<p><br /></p>

<h3 id="graphql-적용해보기">GraphQL 적용해보기</h3>

<h4 id="프로젝트-개요">프로젝트 개요</h4>

<p>이제 대략적인 개념을 이해했으니 서버에서 구현하여 테스트해보자</p>

<p>Java 진영에서는 Spring 프레임워크를 이용하면 손쉽게 구현이 가능하다. <br />
기존에 MVC 개발하듯 진행할 수 있다.</p>

<p>SpringBoot + Spring Data JPA + GraphQL을 이용한 프로젝트다.<br />
Spring for GraphQL은 Spring Boot 2.7.0 버전 이상부터 지원한다고한다.</p>

<p><br /></p>

<p>GraphQL을 통해 요청을 보낸다음 <br />
Spring data JPA로 임베디드 H2 데이터베이스에 접근하여 <br />
데이터를 조회하고 저장하는 테스트를 진행할 것이다.</p>

<p><br /></p>

<h4 id="프로젝트-셋팅">프로젝트 셋팅</h4>

<p>셋팅에 앞서 모든 셋팅을 다올리진 않을 것이다. <br />
글의 가독성 측면이나 현재 GraphQL 설명에 집중하기 위해서이다. <br />
<em>(프로젝트 생성에 다른 정보가 필요하다면 <a href="https://github.com/MyCatlikesChuru/graphql-practice">GitHub 레포지토리</a>를 참고하자)</em></p>

<p><br /></p>

<p><strong>프로젝트 구조</strong></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── main
│   ├── java
│   │   └── com
│   │       └── prac
│   │           └── graphql
│   │               ├── GraphqlApplication.java
│   │               ├── domain
│   │               │   ├── controller
│   │               │   │   └── MemberController.java
│   │               │   ├── dto
│   │               │   │   └── MemberResponseDto.java
│   │               │   ├── entity
│   │               │   │   └── Member.java
│   │               │   ├── mapper
│   │               │   │   └── MemberMapper.java
│   │               │   ├── repository
│   │               │   │   └── MemberRepository.java
│   │               │   └── service
│   │               │       └── MemberService.java
│   │               └── global
│   │                   └── exception
│   │                       ├── BusinessLogicException.java
│   │                       ├── ExceptionCode.java
│   │                       └── handler
│   │                           └── GraphQLExceptionHandler.java
│   └── resources
│       ├── application.yml
│       ├── data.sql
│       ├── graphql
│       │   └── schema.graphqls
│       ├── static
│       └── templates
└── test
    └── java
        └── com
            └── prac
                └── graphql
                    └── GraphqlApplicationTests.java

</code></pre></div></div>

<p><br /></p>

<p><strong>build.gradle</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
        <span class="c1">// ... 생략</span>
        
        <span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">graphql</span><span class="err">'</span> <span class="c1">// &lt;- graphql</span>
        <span class="n">testImplementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">webflux</span><span class="err">'</span> <span class="c1">// &lt;- graphql</span>
        <span class="n">testImplementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">graphql</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">graphql</span><span class="o">-</span><span class="n">test</span><span class="err">'</span> <span class="c1">// &lt;- graphql</span>
        
        <span class="c1">// ... 생략</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">Spring for GraphQL</code> dependencies를 추가하면 옆에 주석처리해둔 3가지가 생긴다.</p>

<p><br /></p>

<p><strong>application.yml</strong></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">graphql</span><span class="pi">:</span>
    <span class="na">graphiql</span><span class="pi">:</span>
      <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span> <span class="c1"># Graphql 테스트가 가능해진다. localhost:8080/graphiql 에 접속해서 가능 </span>
      <span class="na">printer</span><span class="pi">:</span> 
        <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span> <span class="c1"># JPA에 Show-sql과 같이 Graphql 쿼리를 출력해준다.</span>
</code></pre></div></div>

<p><strong>application.properties</strong></p>

<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">spring.graphql.graphiql.enabled</span><span class="p">=</span><span class="s">true</span>
<span class="py">spring.graphql.graphiql.printer.enabled</span><span class="p">=</span><span class="s">true</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">.yml</code>,<code class="language-plaintext highlighter-rouge">properties</code>파일 셋팅 방법이다.  <br />
나는 <code class="language-plaintext highlighter-rouge">.yml</code>파일을 사용하였고 이외에 H2, Spring data JPA 관련 설정은 <br />
위에 올려둔 깃허브 레포지토리를 참고하자</p>

<p><br /></p>

<p>코드를 보기전에 아래의 3개 어노테이션의 용도를 알고있으면 <br />
도움이되니 먼저 읽어보고 코드를 확인하자</p>

<p><strong>@MutationMapping</strong><br />
<code class="language-plaintext highlighter-rouge">@MutationMapping</code>은 Create, Update, Delete에 대응된다고 생각하면 될 것 같다.<br />
graphql은 endpoint가 하나이므로 @MutationMapping 어노테이션만 지정해 주고 다른 설정은 필요 없습니다.<br />
즉, @PostMapping, @PatchMapping, @DeleteMapping 등을 대신사용</p>

<p><br /></p>

<p><strong>@QueryMapping</strong><br />
<code class="language-plaintext highlighter-rouge">@QueryMapping</code>는 Read에 대응된다고 생각하면 될 것 같다.<br />
말고도 <code class="language-plaintext highlighter-rouge">@SubscriptionMapping</code>이 있다고 한다.<br />
즉, @GetMapping 을 대신 사용</p>

<p><br /></p>

<p><strong>@SchemaMapping</strong> <br />
위의 두개의 어노테이션을 통용해서 쓰는듯한 느낌이다. <br />
typeName(Query, Mutation)을 설정하여 사용이 가능하다.</p>

<p><br /></p>

<p>또한 <code class="language-plaintext highlighter-rouge">spring-boot-starter-graphql</code>를 사용하는 경우 default로 설정된  <br />
Schema 파일 위치는 <code class="language-plaintext highlighter-rouge">classpath:graphql/**/</code> 으로 <code class="language-plaintext highlighter-rouge">/src/main/resources/graphql/</code>  <br />
경로에 <code class="language-plaintext highlighter-rouge">schema.graphqls</code> 파일을 만들어 사용할 수 있다. (graphql가 아닌 graphqls이다)</p>

<p><strong>schema.graphqls</strong></p>

<div class="language-graphql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">type</span><span class="w"> </span><span class="n">Member</span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!</span><span class="w">
    </span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="p">!</span><span class="w">
    </span><span class="n">age</span><span class="p">:</span><span class="w"> </span><span class="nb">Int</span><span class="p">!</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="k">type</span><span class="w"> </span><span class="n">MemberResponseDto</span><span class="p">{</span><span class="w">
    </span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!</span><span class="w">
    </span><span class="n">name</span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="p">!</span><span class="w">
    </span><span class="n">age</span><span class="p">:</span><span class="w"> </span><span class="nb">Int</span><span class="p">!</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c"># @QueryMapping 메서드 이름과 동일</span><span class="w">
</span><span class="c"># value 속성을 통해서 이름을 정해줄 수 있음</span><span class="w">
</span><span class="k">type</span><span class="w"> </span><span class="n">Query</span><span class="p">{</span><span class="w">
    </span><span class="n">getMember</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!):</span><span class="w"> </span><span class="n">Member</span><span class="w">
    </span><span class="n">getMembers</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="n">Member</span><span class="p">]</span><span class="w">

    </span><span class="n">getMemberResponseDto</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!):</span><span class="w"> </span><span class="n">MemberResponseDto</span><span class="w">
    </span><span class="n">getMembersResponseDto</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="n">MemberResponseDto</span><span class="p">]</span><span class="w">

    </span><span class="n">getMemberBySchema</span><span class="p">(</span><span class="n">id</span><span class="p">:</span><span class="w"> </span><span class="nb">ID</span><span class="p">!):</span><span class="w"> </span><span class="n">Member</span><span class="w">
    </span><span class="n">getMembersBySchema</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="n">Member</span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c"># @MutationMapping 메서드 이름과 동일</span><span class="w">
</span><span class="c"># value 속성을 통해서 이름을 정해줄 수 있음</span><span class="w">
</span><span class="k">type</span><span class="w"> </span><span class="n">Mutation</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="n">postMember</span><span class="p">(</span><span class="w">
        </span><span class="n">id</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nb">Int</span><span class="w">
        </span><span class="n">name</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="w">
        </span><span class="n">age</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nb">Int</span><span class="w">
    </span><span class="p">):</span><span class="w"> </span><span class="n">Member</span><span class="w">
    </span><span class="n">postMemberByMutation</span><span class="p">(</span><span class="w">
        </span><span class="n">id</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nb">Int</span><span class="w">
        </span><span class="n">name</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nb">String</span><span class="w">
        </span><span class="n">age</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nb">Int</span><span class="w">
    </span><span class="p">):</span><span class="w"> </span><span class="n">Member</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><br /></p>

<p><strong>Member.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Builder</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>MemberService.java</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@Transactional</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">findMemberById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">findMember</span><span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">MEMBER_NOT_FOUND</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAllMember</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">saveMember</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>MemberRepository.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>

</code></pre></div></div>

<p><br /></p>

<p><strong>MemberMapper.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberMapper</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">MemberResponseDto</span> <span class="nf">memberToMemberResponseDto</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">MemberResponseDto</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>
                <span class="o">.</span><span class="na">name</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
                <span class="o">.</span><span class="na">age</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getAge</span><span class="o">())</span>
                <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberResponseDto</span><span class="o">&gt;</span> <span class="nf">memberListToMemberResponseDtoList</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">members</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">member</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="nf">memberToMemberResponseDto</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
                <span class="o">})</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Member</span> <span class="nf">toEntity</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Member</span> <span class="n">newMember</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">newMember</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="n">newMember</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">newMember</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>위에까지는 REST API와 별반 다르지 않은 계층의 코드이다. <br />
Repository - Service 계층이고 Mapper를 이용해 맵핑을 도와주는 클래스다.  <br />
Controller 부터는 조금 달라진 모습을 볼 수 있을 것이다.</p>

<p><strong>MemberController.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
* EndPoint : http://localhost:8080/graphql
* Test 접속 URL : http://localhost:8080/graphiql 에 쿼리를 입력
* */</span>
<span class="nd">@Controller</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberMapper</span> <span class="n">memberMapper</span><span class="o">;</span>

    <span class="cm">/*
    * @QueryMapping
    * -&gt; 주로 Read에 사용됩니다. (REST API @GetMapping과 대응)
    * */</span>

    <span class="nd">@QueryMapping</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">getMember</span><span class="o">(</span><span class="nd">@Argument</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findMemberById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@QueryMapping</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">getMembers</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findAllMember</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@QueryMapping</span>
    <span class="kd">public</span> <span class="nc">MemberResponseDto</span> <span class="nf">getMemberResponseDto</span><span class="o">(</span><span class="nd">@Argument</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">){</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findMemberById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">memberMapper</span><span class="o">.</span><span class="na">memberToMemberResponseDto</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@QueryMapping</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberResponseDto</span><span class="o">&gt;</span> <span class="nf">getMembersResponseDto</span><span class="o">(){</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">allMember</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findAllMember</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">memberMapper</span><span class="o">.</span><span class="na">memberListToMemberResponseDtoList</span><span class="o">(</span><span class="n">allMember</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/*
    * @MutationMapping
    * -&gt; 주로 Create, Update, Delete에 사용됩니다.
    * */</span>
    <span class="nd">@MutationMapping</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">postMember</span><span class="o">(</span><span class="nd">@Argument</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span>
                             <span class="nd">@Argument</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">){</span>

        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">memberMapper</span><span class="o">.</span><span class="na">toEntity</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">memberService</span><span class="o">.</span><span class="na">saveMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/*
    * @SchemaMapping
    * -&gt; @QueryMapping, @MutationMapping 를 선택하여 사용할 수 있음.
    * */</span>
    <span class="nd">@SchemaMapping</span><span class="o">(</span><span class="n">typeName</span> <span class="o">=</span> <span class="s">"Query"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">getMemberBySchema</span><span class="o">(</span><span class="nd">@Argument</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findMemberById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@SchemaMapping</span><span class="o">(</span><span class="n">typeName</span> <span class="o">=</span> <span class="s">"Query"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">getMembersBySchema</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findAllMember</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@SchemaMapping</span><span class="o">(</span><span class="n">typeName</span> <span class="o">=</span> <span class="s">"Mutation"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">postMemberByMutation</span><span class="o">(</span><span class="nd">@Argument</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span>
                                       <span class="nd">@Argument</span> <span class="nc">Integer</span> <span class="n">age</span><span class="o">){</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">memberMapper</span><span class="o">.</span><span class="na">toEntity</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">memberService</span><span class="o">.</span><span class="na">saveMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>
<p>첫번쨰로 어노테이션들이 기존에 사용하던 Mapping어노테이션과는 다르고 <br />
@ReqeustBody와 같은 어노테이션도 사용하지 않는 모습이다. <br />
반환타입도 <code class="language-plaintext highlighter-rouge">schema.graphqls</code>에 지정되어있는 클래스들을 반환 타입으로 사용하였고</p>

<p>메서드 이름을 통해 Query,Mutation에 접근하는 형태를 가지고있다. <br />
value라는 속성값을 이용하면 ex) @MutationMapping(value = “postMember”) <br />
메서드 이름이아닌 지정한대로 변경도 가능하다.</p>

<p>REST API와 어노테이션과 반환형식만 다르지 <br />
크게 코드적으로 어렵게 작성해야하는 부분은 없다.  <br />
이런 기능을 제공해주는 Spring에게 감사를,,,</p>

<p><br /></p>

<h4 id="테스트-진행">테스트 진행</h4>

<p>이제 위와 같이 프로젝트 셋팅이 끝났으면 <br />
Controller에 작성한 API를 검증할 수 있다.</p>

<p>Spring Boot를 실행하면</p>

<p><img src="https://user-images.githubusercontent.com/95069395/231749021-722b6320-da74-4163-b506-09102951b10b.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위 사진과 같이 GraphQL endpoint가 표시되면 정상적으로 실행된 것이다. <br />
로컬환경에서 API 요청시 <code class="language-plaintext highlighter-rouge">localhost:8080/graphql</code>로 요청을 진행하면된다.</p>

<p><br /></p>

<p>실제 API를 테스트하는 방법은 2가지 정도 있다.</p>

<p><strong>1). Postman을 통한 요청</strong></p>

<p><img src="https://user-images.githubusercontent.com/95069395/231749779-9bdc4a6d-7094-44cb-b6f5-90718bce5139.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>포스트맨으로 위에 앤드포인트로 요청하면  <br />
위와 같이 정상적으로 작동하는지 확인이 가능하다.</p>

<p>문법 자동완성이되지 않아 2번방법을 추천한다.</p>

<p><br /></p>

<p><strong>2). graphiql을 통한 요청</strong></p>

<p>브라우저에 <code class="language-plaintext highlighter-rouge">localhost:8080/graphiql</code>를 접속하면된다. <br />
<code class="language-plaintext highlighter-rouge">i</code>가 추가되었으니 이점을 꼭 참고하자</p>

<p><img src="https://user-images.githubusercontent.com/95069395/231749144-a022257c-8461-4fcf-958c-52b63ec70b0b.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>접속하게되면 위와 같이 쿼리를 입력하고 오른쪽에는 출력이된 화면이 표시된다.</p>

<p>실제로 요청 쿼리를 만들어 보냈을 경우</p>

<p><img src="https://user-images.githubusercontent.com/95069395/231749203-7dd0f47b-d09e-4ed5-afec-9f5efa09089d.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위에 처럼 확인이 가능한 모습을 볼 수 있다. <br />
프론트쪽에서 원하는 데이터를 요청하는 것들만 만들어서 <br />
반환하는 특성을 확인해 볼 수 있다.</p>

<p><br /></p>

<p>그럼 실제로 우리가 위에서 만든 Controller를 테스트하기 위해서 <br />
아래와 같은 쿼리문이 필요하다.</p>

<pre><code class="language-roomsql">query{
    getMember(id:1) {
      id
      name
      age
    }
    getMembers {
      id
      name
    }
    getMemberResponseDto(id :1) {
      id
      name
      age
    }
    getMembersResponseDto {
      id
      name
    }
    getMemberBySchema(id :1) {
      id
      name
      age
    }
    getMembersBySchema {
      id
      name
    }
}
</code></pre>

<p>총 6개 API를 호출하는 테스트이다.</p>

<p><br /></p>

<p>또한 POST를 해보기 위해서 <br />
mutation를 만들어서 실제로 Database에 저장되는지도 확인해보았다.</p>

<pre><code class="language-roomsql">mutation{
    postMember(name:"미노이", age:18){
        id
        name
        age
    }
    postMemberByMutation(name:"김채원", age:19){
        id
        name
        age
    }
}
</code></pre>
<p><code class="language-plaintext highlighter-rouge">@Argument</code>로 받을 매개변수 설정(name, age)하여 <br />
id,name,age를 반환받는다고 보면 될 것 같다.</p>

<p><br /></p>

<hr />

<p>이렇게 오늘은 REST API대신에 GraphQL이라는 새로운 방식을 <br />
공부해보았다. 처음에 생소해서 공식문서랑 여러 블로그를 뒤져가면서 공부했는데  <br />
직접 코드를 작성하면서 체득하는 것이 확실히 이해하는데 빠른 것 같다.</p>

<p><br />
<br /></p>

<p><strong>✨ 참고 블로그</strong></p>

<ul>
  <li><a href="https://www.graphql-java.com/tutorials/getting-started-with-spring-boot">graphql 공식문서</a></li>
  <li><a href="https://hahahoho5915.tistory.com/56">hahahoho5915님 블로그 - 깃레포참고</a></li>
  <li><a href="https://danawalab.github.io/spring/2022/06/06/Spring-for-GraphQL.html">danawalab님 블로그</a></li>
  <li><a href="https://siyoon210.tistory.com/153">siyoon210님 블로그</a></li>
  <li><a href="https://velog.io/@jyleedev/Spring-GraphQL-Postman-%EC%98%88%EC%A0%9C-%EC%8B%A4%EC%8A%B5">jyleedev님 블로그</a></li>
  <li><a href="https://kotlinworld.com/330">kotlinworld님 블로그</a></li>
</ul>

<p><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Spring" /><category term="Spring" /><category term="QueryDSL" /><summary type="html"><![CDATA[오늘은 REST API와 조금 다룬 GraphQL에 대해서 기본적인 개념와 실습을 위해 프로젝트를 하나파서 만들어봤다.]]></summary></entry><entry><title type="html">[Java] Generic을 활용한 Class 타입 매개변수로 전달하기</title><link href="http://localhost:4000/java/2023/04/12/java-generic.html" rel="alternate" type="text/html" title="[Java] Generic을 활용한 Class 타입 매개변수로 전달하기" /><published>2023-04-12T00:00:00+09:00</published><updated>2023-04-12T00:00:00+09:00</updated><id>http://localhost:4000/java/2023/04/12/java-generic</id><content type="html" xml:base="http://localhost:4000/java/2023/04/12/java-generic.html"><![CDATA[<h3 id="generic---class-타입을-매개변수로-전달">Generic - Class 타입을 매개변수로 전달</h3>

<h4 id="리펙토링-배경">리펙토링 배경</h4>

<p>테스트 코드를 작성 중 Jackson 라이브러리 ObjectMapper를 사용하여 <br />
객체를 직렬화, 역직렬화를 진행하였다.</p>

<p>해당 부분은 자주 사용하는 부분이기 때문에 Utils라는 클래스로 만들어 <br />
관리하면 어떨까? 하는 생각에 클래스를 만들었고</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectMapperUtils</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>

    <span class="c1">// 코드 생략 ...</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">LoginResponse</span> <span class="nf">actionsSingleResponseToLoginDto</span><span class="o">(</span><span class="nc">ResultActions</span> <span class="n">actions</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">resultActionsToResponseAsString</span><span class="o">(</span><span class="n">actions</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="nc">LoginResponse</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">MemberDto</span><span class="o">.</span><span class="na">Response</span> <span class="nf">actionsSingleResponseToMemberDto</span><span class="o">(</span><span class="nc">ResultActions</span> <span class="n">actions</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">resultActionsToResponseAsString</span><span class="o">(</span><span class="n">actions</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">registerModule</span><span class="o">(</span><span class="k">new</span> <span class="nc">JavaTimeModule</span><span class="o">()).</span><span class="na">readValue</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="nc">MemberDto</span><span class="o">.</span><span class="na">Response</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
        
    <span class="c1">// 코드 생략 ...</span>
<span class="o">}</span>
</code></pre></div></div>

<p>대략 위와 같은 형식으로 코드를 작성하였다.   <br />
코드에서 주요 핵심 포인트는 <code class="language-plaintext highlighter-rouge">.readValue(response, 클래스타입);</code> 메서드 부분이다. <br />
메서드가 2개가 존재하는데 actions를 매개변수로 넘겨 String값 response를 받고 <br />
ObjectMapper를 이용해 역직렬화를 시켜주는 동일한 기능의 메서드들이다.</p>

<p>여기서 <code class="language-plaintext highlighter-rouge">LoginResponse.class</code>과 <code class="language-plaintext highlighter-rouge">MemberDto.Response.class</code> 부분과  <br />
반환 타입 <code class="language-plaintext highlighter-rouge">LoginResponse</code>과 <code class="language-plaintext highlighter-rouge">MemberDto.Response</code> 부분만 통일화 시켜주면 <br />
메서드 하나로 리펙토링이 가능하다고 생각했다.</p>

<p><br /></p>

<h4 id="리펙토링-진행">리펙토링 진행</h4>

<p>위와 같은 이유로 Class타입을 매개변수로 넘겨주고, 매개변수와 반환값을 제너릭으로 <br />
어떤 타입이든 메서드 호출시 정하도록 해주면 되겠다고 생각하여 아래와 같이 리펙토링 하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectMapperUtils</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>

    <span class="c1">// 코드 생략 ...</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">actionsSingleToDto</span><span class="o">(</span><span class="nc">ResultActions</span> <span class="n">actions</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">responseClass</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">response</span> <span class="o">=</span> <span class="n">resultActionsToResponseAsString</span><span class="o">(</span><span class="n">actions</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">registerModule</span><span class="o">(</span><span class="k">new</span> <span class="nc">JavaTimeModule</span><span class="o">()).</span><span class="na">readValue</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="n">responseClass</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="c1">// 코드 생략 ...</span>
    
<span class="o">}</span>
</code></pre></div></div>
<p>코드에서 보면 알 수 있듯이 <code class="language-plaintext highlighter-rouge">Class&lt;T&gt;</code>를 이용해 매겨변수를 타입으로 넘겨주었고 <br />
반환타입을 <code class="language-plaintext highlighter-rouge">&lt;T&gt; T</code>로 지정하여 매개변수를 넘길때 클래스의 타입을 반환하게 하였다.</p>

<p><br /></p>

<p>실제로 메서드를 호출하는 테스트 코드는 아래와 같이 작성하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">class</span> <span class="nc">BuddyRecruitmentIntegrationTest</span> <span class="kd">extends</span> <span class="nc">BaseIntegrationTest</span> <span class="o">{</span>
    
    <span class="c1">// 코드 생략 ...</span>
    
    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"동행 작성 테스트"</span><span class="o">)</span>
    <span class="kt">void</span> <span class="nf">BuddyRecruitmentIntegrationTest1</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
       
        <span class="c1">// ... 코드 생략 </span>
        
        <span class="nc">BuddyDto</span><span class="o">.</span><span class="na">ResponseRecruitment</span> <span class="n">response</span> <span class="o">=</span> <span class="nc">ObjectMapperUtils</span><span class="o">.</span><span class="na">actionsSingleToDto</span><span class="o">(</span><span class="n">actions</span><span class="o">,</span>
                <span class="nc">BuddyDto</span><span class="o">.</span><span class="na">ResponseRecruitment</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        
        <span class="c1">// ... 코드 생략 </span>
    <span class="o">}</span>

    <span class="c1">// 코드 생략 ...</span>
    
<span class="o">}</span>
</code></pre></div></div>
<p>여기서 주목할 곳은 아래의 2번쨰 매개변수를 <br />
<code class="language-plaintext highlighter-rouge">BuddyDto.ResponseRecruitment.class</code> 클래스 타입으로<br />
전달하게된다는 점이다. 이렇게 여러개의 메서드를 계속 늘려나갈 상황이 생겼는데  <br />
제너릭을 활용해 하나의 메서드로 Utils 클래스의 불필요한 중복 메서드를 제거하였다.</p>

<p><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Java" /><category term="Java" /><summary type="html"><![CDATA[Generic - Class 타입을 매개변수로 전달]]></summary></entry></feed>