<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-24T18:24:32+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LeeJellan</title><subtitle>안녕하세요!🙂 IT,여행,기타 등 기록을 남기기위한 블로그 입니다 !</subtitle><author><name>LEE JAEHYEOK</name></author><entry><title type="html">[Programmers] 5월 식품들의 총매출 조회하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/24/sql-foodsales.html" rel="alternate" type="text/html" title="[Programmers] 5월 식품들의 총매출 조회하기 (MySQL)" /><published>2023-05-24T00:00:00+09:00</published><updated>2023-05-24T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/24/sql-foodsales</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/24/sql-foodsales.html"><![CDATA[<h2 id="-문제--5월-식품들의-총매출-조회하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131117">5월 식품들의 총매출 조회하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 식품의 정보를 담은 <code>FOOD_PRODUCT</code> 테이블과 식품의 주문 정보를 담은 <code>FOOD_ORDER</code> 테이블입니다. <code>FOOD_PRODUCT</code> 테이블은 다음과 같으며 <code>PRODUCT_ID</code>, <code>PRODUCT_NAME</code>, <code>PRODUCT_CD</code>, <code>CATEGORY</code>, <code>PRICE</code>는 식품 ID, 식품 이름, 식품코드, 식품분류, 식품 가격을 의미합니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>PRODUCT_ID</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_NAME</td>
<td>VARCHAR(50)</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_CD</td>
<td>VARCHAR(10)</td>
<td>TRUE</td>
</tr>
<tr>
<td>CATEGORY</td>
<td>VARCHAR(10)</td>
<td>TRUE</td>
</tr>
<tr>
<td>PRICE</td>
<td>NUMBER</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<p><code>FOOD_ORDER</code> 테이블은 다음과 같으며 <code>ORDER_ID</code>, <code>PRODUCT_ID</code>, <code>AMOUNT</code>,  <code>PRODUCE_DATE</code>, <code>IN_DATE</code>, <code>OUT_DATE</code>, <code>FACTORY_ID</code>, <code>WAREHOUSE_ID</code>는 각각 주문 ID, 제품 ID, 주문량, 생산일자, 입고일자, 출고일자, 공장 ID, 창고 ID를 의미합니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>ORDER_ID</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_ID</td>
<td>VARCHAR(5)</td>
<td>FALSE</td>
</tr>
<tr>
<td>AMOUNT</td>
<td>NUMBER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCE_DATE</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
<tr>
<td>IN_DATE</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
<tr>
<td>OUT_DATE</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
<tr>
<td>FACTORY_ID</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
<tr>
<td>WAREHOUSE_ID</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>FOOD_PRODUCT</code>와 <code>FOOD_ORDER</code> 테이블에서 생산일자가 2022년 5월인 식품들의 식품 ID, 식품 이름, 총매출을 조회하는 SQL문을 작성해주세요. 이때 결과는 총매출을 기준으로 내림차순 정렬해주시고 총매출이 같다면 식품 ID를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p><code>FOOD_PRODUCT</code> 테이블이 다음과 같고</p>
<table class="table">
        <thead><tr>
<th>PRODUCT_ID</th>
<th>PRODUCT_NAME</th>
<th>PRODUCT_CD</th>
<th>CATEGORY</th>
<th>PRICE</th>
</tr>
</thead>
        <tbody><tr>
<td>P0011</td>
<td>맛있는콩기름</td>
<td>CD_OL00001</td>
<td>식용유</td>
<td>4880</td>
</tr>
<tr>
<td>P0012</td>
<td>맛있는올리브유</td>
<td>CD_OL00002</td>
<td>식용유</td>
<td>7200</td>
</tr>
<tr>
<td>P0013</td>
<td>맛있는포도씨유</td>
<td>CD_OL00003</td>
<td>식용유</td>
<td>5950</td>
</tr>
<tr>
<td>P0014</td>
<td>맛있는마조유</td>
<td>CD_OL00004</td>
<td>식용유</td>
<td>8950</td>
</tr>
<tr>
<td>P0015</td>
<td>맛있는화조유</td>
<td>CD_OL00005</td>
<td>식용유</td>
<td>8800</td>
</tr>
<tr>
<td>P0016</td>
<td>맛있는참기름</td>
<td>CD_OL00006</td>
<td>식용유</td>
<td>7100</td>
</tr>
<tr>
<td>P0017</td>
<td>맛있는들기름</td>
<td>CD_OL00007</td>
<td>식용유</td>
<td>7900</td>
</tr>
<tr>
<td>P0018</td>
<td>맛있는고추기름</td>
<td>CD_OL00008</td>
<td>식용유</td>
<td>6100</td>
</tr>
<tr>
<td>P0019</td>
<td>맛있는카놀라유</td>
<td>CD_OL00009</td>
<td>식용유</td>
<td>5100</td>
</tr>
<tr>
<td>P0020</td>
<td>맛있는산초유</td>
<td>CD_OL00010</td>
<td>식용유</td>
<td>6500</td>
</tr>
</tbody>
      </table>
<p><code>FOOD_ORDER</code> 테이블이 다음과 같을 때</p>
<table class="table">
        <thead><tr>
<th>ORDER_ID</th>
<th>PRODUCT_ID</th>
<th>AMOUNT</th>
<th>PRODUCE_DATE</th>
<th>IN_DATE</th>
<th>OUT_DATE</th>
<th>FACTORY_ID</th>
<th>WAREHOUSE_ID</th>
</tr>
</thead>
        <tbody><tr>
<td>OD00000056</td>
<td>P0012</td>
<td>1000</td>
<td>2022-04-04</td>
<td>2022-04-21</td>
<td>2022-04-25</td>
<td>FT19980002</td>
<td>WH0032</td>
</tr>
<tr>
<td>OD00000057</td>
<td>P0014</td>
<td>2500</td>
<td>2022-04-14</td>
<td>2022-04-27</td>
<td>2022-05-01</td>
<td>FT19980002</td>
<td>WH0033</td>
</tr>
<tr>
<td>OD00000058</td>
<td>P0017</td>
<td>1200</td>
<td>2022-05-19</td>
<td>2022-05-28</td>
<td>2022-05-28</td>
<td>FT20070002</td>
<td>WH0033</td>
</tr>
<tr>
<td>OD00000059</td>
<td>P0017</td>
<td>1000</td>
<td>2022-05-24</td>
<td>2022-05-30</td>
<td>2022-05-30</td>
<td>FT20070002</td>
<td>WH0038</td>
</tr>
<tr>
<td>OD00000060</td>
<td>P0019</td>
<td>2000</td>
<td>2022-05-29</td>
<td>2022-06-08</td>
<td>2022-06-08</td>
<td>FT20070002</td>
<td>WH0035</td>
</tr>
</tbody>
      </table>
<p>SQL을 실행하면 다음과 같이 출력되어야 합니다.</p>
<table class="table">
        <thead><tr>
<th>PRODUCT_ID</th>
<th>PRODUCT_NAME</th>
<th>TOTAL_SALES</th>
</tr>
</thead>
        <tbody><tr>
<td>P0017</td>
<td>맛있는들기름</td>
<td>17380000</td>
</tr>
<tr>
<td>P0019</td>
<td>맛있는카놀라유</td>
<td>10200000</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>ORDER, PRODUCT 테이블을 INNER JOIN하여 테이블을 합친다.</li>
  <li>PRODUCT_ID가 존재하지 않는 데이터를 ORDER가 가지고 있기 때문에 INNER로 지정</li>
  <li>WHERE LIKE절로 2022년 5월의 데이터만 필터링한다.</li>
  <li>PRODUCT_ID를 기준으로 GROUP BY한다.</li>
  <li>SUM 집계함수를 이용해 AMOUNT의 전체수량 * 가격을 하여 최종 매출액을 계산한다.</li>
  <li>매출액을 기준으로 내림차순 정렬, ID를 기준으로 오름차순 정렬</li>
</ol>

<pre><code class="language-roomsql">SELECT P.PRODUCT_ID,
    P.PRODUCT_NAME,
    SUM(AMOUNT) * P.PRICE AS TOTAL_SALES
FROM FOOD_ORDER O
INNER JOIN FOOD_PRODUCT P
ON O.PRODUCT_ID = P.PRODUCT_ID
WHERE O.PRODUCE_DATE LIKE '2022-05%'
GROUP BY P.PRODUCT_ID
ORDER BY TOTAL_SALES DESC, P.PRODUCT_ID ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 5월 식품들의 총매출 조회하기]]></summary></entry><entry><title type="html">[Programmers] 서울에 위치한 식당 목록 출력하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/23/sql-seoulrest.html" rel="alternate" type="text/html" title="[Programmers] 서울에 위치한 식당 목록 출력하기 (MySQL)" /><published>2023-05-23T00:00:00+09:00</published><updated>2023-05-23T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/23/sql-seoulrest</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/23/sql-seoulrest.html"><![CDATA[<h2 id="-문제--서울에-위치한-식당-목록-출력하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131118">서울에 위치한 식당 목록 출력하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 식당의 정보를 담은 <code>REST_INFO</code> 테이블과 식당의 리뷰 정보를 담은  <code>REST_REVIEW</code> 테이블입니다. <code>REST_INFO</code> 테이블은 다음과 같으며 <code>REST_ID</code>, <code>REST_NAME</code>, <code>FOOD_TYPE</code>, <code>VIEWS</code>, <code>FAVORITES</code>, <code>PARKING_LOT</code>, <code>ADDRESS</code>, <code>TEL</code>은 식당 ID, 식당 이름, 음식 종류, 조회수, 즐겨찾기수, 주차장 유무, 주소, 전화번호를 의미합니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>REST_ID</td>
<td>VARCHAR(5)</td>
<td>FALSE</td>
</tr>
<tr>
<td>REST_NAME</td>
<td>VARCHAR(50)</td>
<td>FALSE</td>
</tr>
<tr>
<td>FOOD_TYPE</td>
<td>VARCHAR(20)</td>
<td>TRUE</td>
</tr>
<tr>
<td>VIEWS</td>
<td>NUMBER</td>
<td>TRUE</td>
</tr>
<tr>
<td>FAVORITES</td>
<td>NUMBER</td>
<td>TRUE</td>
</tr>
<tr>
<td>PARKING_LOT</td>
<td>VARCHAR(1)</td>
<td>TRUE</td>
</tr>
<tr>
<td>ADDRESS</td>
<td>VARCHAR(100)</td>
<td>TRUE</td>
</tr>
<tr>
<td>TEL</td>
<td>VARCHAR(100)</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<p><code>REST_REVIEW</code> 테이블은 다음과 같으며 <code>REVIEW_ID</code>, <code>REST_ID</code>, <code>MEMBER_ID</code>, <code>REVIEW_SCORE</code>, <code>REVIEW_TEXT</code>,<code>REVIEW_DATE</code>는 각각 리뷰 ID, 식당 ID, 회원 ID, 점수, 리뷰 텍스트, 리뷰 작성일을 의미합니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>REVIEW_ID</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
<tr>
<td>REST_ID</td>
<td>VARCHAR(10)</td>
<td>TRUE</td>
</tr>
<tr>
<td>MEMBER_ID</td>
<td>VARCHAR(100)</td>
<td>TRUE</td>
</tr>
<tr>
<td>REVIEW_SCORE</td>
<td>NUMBER</td>
<td>TRUE</td>
</tr>
<tr>
<td>REVIEW_TEXT</td>
<td>VARCHAR(1000)</td>
<td>TRUE</td>
</tr>
<tr>
<td>REVIEW_DATE</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>REST_INFO</code>와 <code>REST_REVIEW</code> 테이블에서 서울에 위치한 식당들의 식당 ID, 식당 이름, 음식 종류, 즐겨찾기수, 주소, 리뷰 평균 점수를 조회하는 SQL문을 작성해주세요. 이때 리뷰 평균점수는 소수점 세 번째 자리에서 반올림 해주시고 결과는 평균점수를 기준으로 내림차순 정렬해주시고, 평균점수가 같다면 즐겨찾기수를 기준으로 내림차순 정렬해주세요. </p>

<hr />

<h5>예시</h5>

<p><code>REST_INFO</code> 테이블이 다음과 같고</p>
<table class="table">
        <thead><tr>
<th>REST_ID</th>
<th>REST_NAME</th>
<th>FOOD_TYPE</th>
<th>VIEWS</th>
<th>FAVORITES</th>
<th>PARKING_LOT</th>
<th>ADDRESS</th>
<th>TEL</th>
</tr>
</thead>
        <tbody><tr>
<td>00028</td>
<td>대우부대찌개</td>
<td>한식</td>
<td>52310</td>
<td>10</td>
<td>N</td>
<td>경기도 용인시 처인구 남사읍 처인성로 309</td>
<td>031-235-1235</td>
</tr>
<tr>
<td>00039</td>
<td>광주식당</td>
<td>한식</td>
<td>23001</td>
<td>20</td>
<td>N</td>
<td>경기도 부천시 산업로8번길 60</td>
<td>031-235-6423</td>
</tr>
<tr>
<td>00035</td>
<td>삼촌식당</td>
<td>일식</td>
<td>532123</td>
<td>80</td>
<td>N</td>
<td>서울특별시 강서구 가로공원로76가길</td>
<td>02-135-1266</td>
</tr>
</tbody>
      </table>
<p><code>REST_REVIEW</code> 테이블이 다음과 같을 때</p>
<table class="table">
        <thead><tr>
<th>REVIEW_ID</th>
<th>REST_ID</th>
<th>MEMBER_ID</th>
<th>REVIEW_SCORE</th>
<th>REVIEW_TEXT</th>
<th>REVIEW_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>R000000065</td>
<td>00028</td>
<td><code>soobin97@naver.com</code></td>
<td>5</td>
<td>부찌 국물에서 샤브샤브 맛이나고 깔끔</td>
<td>2022-04-12</td>
</tr>
<tr>
<td>R000000066</td>
<td>00039</td>
<td><code>yelin1130@gmail.com</code></td>
<td>5</td>
<td>김치찌개 최곱니다.</td>
<td>2022-02-12</td>
</tr>
<tr>
<td>R000000067</td>
<td>00028</td>
<td><code>yelin1130@gmail.com</code></td>
<td>5</td>
<td>햄이 많아서 좋아요</td>
<td>2022-02-22</td>
</tr>
<tr>
<td>R000000068</td>
<td>00035</td>
<td><code>ksyi0316@gmail.com</code></td>
<td>5</td>
<td>숙성회가 끝내줍니다.</td>
<td>2022-02-15</td>
</tr>
<tr>
<td>R000000069</td>
<td>00035</td>
<td><code>yoonsy95@naver.com</code></td>
<td>4</td>
<td>비린내가 전혀없어요.</td>
<td>2022-04-16</td>
</tr>
</tbody>
      </table>
<p>SQL을 실행하면 다음과 같이 출력되어야 합니다.</p>
<table class="table">
        <thead><tr>
<th>REST_ID</th>
<th>REST_NAME</th>
<th>FOOD_TYPE</th>
<th>FAVORITES</th>
<th>ADDRESS</th>
<th>SCORE</th>
</tr>
</thead>
        <tbody><tr>
<td>00035</td>
<td>삼촌식당</td>
<td>일식</td>
<td>80</td>
<td>서울특별시 강서구 가로공원로76가길</td>
<td>4.50</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>LEFT JOIN을 이용하여 REVIEW를 기준으로 INFO를 합친다.</li>
  <li>WHERE절을 사용하여 ADDRESS가 서울인 것들만 추출한다.</li>
  <li>REST_ID를 기준으로 GROUP하여 SCORE 평균을 2자리 반올림하여 SELECT한다.</li>
  <li>SCORE, FAVORITES 기준으로 내림차순한다.</li>
</ol>

<pre><code class="language-roomsql">SELECT R.REST_ID,
    I.REST_NAME,
    I.FOOD_TYPE,
    I.FAVORITES,
    I.ADDRESS,
    ROUND(AVG(R.REVIEW_SCORE),2) AS SCORE
FROM REST_REVIEW R
LEFT JOIN REST_INFO I
ON R.REST_ID = I.REST_ID
WHERE I.ADDRESS LIKE '서울%'
GROUP BY R.REST_ID
ORDER BY SCORE DESC, I.FAVORITES DESC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 서울에 위치한 식당 목록 출력하기]]></summary></entry><entry><title type="html">[Programmers] 그룹별 조건에 맞는 식당 목록 출력하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/22/sql-reviewlist.html" rel="alternate" type="text/html" title="[Programmers] 그룹별 조건에 맞는 식당 목록 출력하기 (MySQL)" /><published>2023-05-22T00:00:00+09:00</published><updated>2023-05-22T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/22/sql-reviewlist</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/22/sql-reviewlist.html"><![CDATA[<h2 id="-문제--그룹별-조건에-맞는-식당-목록-출력하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131124">그룹별 조건에 맞는 식당 목록 출력하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 고객의 정보를 담은 <code>MEMBER_PROFILE</code>테이블과 식당의 리뷰 정보를 담은  <code>REST_REVIEW</code> 테이블입니다. <code>MEMBER_PROFILE</code> 테이블은 다음과 같으며 <code>MEMBER_ID</code>, <code>MEMBER_NAME</code>, <code>TLNO</code>, <code>GENDER</code>, <code>DATE_OF_BIRTH</code>는 회원 ID, 회원 이름, 회원 연락처, 성별, 생년월일을 의미합니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>MEMBER_ID</td>
<td>VARCHAR(100)</td>
<td>FALSE</td>
</tr>
<tr>
<td>MEMBER_NAME</td>
<td>VARCHAR(50)</td>
<td>FALSE</td>
</tr>
<tr>
<td>TLNO</td>
<td>VARCHAR(50)</td>
<td>TRUE</td>
</tr>
<tr>
<td>GENDER</td>
<td>VARCHAR(1)</td>
<td>TRUE</td>
</tr>
<tr>
<td>DATE_OF_BIRTH</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<p><code>REST_REVIEW</code> 테이블은 다음과 같으며 <code>REVIEW_ID</code>, <code>REST_ID</code>, <code>MEMBER_ID</code>, <code>REVIEW_SCORE</code>, <code>REVIEW_TEXT</code>,<code>REVIEW_DATE</code>는 각각 리뷰 ID, 식당 ID, 회원 ID, 점수, 리뷰 텍스트, 리뷰 작성일을 의미합니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>REVIEW_ID</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
<tr>
<td>REST_ID</td>
<td>VARCHAR(10)</td>
<td>TRUE</td>
</tr>
<tr>
<td>MEMBER_ID</td>
<td>VARCHAR(100)</td>
<td>TRUE</td>
</tr>
<tr>
<td>REVIEW_SCORE</td>
<td>NUMBER</td>
<td>TRUE</td>
</tr>
<tr>
<td>REVIEW_TEXT</td>
<td>VARCHAR(1000)</td>
<td>TRUE</td>
</tr>
<tr>
<td>REVIEW_DATE</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>MEMBER_PROFILE</code>와 <code>REST_REVIEW</code> 테이블에서 리뷰를 가장 많이 작성한 회원의 리뷰들을 조회하는 SQL문을 작성해주세요. 회원 이름, 리뷰 텍스트, 리뷰 작성일이 출력되도록 작성해주시고, 결과는 리뷰 작성일을 기준으로 오름차순, 리뷰 작성일이 같다면 리뷰 텍스트를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p><code>MEMBER_PROFILE</code> 테이블이 다음과 같고</p>
<table class="table">
        <thead><tr>
<th>MEMBER_ID</th>
<th>MEMBER_NAME</th>
<th>TLNO</th>
<th>GENDER</th>
<th>DATE_OF_BIRTH</th>
</tr>
</thead>
        <tbody><tr>
<td><code>jiho92@naver.com</code></td>
<td>이지호</td>
<td>01076432111</td>
<td>W</td>
<td>1992-02-12</td>
</tr>
<tr>
<td><code>jiyoon22@hotmail.com</code></td>
<td>김지윤</td>
<td>01032324117</td>
<td>W</td>
<td>1992-02-22</td>
</tr>
<tr>
<td><code>jihoon93@hanmail.net</code></td>
<td>김지훈</td>
<td>01023258688</td>
<td>M</td>
<td>1993-02-23</td>
</tr>
<tr>
<td><code>seoyeons@naver.com</code></td>
<td>박서연</td>
<td>01076482209</td>
<td>W</td>
<td>1993-03-16</td>
</tr>
<tr>
<td><code>yelin1130@gmail.com</code></td>
<td>조예린</td>
<td>01017626711</td>
<td>W</td>
<td>1990-11-30</td>
</tr>
</tbody>
      </table>
<p><code>REST_REVIEW</code> 테이블이 다음과 같을 때</p>
<table class="table">
        <thead><tr>
<th>REVIEW_ID</th>
<th>REST_ID</th>
<th>MEMBER_ID</th>
<th>REVIEW_SCORE</th>
<th>REVIEW_TEXT</th>
<th>REVIEW_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>R000000065</td>
<td>00028</td>
<td><code>soobin97@naver.com</code></td>
<td>5</td>
<td>부찌 국물에서 샤브샤브 맛이나고 깔끔</td>
<td>2022-04-12</td>
</tr>
<tr>
<td>R000000066</td>
<td>00039</td>
<td><code>yelin1130@gmail.com</code></td>
<td>5</td>
<td>김치찌개 최곱니다.</td>
<td>2022-02-12</td>
</tr>
<tr>
<td>R000000067</td>
<td>00028</td>
<td><code>yelin1130@gmail.com</code></td>
<td>5</td>
<td>햄이 많아서 좋아요</td>
<td>2022-02-22</td>
</tr>
<tr>
<td>R000000068</td>
<td>00035</td>
<td><code>ksyi0316@gmail.com</code></td>
<td>5</td>
<td>숙성회가 끝내줍니다.</td>
<td>2022-02-15</td>
</tr>
<tr>
<td>R000000069</td>
<td>00035</td>
<td><code>yoonsy95@naver.com</code></td>
<td>4</td>
<td>비린내가 전혀없어요.</td>
<td>2022-04-16</td>
</tr>
</tbody>
      </table>
<p>SQL을 실행하면 다음과 같이 출력되어야 합니다.</p>
<table class="table">
        <thead><tr>
<th>MEMBER_NAME</th>
<th>REVIEW_TEXT</th>
<th>REVIEW_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>조예린</td>
<td>김치찌개 최곱니다.</td>
<td>2022-02-12</td>
</tr>
<tr>
<td>조예린</td>
<td>햄이 많아서 좋아요</td>
<td>2022-02-22</td>
</tr>
</tbody>
      </table>
<hr />

<h5>주의사항</h5>

<p><code>REVIEW_DATE</code>의 데이트 포맷이 예시와 동일해야 정답처리 됩니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>MEMBER_PROFILE, REST_REVIEW 테이블을 조인하여 합쳐준다.</li>
  <li>가장 많이 리뷰를 남긴사람을 찾기위해 WHERE절로 SUB쿼리를 사용하여 MEMBER_ID를 추출한다.</li>
  <li>서브쿼리에는 COUNT 수량을 기준으로 내림차순하여 가장 많은 리뷰를 남긴사람을 찾는다.</li>
  <li>리뷰날짜, 텍스트 순서대로 오름차순 정렬한다.</li>
</ol>

<pre><code class="language-roomsql">SELECT P.MEMBER_NAME,
    R.REVIEW_TEXT,
    DATE_FORMAT(R.REVIEW_DATE,'%Y-%m-%d') AS REVIEW_DATE
FROM REST_REVIEW R
LEFT JOIN MEMBER_PROFILE P
ON R.MEMBER_ID = P.MEMBER_ID
WHERE R.MEMBER_ID = (
    SELECT MEMBER_ID
    FROM REST_REVIEW 
    GROUP BY MEMBER_ID
    ORDER BY COUNT(MEMBER_ID) DESC
    LIMIT 1
)
ORDER BY REVIEW_DATE ASC, R.REVIEW_TEXT ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 그룹별 조건에 맞는 식당 목록 출력하기]]></summary></entry><entry><title type="html">[Programmers] 년, 월, 성별 별 상품 구매 회원 수 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/21/sql-membercount.html" rel="alternate" type="text/html" title="[Programmers] 년, 월, 성별 별 상품 구매 회원 수 구하기 (MySQL)" /><published>2023-05-21T00:00:00+09:00</published><updated>2023-05-21T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/21/sql-membercount</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/21/sql-membercount.html"><![CDATA[<h2 id="-문제--년-월-성별-별-상품-구매-회원-수-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131532">년, 월, 성별 별 상품 구매 회원 수 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 의류 쇼핑몰에 가입한 회원 정보를 담은 <code>USER_INFO</code> 테이블과 온라인 상품 판매 정보를 담은 <code>ONLINE_SALE</code> 테이블 입니다.<code>USER_INFO</code> 테이블은 아래와 같은 구조로 되어있으며 <code>USER_ID</code>, <code>GENDER</code>, <code>AGE</code>, <code>JOINED</code>는 각각 회원 ID, 성별, 나이, 가입일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>USER_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>GENDER</td>
<td>TINYINT(1)</td>
<td>TRUE</td>
</tr>
<tr>
<td>AGE</td>
<td>INTEGER</td>
<td>TRUE</td>
</tr>
<tr>
<td>JOINED</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p><code>GENDER</code> 컬럼은 비어있거나 0 또는 1의 값을 가지며 0인 경우 남자를, 1인 경우는 여자를 나타냅니다.</p>

<p><code>ONLINE_SALE</code> 테이블은 아래와 같은 구조로 되어있으며, <code>ONLINE_SALE_ID</code>, <code>USER_ID</code>, <code>PRODUCT_ID</code>, <code>SALES_AMOUNT</code>, <code>SALES_DATE</code>는 각각 온라인 상품 판매 ID, 회원 ID, 상품 ID, 판매량, 판매일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>ONLINE_SALE_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>USER_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_AMOUNT</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>동일한 날짜, 회원 ID, 상품 ID 조합에 대해서는 하나의 판매 데이터만 존재합니다.</p>

<hr />

<h5>문제</h5>

<p><code>USER_INFO</code> 테이블과 <code>ONLINE_SALE</code> 테이블에서 년, 월, 성별 별로 상품을 구매한 회원수를 집계하는 SQL문을 작성해주세요. 결과는 년, 월, 성별을 기준으로 오름차순 정렬해주세요. 이때, 성별 정보가 없는 경우 결과에서 제외해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>USER_INFO</code> 테이블이 다음과 같고</p>
<table class="table">
        <thead><tr>
<th>USER_ID</th>
<th>GENDER</th>
<th>AGE</th>
<th>JOINED</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>26</td>
<td>2021-06-01</td>
</tr>
<tr>
<td>2</td>
<td>NULL</td>
<td>NULL</td>
<td>2021-06-25</td>
</tr>
<tr>
<td>3</td>
<td>0</td>
<td>NULL</td>
<td>2021-06-30</td>
</tr>
<tr>
<td>4</td>
<td>0</td>
<td>31</td>
<td>2021-07-03</td>
</tr>
<tr>
<td>5</td>
<td>1</td>
<td>25</td>
<td>2021-07-09</td>
</tr>
<tr>
<td>6</td>
<td>1</td>
<td>33</td>
<td>2021-07-14</td>
</tr>
</tbody>
      </table>
<p><code>ONLINE_SALE</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>ONLINE_SALE_ID</th>
<th>USER_ID</th>
<th>PRODUCT_ID</th>
<th>SALES_AMOUNT</th>
<th>SALES_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>54</td>
<td>1</td>
<td>2022-01-01</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>3</td>
<td>2</td>
<td>2022-01-25</td>
</tr>
<tr>
<td>3</td>
<td>4</td>
<td>34</td>
<td>1</td>
<td>2022-01-30</td>
</tr>
<tr>
<td>4</td>
<td>6</td>
<td>253</td>
<td>3</td>
<td>2022-02-03</td>
</tr>
<tr>
<td>5</td>
<td>2</td>
<td>31</td>
<td>2</td>
<td>2022-02-09</td>
</tr>
<tr>
<td>6</td>
<td>5</td>
<td>35</td>
<td>1</td>
<td>2022-02-14</td>
</tr>
<tr>
<td>7</td>
<td>5</td>
<td>57</td>
<td>1</td>
<td>2022-02-18</td>
</tr>
</tbody>
      </table>
<p>2022년 1월에 상품을 구매한 회원은 <code>USER_ID</code> 가 1(<code>GENDER</code>=1), 4(<code>GENDER</code>=0)인 회원들이고,<br />
2022년 2월에 상품을 구매한 회원은 <code>USER_ID</code> 가 2(<code>GENDER</code>=NULL), 5(<code>GENDER</code>=1), 6(<code>GENDER</code>=1)인 회원들 이므로,</p>

<p>년, 월, 성별 별로 상품을 구매한 회원수를 집계하고, 년, 월, 성별을 기준으로 오름차순 정렬하면 다음과 같은 결과가 나와야 합니다.</p>
<table class="table">
        <thead><tr>
<th>YEAR</th>
<th>MONTH</th>
<th>GENDER</th>
<th>USERS</th>
</tr>
</thead>
        <tbody><tr>
<td>2022</td>
<td>1</td>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>2022</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr>
<td>2022</td>
<td>2</td>
<td>1</td>
<td>2</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>YEAR, MONTH 함수를 이용해 년,월에 대한 데이터를 추출한다.</li>
  <li>ONLINE_SALE을 기준으로 USER_INFO를 LEFT JOIN 한다.</li>
  <li>GROUP BY를 이용해 월,성별을 기준으로 데이터를 집계한다.</li>
  <li>COUNT를 이용해 총 개수를 파악하는데 DISTINCT를 이용해 중복되는 데이터를 삭제한다.</li>
  <li>중복되는 월과 성별의 데이터가 존재하기 때문에 문제의 요구사항과 맞지 않기 때문이다.</li>
</ol>

<pre><code class="language-roomsql">SELECT YEAR(O.SALES_DATE) AS YEAR,
    MONTH(O.SALES_DATE) AS MONTH,
    U.GENDER AS GENDER,
    COUNT(DISTINCT U.USER_ID) AS USERS
FROM ONLINE_SALE O
LEFT JOIN USER_INFO U
ON O.USER_ID = U.USER_ID
WHERE U.GENDER is not null
GROUP BY MONTH,U.GENDER
ORDER BY YEAR ASC, MONTH ASC, GENDER ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 년, 월, 성별 별 상품 구매 회원 수 구하기]]></summary></entry><entry><title type="html">[Programmers] 오프라인/온라인 판매 데이터 통합하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/20/sql-offonlinesell.html" rel="alternate" type="text/html" title="[Programmers] 오프라인/온라인 판매 데이터 통합하기 (MySQL)" /><published>2023-05-20T00:00:00+09:00</published><updated>2023-05-20T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/20/sql-offonlinesell</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/20/sql-offonlinesell.html"><![CDATA[<h2 id="-문제--오프라인온라인-판매-데이터-통합하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131537">오프라인/온라인 판매 데이터 통합하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 의류 쇼핑몰의 온라인 상품 판매 정보를 담은 <code>ONLINE_SALE</code> 테이블과 오프라인 상품 판매 정보를 담은 <code>OFFLINE_SALE</code> 테이블 입니다. <code>ONLINE_SALE</code> 테이블은 아래와 같은 구조로 되어있으며 <code>ONLINE_SALE_ID</code>, <code>USER_ID</code>, <code>PRODUCT_ID</code>, <code>SALES_AMOUNT</code>, <code>SALES_DATE</code>는 각각 온라인 상품 판매 ID, 회원 ID, 상품 ID, 판매량, 판매일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>ONLINE_SALE_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>USER_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_AMOUNT</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>동일한 날짜, 회원 ID, 상품 ID 조합에 대해서는 하나의 판매 데이터만 존재합니다.</p>

<p><code>OFFLINE_SALE</code> 테이블은 아래와 같은 구조로 되어있으며 <code>OFFLINE_SALE_ID</code>, <code>PRODUCT_ID</code>, <code>SALES_AMOUNT</code>, <code>SALES_DATE</code>는 각각 오프라인 상품 판매 ID, 상품 ID, 판매량, 판매일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>OFFLINE_SALE_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_AMOUNT</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>동일한 날짜, 상품 ID 조합에 대해서는 하나의 판매 데이터만 존재합니다.</p>

<hr />

<h5>문제</h5>

<p><code>ONLINE_SALE</code> 테이블과 <code>OFFLINE_SALE</code> 테이블에서 2022년 3월의 오프라인/온라인 상품 판매 데이터의 판매 날짜, 상품ID, 유저ID, 판매량을 출력하는 SQL문을 작성해주세요. <code>OFFLINE_SALE</code> 테이블의 판매 데이터의 <code>USER_ID</code> 값은 NULL 로 표시해주세요. 결과는 판매일을 기준으로 오름차순 정렬해주시고 판매일이 같다면 상품 ID를 기준으로 오름차순, 상품ID까지 같다면 유저 ID를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>ONLINE_SALE</code> 테이블이 다음과 같고</p>
<table class="table">
        <thead><tr>
<th>ONLINE_SALE_ID</th>
<th>USER_ID</th>
<th>PRODUCT_ID</th>
<th>SALES_AMOUNT</th>
<th>SALES_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>3</td>
<td>2</td>
<td>2022-02-25</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
<td>4</td>
<td>1</td>
<td>2022-03-01</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>2</td>
<td>2</td>
<td>2022-03-02</td>
</tr>
<tr>
<td>3</td>
<td>6</td>
<td>3</td>
<td>3</td>
<td>2022-03-02</td>
</tr>
<tr>
<td>5</td>
<td>5</td>
<td>5</td>
<td>1</td>
<td>2022-03-03</td>
</tr>
<tr>
<td>6</td>
<td>5</td>
<td>7</td>
<td>1</td>
<td>2022-04-06</td>
</tr>
</tbody>
      </table>
<p><code>OFFLINE_SALE</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>OFFLINE_SALE_ID</th>
<th>PRODUCT_ID</th>
<th>SALES_AMOUNT</th>
<th>SALES_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>2</td>
<td>2022-02-21</td>
</tr>
<tr>
<td>4</td>
<td>1</td>
<td>2</td>
<td>2022-03-01</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>3</td>
<td>2022-03-01</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
<td>1</td>
<td>2022-03-01</td>
</tr>
<tr>
<td>5</td>
<td>2</td>
<td>1</td>
<td>2022-03-03</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
<td>1</td>
<td>2022-04-01</td>
</tr>
</tbody>
      </table>
<p>각 테이블의 2022년 3월의 판매 데이터를 합쳐서, 정렬한 결과는 다음과 같아야 합니다.</p>
<table class="table">
        <thead><tr>
<th>SALES_DATE</th>
<th>PRODUCT_ID</th>
<th>USER_ID</th>
<th>SALES_AMOUNT</th>
</tr>
</thead>
        <tbody><tr>
<td>2022-03-01</td>
<td>1</td>
<td>NULL</td>
<td>2</td>
</tr>
<tr>
<td>2022-03-01</td>
<td>3</td>
<td>NULL</td>
<td>3</td>
</tr>
<tr>
<td>2022-03-01</td>
<td>4</td>
<td>NULL</td>
<td>1</td>
</tr>
<tr>
<td>2022-03-01</td>
<td>4</td>
<td>4</td>
<td>1</td>
</tr>
<tr>
<td>2022-03-02</td>
<td>2</td>
<td>2</td>
<td>2</td>
</tr>
<tr>
<td>2022-03-02</td>
<td>3</td>
<td>6</td>
<td>3</td>
</tr>
<tr>
<td>2022-03-03</td>
<td>2</td>
<td>NULL</td>
<td>1</td>
</tr>
<tr>
<td>2022-03-03</td>
<td>5</td>
<td>5</td>
<td>1</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>UNION ALL 명령어를 이용해 두개의 테이블을 합친다.</li>
  <li>OFFLINE_SALE의 USER_ID가 없기 때문에 NULL로 표시한다.</li>
  <li>판매날짜, PRODUCT_ID, USER_ID를 기준으로 오름차순한다.</li>
</ol>

<pre><code class="language-roomsql">SELECT 
    DATE_FORMAT(SALES_DATE, '%Y-%m-%d') AS SALES_DATE, 
    PRODUCT_ID, 
    USER_ID, 
    SALES_AMOUNT 
FROM 
    ONLINE_SALE
WHERE 
    SALES_DATE LIKE '2022-03%'
UNION ALL
SELECT 
    DATE_FORMAT(SALES_DATE, '%Y-%m-%d') AS SALES_DATE, 
    PRODUCT_ID, 
    NULL AS USER_ID, 
    SALES_AMOUNT 
FROM OFFLINE_SALE
WHERE 
    SALES_DATE LIKE '2022-03%'
ORDER BY 
    SALES_DATE ASC, 
    PRODUCT_ID ASC, 
    USER_ID ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 오프라인/온라인 판매 데이터 통합하기]]></summary></entry><entry><title type="html">[Programmers] 취소되지 않은 진료 예약 조회하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/19/sql-notcancelappointment.html" rel="alternate" type="text/html" title="[Programmers] 취소되지 않은 진료 예약 조회하기 (MySQL)" /><published>2023-05-19T00:00:00+09:00</published><updated>2023-05-19T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/19/sql-notcancelappointment</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/19/sql-notcancelappointment.html"><![CDATA[<h2 id="-문제--취소되지-않은-진료-예약-조회하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/132204">취소되지 않은 진료 예약 조회하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 환자 정보를 담은 <code>PATIENT</code> 테이블과 의사 정보를 담은 <code>DOCTOR</code> 테이블, 그리고 진료 예약목록을 담은 <code>APPOINTMENT</code>에 대한 테이블입니다. <code>PATIENT</code> 테이블은 다음과 같으며 <code>PT_NO</code>, <code>PT_NAME</code>, <code>GEND_CD</code>, <code>AGE</code>, <code>TLNO</code>는 각각 환자번호, 환자이름, 성별코드, 나이, 전화번호를 의미합니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>PT_NO</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>PT_NAME</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>GEND_CD</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>AGE</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>TLNO</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<p><code>DOCTOR</code> 테이블은 다음과 같으며 <code>DR_NAME</code>, <code>DR_ID</code>, <code>LCNS_NO</code>, <code>HIRE_YMD</code>, <code>MCDP_CD</code>, <code>TLNO</code>는 각각 의사이름, 의사ID, 면허번호, 고용일자, 진료과코드, 전화번호를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>DR_NAME</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DR_ID</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>LCNS_NO</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>HIRE_YMD</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
<tr>
<td>MCDP_CD</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
<tr>
<td>TLNO</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<p><code>APPOINTMENT</code> 테이블은 다음과 같으며 <code>APNT_YMD</code>, <code>APNT_NO</code>, <code>PT_NO</code>, <code>MCDP_CD</code>, <code>MDDR_ID</code>, <code>APNT_CNCL_YN</code>, <code>APNT_CNCL_YMD</code>는 각각 진료 예약일시, 진료예약번호, 환자번호, 진료과코드, 의사ID, 예약취소여부, 예약취소날짜를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>APNT_YMD</td>
<td>TIMESTAMP</td>
<td>FALSE</td>
</tr>
<tr>
<td>APNT_NO</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PT_NO</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>MCDP_CD</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>MDDR_ID</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td>APNT_CNCL_YN</td>
<td>VARCHAR(N)</td>
<td>TRUE</td>
</tr>
<tr>
<td>APNT_CNCL_YMD</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>PATIENT</code>, <code>DOCTOR</code> 그리고 <code>APPOINTMENT</code> 테이블에서 2022년 4월 13일 취소되지 않은 흉부외과(CS) 진료 예약 내역을 조회하는 SQL문을 작성해주세요. 진료예약번호, 환자이름, 환자번호, 진료과코드, 의사이름, 진료예약일시 항목이 출력되도록 작성해주세요. 결과는 진료예약일시를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p><code>PATIENT</code> 테이블이 다음과 같고,</p>
<table class="table">
        <thead><tr>
<th>PT_NO</th>
<th>PT_NAME</th>
<th>GEND_CD</th>
<th>AGE</th>
<th>TLNO</th>
</tr>
</thead>
        <tbody><tr>
<td>PT22000019</td>
<td>바라</td>
<td>W</td>
<td>10</td>
<td>01079068799</td>
</tr>
<tr>
<td>PT22000043</td>
<td>오스왈드</td>
<td>M</td>
<td>68</td>
<td>01031294124</td>
</tr>
<tr>
<td>PT22000052</td>
<td>제니</td>
<td>W</td>
<td>60</td>
<td>NULL</td>
</tr>
<tr>
<td>PT22000071</td>
<td>몬몬</td>
<td>M</td>
<td>31</td>
<td>01076489209</td>
</tr>
<tr>
<td>PT22000097</td>
<td>슈가</td>
<td>M</td>
<td>19</td>
<td>NULL</td>
</tr>
</tbody>
      </table>
<p><code>DOCTOR</code> 테이블이 다음과 같고,</p>
<table class="table">
        <thead><tr>
<th>DR_NAME</th>
<th>DR_ID</th>
<th>LCNS_NO</th>
<th>HIRE_YMD</th>
<th>MCDP_CD</th>
<th>TLNO</th>
</tr>
</thead>
        <tbody><tr>
<td>루피</td>
<td>DR20090029</td>
<td>LC00010001</td>
<td>2009-03-01</td>
<td>CS</td>
<td>01085482011</td>
</tr>
<tr>
<td>니모</td>
<td>DR20200012</td>
<td>LC00911162</td>
<td>2020-03-01</td>
<td>CS</td>
<td>01089483921</td>
</tr>
<tr>
<td>핑크퐁</td>
<td>DR20140011</td>
<td>LC00082201</td>
<td>2014-03-01</td>
<td>NP</td>
<td>01098428957</td>
</tr>
<tr>
<td>젤라비</td>
<td>DR20160031</td>
<td>LC00340327</td>
<td>2016-11-01</td>
<td>OB</td>
<td>01023981922</td>
</tr>
<tr>
<td>토리</td>
<td>DR20190129</td>
<td>LC00099911</td>
<td>2019-03-01</td>
<td>NS</td>
<td>01058390758</td>
</tr>
</tbody>
      </table>
<p><code>APPOINTMENT</code> 테이블이 다음과 같을 때,</p>
<table class="table">
        <thead><tr>
<th>APNT_YMD</th>
<th>APNT_NO</th>
<th>PT_NO</th>
<th>MCDP_CD</th>
<th>MDDR_ID</th>
<th>APNT_CNCL_YN</th>
<th>APNT_CNCL_YMD</th>
</tr>
</thead>
        <tbody><tr>
<td>2022-04-13 12:30:00.000000</td>
<td>42</td>
<td>PT22000071</td>
<td>CS</td>
<td>DR20090029</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-04-13 15:30:00.000000</td>
<td>43</td>
<td>PT22000019</td>
<td>CS</td>
<td>DR20200012</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-04-13 09:00:00.000000</td>
<td>46</td>
<td>PT22000043</td>
<td>CS</td>
<td>DR20090029</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-07-09 11:00:00.000000</td>
<td>74</td>
<td>PT22000042</td>
<td>NP</td>
<td>DR20100011</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-12-13 12:30:00.000000</td>
<td>110</td>
<td>PT22000097</td>
<td>NP</td>
<td>DR20160011</td>
<td>Y</td>
<td>2022-12-03</td>
</tr>
</tbody>
      </table>
<p>SQL을 실행하면 다음과 같이 출력되어야 합니다.</p>
<table class="table">
        <thead><tr>
<th>APNT_NO</th>
<th>PT_NAME</th>
<th>PT_NO</th>
<th>MCDP_CD</th>
<th>DR_NAME</th>
<th>APNT_YMD</th>
</tr>
</thead>
        <tbody><tr>
<td>46</td>
<td>오스왈드</td>
<td>PT22000043</td>
<td>CS</td>
<td>루피</td>
<td>2022-04-13 09:00:00.000000</td>
</tr>
<tr>
<td>42</td>
<td>몬몬</td>
<td>PT22000071</td>
<td>CS</td>
<td>루피</td>
<td>2022-04-13 12:30:00.000000</td>
</tr>
<tr>
<td>43</td>
<td>바라</td>
<td>PT22000019</td>
<td>CS</td>
<td>니모</td>
<td>2022-04-13 15:30:00.000000</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>APPOINTMENT 테이블을 기준으로 PAITENT, DOCTOR JOIN하여 합친다.</li>
  <li>WHERE절로 흉부외과(CS)만 조회되도록 데이터를 필터링한다.</li>
  <li>WHERE절로 2022-04-13일에 진료 예약 데이터만 필터링한다.</li>
  <li>WHERE절로 취소되지 않은 여부인 APNT_CNCL_YN가 ‘N’인 데이터만 필터링한다.</li>
  <li>예약일시를 기준으로 오름차순 정렬한다.</li>
</ol>

<pre><code class="language-roomsql">SELECT A.APNT_NO,
    P.PT_NAME,
    P.PT_NO,
    A.MCDP_CD,
    D.DR_NAME,
    A.APNT_YMD
FROM APPOINTMENT A
INNER JOIN PATIENT P
ON A.PT_NO = P.PT_NO
LEFT JOIN DOCTOR D
ON A.MDDR_ID = D.DR_ID
WHERE A.MCDP_CD = 'CS'
AND A.APNT_YMD LIKE '2022-04-13%'
AND A.APNT_CNCL_YN = 'N'
ORDER BY A.APNT_YMD ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 취소되지 않은 진료 예약 조회하기]]></summary></entry><entry><title type="html">[Programmers] 주문량이 많은 아이스크림들 조회하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/18/sql-mostordericecream.html" rel="alternate" type="text/html" title="[Programmers] 주문량이 많은 아이스크림들 조회하기 (MySQL)" /><published>2023-05-18T00:00:00+09:00</published><updated>2023-05-18T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/18/sql-mostordericecream</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/18/sql-mostordericecream.html"><![CDATA[<h2 id="-문제--주문량이-많은-아이스크림들-조회하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/133027">주문량이 많은 아이스크림들 조회하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 아이스크림 가게의 상반기 주문 정보를 담은 <code>FIRST_HALF</code> 테이블과 7월의 아이스크림 주문 정보를 담은 <code>JULY</code> 테이블입니다. <code>FIRST_HALF</code> 테이블 구조는 다음과 같으며, <code>SHIPMENT_ID</code>, <code>FLAVOR</code>, <code>TOTAL_ORDER</code>는 각각 아이스크림 공장에서 아이스크림 가게까지의 출하 번호, 아이스크림 맛, 상반기 아이스크림 총주문량을 나타냅니다. <code>FIRST_HALF</code> 테이블의 기본 키는 <code>FLAVOR</code>입니다. <code>FIRST_HALF</code>테이블의 <code>SHIPMENT_ID</code>는 <code>JULY</code>테이블의 <code>SHIPMENT_ID</code>의 외래 키입니다. </p>
<table class="table">
        <thead><tr>
<th style="text-align: left">NAME</th>
<th style="text-align: left">TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">SHIPMENT_ID</td>
<td style="text-align: left">INT(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">FLAVOR</td>
<td style="text-align: left">VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">TOTAL_ORDER</td>
<td style="text-align: left">INT(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p><code>JULY</code> 테이블 구조는 다음과 같으며, <code>SHIPMENT_ID</code>, <code>FLAVOR</code>, <code>TOTAL_ORDER</code> 은 각각 아이스크림 공장에서 아이스크림 가게까지의 출하 번호, 아이스크림 맛, 7월 아이스크림 총주문량을 나타냅니다.  <code>JULY</code> 테이블의 기본 키는 <code>SHIPMENT_ID</code>입니다. <code>JULY</code>테이블의 <code>FLAVOR</code>는 <code>FIRST_HALF</code> 테이블의  <code>FLAVOR</code>의 외래 키입니다. 7월에는 아이스크림 주문량이 많아 같은 아이스크림에 대하여 서로 다른 두 공장에서 아이스크림 가게로 출하를 진행하는 경우가 있습니다. 이 경우 같은 맛의 아이스크림이라도 다른 출하 번호를 갖게 됩니다.</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">NAME</th>
<th style="text-align: left">TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">SHIPMENT_ID</td>
<td style="text-align: left">INT(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">FLAVOR</td>
<td style="text-align: left">VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">TOTAL_ORDER</td>
<td style="text-align: left">INT(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p>7월 아이스크림 총 주문량과 상반기의 아이스크림 총 주문량을 더한 값이 큰 순서대로 상위 3개의 맛을 조회하는 SQL 문을 작성해주세요. </p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>FIRST_HALF</code> 테이블이 다음과 같고</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">SHIPMENT_ID</th>
<th style="text-align: left">FLAVOR</th>
<th>TOTAL_ORDER</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">101</td>
<td style="text-align: left">chocolate</td>
<td>3200</td>
</tr>
<tr>
<td style="text-align: left">102</td>
<td style="text-align: left">vanilla</td>
<td>2800</td>
</tr>
<tr>
<td style="text-align: left">103</td>
<td style="text-align: left">mint_chocolate</td>
<td>1700</td>
</tr>
<tr>
<td style="text-align: left">104</td>
<td style="text-align: left">caramel</td>
<td>2600</td>
</tr>
<tr>
<td style="text-align: left">105</td>
<td style="text-align: left">white_chocolate</td>
<td>3100</td>
</tr>
<tr>
<td style="text-align: left">106</td>
<td style="text-align: left">peach</td>
<td>2450</td>
</tr>
<tr>
<td style="text-align: left">107</td>
<td style="text-align: left">watermelon</td>
<td>2150</td>
</tr>
<tr>
<td style="text-align: left">108</td>
<td style="text-align: left">mango</td>
<td>2900</td>
</tr>
<tr>
<td style="text-align: left">109</td>
<td style="text-align: left">strawberry</td>
<td>3100</td>
</tr>
<tr>
<td style="text-align: left">110</td>
<td style="text-align: left">melon</td>
<td>3150</td>
</tr>
<tr>
<td style="text-align: left">111</td>
<td style="text-align: left">orange</td>
<td>2900</td>
</tr>
<tr>
<td style="text-align: left">112</td>
<td style="text-align: left">pineapple</td>
<td>2900</td>
</tr>
</tbody>
      </table>
<p><code>JULY</code>테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">SHIPMENT_ID</th>
<th style="text-align: left">FLAVOR</th>
<th>TOTAL_ORDER</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">101</td>
<td style="text-align: left">chocolate</td>
<td>520</td>
</tr>
<tr>
<td style="text-align: left">102</td>
<td style="text-align: left">vanilla</td>
<td>560</td>
</tr>
<tr>
<td style="text-align: left">103</td>
<td style="text-align: left">mint_chocolate</td>
<td>400</td>
</tr>
<tr>
<td style="text-align: left">104</td>
<td style="text-align: left">caramel</td>
<td>460</td>
</tr>
<tr>
<td style="text-align: left">105</td>
<td style="text-align: left">white_chocolate</td>
<td>350</td>
</tr>
<tr>
<td style="text-align: left">106</td>
<td style="text-align: left">peach</td>
<td>500</td>
</tr>
<tr>
<td style="text-align: left">107</td>
<td style="text-align: left">watermelon</td>
<td>780</td>
</tr>
<tr>
<td style="text-align: left">108</td>
<td style="text-align: left">mango</td>
<td>790</td>
</tr>
<tr>
<td style="text-align: left">109</td>
<td style="text-align: left">strawberry</td>
<td>520</td>
</tr>
<tr>
<td style="text-align: left">110</td>
<td style="text-align: left">melon</td>
<td>400</td>
</tr>
<tr>
<td style="text-align: left">111</td>
<td style="text-align: left">orange</td>
<td>250</td>
</tr>
<tr>
<td style="text-align: left">112</td>
<td style="text-align: left">pineapple</td>
<td>200</td>
</tr>
<tr>
<td style="text-align: left">208</td>
<td style="text-align: left">mango</td>
<td>110</td>
</tr>
<tr>
<td style="text-align: left">209</td>
<td style="text-align: left">strawberry</td>
<td>220</td>
</tr>
</tbody>
      </table>
<p>7월 아이스크림 총주문량과 상반기의 아이스크림 총 주문량을 더한 값이 큰 순서대로 상위 3개의 맛을 조회하면 strawberry(520 + 220 + 3,100 = 3,840), mango(790 + 110 + 2,900 = 3,800), chocolate(520 + 3,200 = 3,720) 순입니다. 따라서 SQL 문을 실행하면 다음과 같이 나와야 합니다. </p>
<table class="table">
        <thead><tr>
<th style="text-align: left">FLAVOR</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">strawberry</td>
</tr>
<tr>
<td style="text-align: left">mango</td>
</tr>
<tr>
<td style="text-align: left">chocolate</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>JULY 테이블에는 출하번호가 다른 같은 종류의 아이스크림이 존재할 수 있다.</li>
  <li>1번을 가정해 JULY 테이블을 GROUP BY하여 총 주문량을 SUM으로 집계한다.</li>
  <li>상반기 테이블과 그룹핑한 JULY 테이블을 JOIN한다.</li>
  <li>총 주문량을 더해 내림차순 정렬한다.</li>
  <li>최상위 3개의 항목만 추려내기위해 LIMIT를 사용하여 3개의 데이터만 추출한다.</li>
</ol>

<pre><code class="language-roomsql">SELECT H.FLAVOR
FROM FIRST_HALF H
LEFT JOIN (SELECT FLAVOR,
            SUM(TOTAL_ORDER) AS TOTAL_ORDER
            FROM JULY
            GROUP BY FLAVOR) J
ON H.FLAVOR = J.FLAVOR
ORDER BY H.TOTAL_ORDER + J.TOTAL_ORDER DESC
LIMIT 3;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 주문량이 많은 아이스크림들 조회하기]]></summary></entry><entry><title type="html">[Programmers] 저자 별 카테고리 별 매출액 집계하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/17/sql-categorysell.html" rel="alternate" type="text/html" title="[Programmers] 저자 별 카테고리 별 매출액 집계하기 (MySQL)" /><published>2023-05-17T00:00:00+09:00</published><updated>2023-05-17T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/17/sql-categorysell</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/17/sql-categorysell.html"><![CDATA[<h2 id="-문제--저자-별-카테고리-별-매출액-집계하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/144856">저자 별 카테고리 별 매출액 집계하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 한 서점에서 판매중인 도서들의 도서 정보(<code>BOOK</code>), 저자 정보(<code>AUTHOR</code>) 테이블입니다.</p>

<p><code>BOOK</code> 테이블은 각 도서의 정보를 담은 테이블로 아래와 같은 구조로 되어있습니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
<th>Description</th>
</tr>
</thead>
        <tbody><tr>
<td>BOOK_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
<td>도서 ID</td>
</tr>
<tr>
<td>CATEGORY</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
<td>카테고리 (경제, 인문, 소설, 생활, 기술)</td>
</tr>
<tr>
<td>AUTHOR_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
<td>저자 ID</td>
</tr>
<tr>
<td>PRICE</td>
<td>INTEGER</td>
<td>FALSE</td>
<td>판매가 (원)</td>
</tr>
<tr>
<td>PUBLISHED_DATE</td>
<td>DATE</td>
<td>FALSE</td>
<td>출판일</td>
</tr>
</tbody>
      </table>
<p><code>AUTHOR</code> 테이블은 도서의 저자의 정보를 담은 테이블로 아래와 같은 구조로 되어있습니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
<th>Description</th>
</tr>
</thead>
        <tbody><tr>
<td>AUTHOR_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
<td>저자 ID</td>
</tr>
<tr>
<td>AUTHOR_NAME</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
<td>저자명</td>
</tr>
</tbody>
      </table>
<p><code>BOOK_SALES</code> 테이블은 각 도서의 날짜 별 판매량 정보를 담은 테이블로 아래와 같은 구조로 되어있습니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
<th>Description</th>
</tr>
</thead>
        <tbody><tr>
<td>BOOK_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
<td>도서 ID</td>
</tr>
<tr>
<td>SALES_DATE</td>
<td>DATE</td>
<td>FALSE</td>
<td>판매일</td>
</tr>
<tr>
<td>SALES</td>
<td>INTEGER</td>
<td>FALSE</td>
<td>판매량</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>2022년 1월</code>의 도서 판매 데이터를 기준으로 저자 별, 카테고리 별 매출액(<code>TOTAL_SALES = 판매량 * 판매가</code>) 을 구하여, 저자 ID(<code>AUTHOR_ID</code>), 저자명(<code>AUTHOR_NAME</code>), 카테고리(<code>CATEGORY</code>), 매출액(<code>SALES</code>) 리스트를 출력하는 SQL문을 작성해주세요. <br />
결과는 저자 ID를 오름차순으로, 저자 ID가 같다면 카테고리를 내림차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>BOOK</code> 테이블과 <code>AUTHOR</code> 테이블, <code>BOOK_SALES</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>BOOK_ID</th>
<th>CATEGORY</th>
<th>AUTHOR_ID</th>
<th>PRICE</th>
<th>PUBLISHED_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>인문</td>
<td>1</td>
<td>10000</td>
<td>2020-01-01</td>
</tr>
<tr>
<td>2</td>
<td>경제</td>
<td>1</td>
<td>9000</td>
<td>2021-02-05</td>
</tr>
<tr>
<td>3</td>
<td>경제</td>
<td>2</td>
<td>9000</td>
<td>2021-03-11</td>
</tr>
</tbody>
      </table>
<table class="table">
        <thead><tr>
<th>AUTHOR_ID</th>
<th>AUTHOR_NAME</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>홍길동</td>
</tr>
<tr>
<td>2</td>
<td>김영호</td>
</tr>
</tbody>
      </table>
<table class="table">
        <thead><tr>
<th>BOOK_ID</th>
<th>SALES_DATE</th>
<th>SALES</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>2022-01-01</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>2022-01-02</td>
<td>3</td>
</tr>
<tr>
<td>1</td>
<td>2022-01-05</td>
<td>1</td>
</tr>
<tr>
<td>2</td>
<td>2022-01-20</td>
<td>5</td>
</tr>
<tr>
<td>2</td>
<td>2022-01-21</td>
<td>6</td>
</tr>
<tr>
<td>3</td>
<td>2022-01-22</td>
<td>2</td>
</tr>
<tr>
<td>2</td>
<td>2022-02-11</td>
<td>3</td>
</tr>
</tbody>
      </table>
<p>2022년 1월의 도서 별 총 매출액은 도서 ID 가 1 인 도서가 총 3권 * 10,000원 = 30,000원, 도서 ID 가 2 인 도서가 총 14권 * 9,000 = 126,000원 이고, 도서 ID 가 3 인 도서가 총 2권 * 9,000 = 18,000원 입니다.</p>

<p>저자 별 카테고리 별로 매출액을 집계하면 결과는 다음과 같습니다.</p>
<table class="table">
        <thead><tr>
<th>AUTHOR_ID</th>
<th>AUTHOR_NAME</th>
<th>CATEGORY</th>
<th>TOTAL_SALES</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>홍길동</td>
<td>인문</td>
<td>30000</td>
</tr>
<tr>
<td>1</td>
<td>홍길동</td>
<td>경제</td>
<td>126000</td>
</tr>
<tr>
<td>2</td>
<td>김영호</td>
<td>경제</td>
<td>18000</td>
</tr>
</tbody>
      </table>
<p>그리고 저자 ID, 카테고리 순으로 내림차순 정렬하면 다음과 같이 나와야 합니다.</p>
<table class="table">
        <thead><tr>
<th>AUTHOR_ID</th>
<th>AUTHOR_NAME</th>
<th>CATEGORY</th>
<th>TOTAL_SALES</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>홍길동</td>
<td>인문</td>
<td>30000</td>
</tr>
<tr>
<td>1</td>
<td>홍길동</td>
<td>경제</td>
<td>126000</td>
</tr>
<tr>
<td>2</td>
<td>김영호</td>
<td>경제</td>
<td>18000</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>1월에 판매한 BOOK_ID 기준으로 판매수량의 총합을 테이블을 가상으로 만든다 (TOTAL_SALES)</li>
  <li>BOOK 테이블과 AUTHOR 테이블 그리고 가상으로만든 TOTAL_SALES 테이블을 JOIN한다.</li>
  <li>카테고리와 저자이름을 기준으로 GROUP BY를한다.</li>
  <li>TOTAL_SALES 컬럼은 SUM함수로 그룹핑할때 합산을 저장해준다.</li>
  <li>판매수량 총합 * 가격 = 총 가격이지만 여기에 4번을 수행하기 때문에 SUM을 붙여줘야한다.</li>
  <li>정렬은 AUTHOR_ID를 기준으로 오름차순 같으면 카테고리별로 내림차순한다.</li>
</ol>

<pre><code class="language-roomsql">
WITH TOTAL_SALES AS (
    SELECT 
        BOOK_ID,
        SUM(SALES) AS SALES
    FROM BOOK_SALES
    WHERE SALES_DATE LIKE '2022-01%'
    GROUP BY BOOK_ID
)

SELECT 
    B.AUTHOR_ID,
    A.AUTHOR_NAME,
    B.CATEGORY,
    SUM((TS.SALES * B.PRICE)) AS TOTAL_SALES
FROM BOOK B
LEFT JOIN AUTHOR A
ON B.AUTHOR_ID = A.AUTHOR_ID
LEFT JOIN TOTAL_SALES TS
ON B.BOOK_ID = TS.BOOK_ID
GROUP BY B.CATEGORY, A.AUTHOR_NAME
ORDER BY B.AUTHOR_ID ASC, B.CATEGORY DESC;
</code></pre>

<p><br /></p>

<p>WITH 명령어를 사용하지 않고  <br />
쿼리작성은 아래와 같이 해볼 수 있다.</p>

<pre><code class="language-roomsql">SELECT 
    B.AUTHOR_ID,
    A.AUTHOR_NAME,
    B.CATEGORY,
    SUM((SALES * B.PRICE)) AS TOTAL_SALES
FROM BOOK B
LEFT JOIN AUTHOR A
ON B.AUTHOR_ID = A.AUTHOR_ID
LEFT JOIN (    
    SELECT 
        BOOK_ID,
        SUM(SALES) AS SALES
    FROM BOOK_SALES
    WHERE SALES_DATE LIKE '2022-01%'
    GROUP BY BOOK_ID ) TS
ON B.BOOK_ID = TS.BOOK_ID
GROUP BY B.CATEGORY, A.AUTHOR_NAME
ORDER BY B.AUTHOR_ID ASC, B.CATEGORY DESC;
</code></pre>

<p>JOIN 절에 WITH 명령어에서 만든 가상 테이블 쿼리가 <br />
그대로 들어가있는 모습이다.</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 저자 별 카테고리 별 매출액 집계하기]]></summary></entry><entry><title type="html">[Programmers] 자동차 대여 기록 별 대여 금액 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/16/sql-carcost.html" rel="alternate" type="text/html" title="[Programmers] 자동차 대여 기록 별 대여 금액 구하기 (MySQL)" /><published>2023-05-16T00:00:00+09:00</published><updated>2023-05-16T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/16/sql-carcost</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/16/sql-carcost.html"><![CDATA[<h2 id="-문제--자동차-대여-기록-별-대여-금액-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/151141">자동차 대여 기록 별 대여 금액 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 자동차 대여 회사에서 대여 중인 자동차들의 정보를 담은 <code>CAR_RENTAL_COMPANY_CAR</code> 테이블과 자동차 대여 기록 정보를 담은 <code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블과 자동차 종류 별 대여 기간 종류 별 할인 정책 정보를 담은 <code>CAR_RENTAL_COMPANY_DISCOUNT_PLAN</code> 테이블 입니다.</p>

<p><code>CAR_RENTAL_COMPANY_CAR</code> 테이블은 아래와 같은 구조로 되어있으며, <code>CAR_ID</code>, <code>CAR_TYPE</code>, <code>DAILY_FEE</code>, <code>OPTIONS</code> 는 각각 자동차 ID, 자동차 종류, 일일 대여 요금(원), 자동차 옵션 리스트를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>CAR_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>CAR_TYPE</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DAILY_FEE</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>자동차 종류는 '세단', 'SUV', '승합차', '트럭', '리무진' 이 있습니다. 자동차 옵션 리스트는 콤마(',')로 구분된 키워드 리스트(예: ''열선시트,스마트키,주차감지센서'')로 되어있으며, 키워드 종류는 '주차감지센서', '스마트키', '네비게이션', '통풍시트', '열선시트', '후방카메라', '가죽시트' 가 있습니다.</p>

<p><code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블은 아래와 같은 구조로 되어있으며, <code>HISTORY_ID</code>, <code>CAR_ID</code>, <code>START_DATE</code>, <code>END_DATE</code> 는 각각 자동차 대여 기록 ID, 자동차 ID, 대여 시작일, 대여 종료일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>HISTORY_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>CAR_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>START_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
<tr>
<td>END_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p><code>CAR_RENTAL_COMPANY_DISCOUNT_PLAN</code> 테이블은 아래와 같은 구조로 되어있으며, <code>PLAN_ID</code>, <code>CAR_TYPE</code>, <code>DURATION_TYPE</code>, <code>DISCOUNT_RATE</code> 는 각각 요금 할인 정책 ID, 자동차 종류, 대여 기간 종류, 할인율(%)을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>PLAN_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>CAR_TYPE</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DURATION_TYPE</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DISCOUNT_RATE</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>할인율이 적용되는 대여 기간 종류로는 '7일 이상' (대여 기간이 7일 이상 30일 미만인 경우), '30일 이상' (대여 기간이 30일 이상 90일 미만인 경우), '90일 이상' (대여 기간이 90일 이상인 경우) 이 있습니다. 대여 기간이 7일 미만인 경우 할인정책이 없습니다.</p>

<hr />

<h5>문제</h5>

<p><code>CAR_RENTAL_COMPANY_CAR</code> 테이블과 <code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블과 <code>CAR_RENTAL_COMPANY_DISCOUNT_PLAN</code> 테이블에서 자동차 종류가 '트럭'인 자동차의 대여 기록에 대해서 대여 기록 별로 대여 금액(컬럼명: <code>FEE</code>)을 구하여 대여 기록 ID와 대여 금액 리스트를 출력하는 SQL문을 작성해주세요. 결과는 대여 금액을 기준으로 내림차순 정렬하고, 대여 금액이 같은 경우 대여 기록 ID를 기준으로 내림차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>CAR_RENTAL_COMPANY_CAR</code> 테이블과 <code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블과 <code>CAR_RENTAL_COMPANY_DISCOUNT_PLAN</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>CAR_ID</th>
<th>CAR_TYPE</th>
<th>DAILY_FEE</th>
<th>OPTIONS</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>트럭</td>
<td>26000</td>
<td>가죽시트,열선시트,후방카메라</td>
</tr>
<tr>
<td>2</td>
<td>SUV</td>
<td>14000</td>
<td>스마트키,네비게이션,열선시트</td>
</tr>
<tr>
<td>3</td>
<td>트럭</td>
<td>32000</td>
<td>주차감지센서,후방카메라,가죽시트</td>
</tr>
</tbody>
      </table>
<table class="table">
        <thead><tr>
<th>HISTORY_ID</th>
<th>CAR_ID</th>
<th>START_DATE</th>
<th>END_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>2022-07-27</td>
<td>2022-08-02</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>2022-08-03</td>
<td>2022-08-04</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>2022-08-05</td>
<td>2022-08-05</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>2022-08-09</td>
<td>2022-08-12</td>
</tr>
<tr>
<td>5</td>
<td>3</td>
<td>2022-09-16</td>
<td>2022-10-15</td>
</tr>
</tbody>
      </table>
<table class="table">
        <thead><tr>
<th>PLAN_ID</th>
<th>CAR_TYPE</th>
<th>DURATION_TYPE</th>
<th>DISCOUNT_RATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>트럭</td>
<td>7일 이상</td>
<td>5%</td>
</tr>
<tr>
<td>2</td>
<td>트럭</td>
<td>30일 이상</td>
<td>7%</td>
</tr>
<tr>
<td>3</td>
<td>트럭</td>
<td>90일 이상</td>
<td>10%</td>
</tr>
<tr>
<td>4</td>
<td>세단</td>
<td>7일 이상</td>
<td>5%</td>
</tr>
<tr>
<td>5</td>
<td>세단</td>
<td>30일 이상</td>
<td>10%</td>
</tr>
<tr>
<td>6</td>
<td>세단</td>
<td>90일 이상</td>
<td>15%</td>
</tr>
</tbody>
      </table>
<p>자동차 종류가 '트럭' 인 자동차의 대여 기록에 대해서 대여 기간을 구하면,</p>

<ul>
<li>대여 기록 ID가 1인 경우, 7일</li>
<li>대여 기록 ID가 2인 경우, 2일</li>
<li>대여 기록 ID가 5인 경우, 30일입니다.</li>
</ul>

<p>대여 기간 별로 일일 대여 요금에 알맞은 할인율을 곱하여 금액을 구하면 다음과 같습니다.</p>

<ul>
<li>대여 기록 ID가 1인 경우, 일일 대여 금액 26,000원에서 5% 할인율을 적용하고 7일을 곱하면 총 대여 금액은 172,900원</li>
<li>대여 기록 ID가 2인 경우, 일일 대여 금액 26,000원에 2일을 곱하면 총 대여 금액은 52,000원</li>
<li>대여 기록 ID가 5인 경우, 일일 대여 금액 32,000원에서 7% 할인율을 적용하고 30일을 곱하면 총 대여 금액은 892,800원이 되므로, 대여 금액을 기준으로 내림차순 정렬 및 대여 기록 ID를 기준으로 내림차순 정렬하면 다음과 같아야 합니다.</li>
</ul>
<table class="table">
        <thead><tr>
<th>HISTORY_ID</th>
<th>FEE</th>
</tr>
</thead>
        <tbody><tr>
<td>5</td>
<td>892800</td>
</tr>
<tr>
<td>1</td>
<td>172900</td>
</tr>
<tr>
<td>2</td>
<td>52000</td>
</tr>
</tbody>
      </table>
<hr />

<h5>주의사항</h5>

<p><code>FEE</code>의 경우 예시처럼 정수부분만 출력되어야 합니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>(일수 * 할인율 * 대여금액) = FEE 라고 할 수 있다.</li>
  <li>CASE문을 이용하여 트럭의 type별 할인율을 구할 수 있다.</li>
  <li>7일미만 = 할인 없음 / 7일이상 ~ 30일미만 = 5% / 30일이상 ~ 90일미만 = 8% / 90일 이상  = 15%</li>
  <li>3번의 할인율 비율은 CAR_RENTAL_COMPANY_DISCOUNT_PLAN 테이블을 조회해서알아낸 값이다. (즉, JOIN을 하지않고 알고있는 값으로 고정해서 적어주었다.)</li>
  <li>LEFT JOIN으로 대여기록 테이블과 자동차정보 테이블을 조인한다.</li>
  <li>WHERE절을 이용해 트럭으로만된 데이터를 필터링한다.</li>
  <li>ORDER절을 이용해 FEE계산별로 내림차순, 같으면 HISTORY_ID 내림차순으로 정렬한다.</li>
</ol>

<pre><code class="language-roomsql">SELECT CH.HISTORY_ID,
       ROUND((DATEDIFF(CH.END_DATE,CH.START_DATE)+1) *
        (CASE
            WHEN DATEDIFF(CH.END_DATE,CH.START_DATE)+1 &lt; 7 THEN 1
            WHEN DATEDIFF(CH.END_DATE,CH.START_DATE)+1 &lt; 30 THEN 0.95
            WHEN DATEDIFF(CH.END_DATE,CH.START_DATE)+1 &lt; 90 THEN 0.92
            ELSE 0.85
         END) * CC.DAILY_FEE, 0) AS FEE
FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY CH
LEFT JOIN CAR_RENTAL_COMPANY_CAR CC
ON CH.CAR_ID = CC.CAR_ID
WHERE CC.CAR_TYPE = '트럭'
ORDER BY FEE DESC, CH.HISTORY_ID DESC;
</code></pre>

<p><br /></p>

<p>풀이방법은 위와 같이 할인율을 알고있는 상태에서 작업하였다. <br />
할인율은 아래와 같이 테이블을 조회해보면</p>
<pre><code class="language-roomsql">SELECT *
FROM CAR_RENTAL_COMPANY_DISCOUNT_PLAN;
</code></pre>

<table class="console-sql-result"><thead><tr><th>plan_id</th><th>car_type</th><th>duration_type</th><th>discount_rate</th></tr></thead><thead></thead><tbody><tr><td>1</td><td>세단</td><td>7일 이상</td><td>5</td></tr><tr><td>2</td><td>세단</td><td>30일 이상</td><td>8</td></tr><tr><td>3</td><td>세단</td><td>90일 이상</td><td>12</td></tr><tr><td>4</td><td>SUV</td><td>7일 이상</td><td>3</td></tr><tr><td>5</td><td>SUV</td><td>30일 이상</td><td>5</td></tr><tr><td>6</td><td>SUV</td><td>90일 이상</td><td>10</td></tr><tr><td>7</td><td>승합차</td><td>7일 이상</td><td>5</td></tr><tr><td>8</td><td>승합차</td><td>30일 이상</td><td>10</td></tr><tr><td>9</td><td>승합차</td><td>90일 이상</td><td>15</td></tr><tr><td>10</td><td>트럭</td><td>7일 이상</td><td>5</td></tr><tr><td>11</td><td>트럭</td><td>30일 이상</td><td>8</td></tr><tr><td>12</td><td>트럭</td><td>90일 이상</td><td>15</td></tr><tr><td>13</td><td>리무진</td><td>7일 이상</td><td>4</td></tr><tr><td>14</td><td>리무진</td><td>30일 이상</td><td>8</td></tr><tr><td>15</td><td>리무진</td><td>90일 이상</td><td>20</td></tr></tbody></table>

<p>트럭의 할인율이 5%, 8%, 15%로 알 수 있다. <br />
위와 같은 방법으로는 해당테이블을 참조하지 않기때문에 <br />
추후에 요구사항 변동이생긴다거나할때 대응하기 어려울 것 같다는 생각이들고 <br />
그닥 좋은 방법이 아닌 것 같다.</p>

<p><br /></p>

<p>만약 참조해서 풀어보자면 WITH 문법을 이용해 가상테이블을 <br />
만들어 작업하는 방식도 있다.</p>

<pre><code class="language-roomsql">WITH SUB_DISCOUNT AS (
    SELECT
        HISTORY_ID,
        CAR_TYPE,
        DAILY_FEE*(DATEDIFF(END_DATE,START_DATE)+1) AS TOTAL_DAILY_FEE,
        CASE
        WHEN DATEDIFF(END_DATE,START_DATE)+1 &lt; 7 THEN '할인없음'
        WHEN DATEDIFF(END_DATE,START_DATE)+1 &gt;= 7 AND DATEDIFF(END_DATE,START_DATE)+1 &lt; 30 THEN '7일 이상'
        WHEN DATEDIFF(END_DATE,START_DATE)+1 &gt;= 30 AND DATEDIFF(END_DATE,START_DATE)+1 &lt; 90 THEN '30일 이상'
        WHEN DATEDIFF(END_DATE,START_DATE)+1 &gt;= 90 THEN '90일 이상'
        END DURATION_TYPE  
    FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY AS CH
    LEFT JOIN CAR_RENTAL_COMPANY_CAR AS CC
    ON CH.CAR_ID = CC.CAR_ID
    WHERE CAR_TYPE = '트럭'
)

SELECT 
    SD.HISTORY_ID,
    ROUND(SD.TOTAL_DAILY_FEE * (100-IF(CP.DISCOUNT_RATE IS NULL,0,CP.DISCOUNT_RATE))*0.01) AS FEE
FROM SUB_DISCOUNT AS SD
LEFT JOIN CAR_RENTAL_COMPANY_DISCOUNT_PLAN AS CP
ON SD.CAR_TYPE = CP.CAR_TYPE AND SD.DURATION_TYPE = CP.DURATION_TYPE
ORDER BY FEE DESC, CH.HISTORY_ID DESC;
</code></pre>
<p>와 같은 방법으로 가상의 테이블(SUB_DISCOUNT)를 만들어  <br />
원하는 정보의 테이블만 추출한다음 <br />
해당 정보를 이용하는 방법으로 쿼리를 작성해볼 수 있을 것이다.</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 자동차 대여 기록 별 대여 금액 구하기]]></summary></entry><entry><title type="html">[Programmers] 특정 기간동안 대여 가능한 자동차들의 대여비용 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/05/15/sql-rentcost.html" rel="alternate" type="text/html" title="[Programmers] 특정 기간동안 대여 가능한 자동차들의 대여비용 구하기 (MySQL)" /><published>2023-05-15T00:00:00+09:00</published><updated>2023-05-15T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/05/15/sql-rentcost</id><content type="html" xml:base="http://localhost:4000/sql/2023/05/15/sql-rentcost.html"><![CDATA[<h2 id="-문제--특정-기간동안-대여-가능한-자동차들의-대여비용-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/157339">특정 기간동안 대여 가능한 자동차들의 대여비용 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 자동차 대여 회사에서 대여 중인 자동차들의 정보를 담은 <code>CAR_RENTAL_COMPANY_CAR</code> 테이블과 자동차 대여 기록 정보를 담은 <code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블과 자동차 종류 별 대여 기간 종류 별 할인 정책 정보를 담은 <code>CAR_RENTAL_COMPANY_DISCOUNT_PLAN</code> 테이블 입니다.</p>

<p><code>CAR_RENTAL_COMPANY_CAR</code> 테이블은 아래와 같은 구조로 되어있으며, <code>CAR_ID</code>, <code>CAR_TYPE</code>, <code>DAILY_FEE</code>, <code>OPTIONS</code> 는 각각 자동차 ID, 자동차 종류, 일일 대여 요금(원), 자동차 옵션 리스트를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>CAR_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>CAR_TYPE</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DAILY_FEE</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>자동차 종류는 '세단', 'SUV', '승합차', '트럭', '리무진' 이 있습니다. 자동차 옵션 리스트는 콤마(',')로 구분된 키워드 리스트(예: ''열선시트,스마트키,주차감지센서'')로 되어있으며, 키워드 종류는 '주차감지센서', '스마트키', '네비게이션', '통풍시트', '열선시트', '후방카메라', '가죽시트' 가 있습니다.</p>

<p><code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블은 아래와 같은 구조로 되어있으며, <code>HISTORY_ID</code>, <code>CAR_ID</code>, <code>START_DATE</code>, <code>END_DATE</code> 는 각각 자동차 대여 기록 ID, 자동차 ID, 대여 시작일, 대여 종료일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>HISTORY_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>CAR_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>START_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
<tr>
<td>END_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p><code>CAR_RENTAL_COMPANY_DISCOUNT_PLAN</code> 테이블은 아래와 같은 구조로 되어있으며, <code>PLAN_ID</code>, <code>CAR_TYPE</code>, <code>DURATION_TYPE</code>, <code>DISCOUNT_RATE</code> 는 각각 요금 할인 정책 ID, 자동차 종류, 대여 기간 종류, 할인율(%)을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>PLAN_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>CAR_TYPE</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DURATION_TYPE</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DISCOUNT_RATE</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>할인율이 적용되는 대여 기간 종류로는 '7일 이상' (대여 기간이 7일 이상 30일 미만인 경우), '30일 이상' (대여 기간이 30일 이상 90일 미만인 경우), '90일 이상' (대여 기간이 90일 이상인 경우) 이 있습니다. 대여 기간이 7일 미만인 경우 할인정책이 없습니다.</p>

<hr />

<h5>문제</h5>

<p><code>CAR_RENTAL_COMPANY_CAR</code> 테이블과 <code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블과 <code>CAR_RENTAL_COMPANY_DISCOUNT_PLAN</code> 테이블에서 자동차 종류가 '세단' 또는 'SUV' 인 자동차 중 2022년 11월 1일부터 2022년 11월 30일까지 대여 가능하고 30일간의 대여 금액이 50만원 이상 200만원 미만인 자동차에 대해서 자동차 ID, 자동차 종류, 대여 금액(컬럼명: <code>FEE</code>) 리스트를 출력하는 SQL문을 작성해주세요. 결과는 대여 금액을 기준으로 내림차순 정렬하고, 대여 금액이 같은 경우 자동차 종류를 기준으로 오름차순 정렬, 자동차 종류까지 같은 경우 자동차 ID를 기준으로 내림차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>CAR_RENTAL_COMPANY_CAR</code> 테이블과 <code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블과 <code>CAR_RENTAL_COMPANY_DISCOUNT_PLAN</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>CAR_ID</th>
<th>CAR_TYPE</th>
<th>DAILY_FEE</th>
<th>OPTIONS</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>SUV</td>
<td>25000</td>
<td>가죽시트,열선시트,후방카메라</td>
</tr>
<tr>
<td>2</td>
<td>세단</td>
<td>14000</td>
<td>스마트키,네비게이션,열선시트</td>
</tr>
<tr>
<td>3</td>
<td>트럭</td>
<td>32000</td>
<td>주차감지센서,후방카메라,가죽시트</td>
</tr>
<tr>
<td>4</td>
<td>세단</td>
<td>12000</td>
<td>열선시트,후방카메라</td>
</tr>
<tr>
<td>5</td>
<td>세단</td>
<td>22000</td>
<td>스마트키,주차감지센서</td>
</tr>
</tbody>
      </table>
<table class="table">
        <thead><tr>
<th>HISTORY_ID</th>
<th>CAR_ID</th>
<th>START_DATE</th>
<th>END_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>2022-08-27</td>
<td>2022-09-02</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>2022-10-03</td>
<td>2022-10-04</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>2022-10-05</td>
<td>2022-10-20</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>2022-10-10</td>
<td>2022-11-12</td>
</tr>
<tr>
<td>5</td>
<td>3</td>
<td>2022-10-16</td>
<td>2022-10-17</td>
</tr>
</tbody>
      </table>
<table class="table">
        <thead><tr>
<th>PLAN_ID</th>
<th>CAR_TYPE</th>
<th>DURATION_TYPE</th>
<th>DISCOUNT_RATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>트럭</td>
<td>7일 이상</td>
<td>5%</td>
</tr>
<tr>
<td>2</td>
<td>트럭</td>
<td>30일 이상</td>
<td>7%</td>
</tr>
<tr>
<td>3</td>
<td>트럭</td>
<td>90일 이상</td>
<td>10%</td>
</tr>
<tr>
<td>4</td>
<td>세단</td>
<td>7일 이상</td>
<td>5%</td>
</tr>
<tr>
<td>5</td>
<td>세단</td>
<td>30일 이상</td>
<td>10%</td>
</tr>
<tr>
<td>6</td>
<td>세단</td>
<td>90일 이상</td>
<td>15%</td>
</tr>
<tr>
<td>7</td>
<td>SUV</td>
<td>7일 이상</td>
<td>3%</td>
</tr>
<tr>
<td>8</td>
<td>SUV</td>
<td>30일 이상</td>
<td>8%</td>
</tr>
<tr>
<td>9</td>
<td>SUV</td>
<td>90일 이상</td>
<td>12%</td>
</tr>
</tbody>
      </table>
<p>자동차 종류가 '세단' 또는 'SUV' 인 자동차 중 2022년 11월 1일 부터 2022년 11월 30일까지 대여가능한 자동차는 자동차 ID가 1, 4, 5인 자동차입니다.</p>

<p>일일 대여 요금에 자동차 종류 별 대여기간이 30일 이상인 경우의 할인율을 적용하여 30일간의 대여 금액을 구하면,</p>

<ul>
<li>자동차 ID가 1인 경우, 일일 대여 금액 25,000원에서 8% 할인율을 적용하고 30일을 곱하면 총 대여 금액은 690,000원</li>
<li>자동차 ID가 4인 경우, 일일 대여 금액 12,000원에서 10% 할인율을 적용하고 30일을 곱하면 총 대여 금액은 324,000원</li>
<li>자동차 ID가 5인 경우, 일일 대여 금액 22,000원에서 10% 할인율을 적용하고 30일을 곱하면 총 대여 금액은 621,000원이고, 대여 금액이 50만원 이상 200만원 미만인 경우에 대해서 대여 금액을 기준으로 내림차순, 자동차 종류를 기준으로 오름차순 및 자동차 ID를 기준으로 내림차순 정렬하면 다음과 같아야 합니다.</li>
</ul>
<table class="table">
        <thead><tr>
<th>CAR_ID</th>
<th>CAR_TYPE</th>
<th>FEE</th>
</tr>
</thead>
        <tbody><tr>
<td>5</td>
<td>세단</td>
<td>690000</td>
</tr>
<tr>
<td>1</td>
<td>SUV</td>
<td>621000</td>
</tr>
</tbody>
      </table>
<hr />

<h5>주의사항</h5>

<p><code>FEE</code>의 경우 예시처럼 정수부분만 출력되어야 합니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>LEFT JOIN을 통한 CAR 테이블과 DISCOUNT PLAN 테이블을 조인한다.</li>
  <li>WHERE절을 이용한 조건문 필터링 한다 <br />
 1). 세단, SUV만 필터링<br />
 2). START_DATE, END_DATE 날짜가 2022-11-01 ~ 2022-11-30 안에 존재하면 필터링<br />
 3). 30일 이상으로된 할인정책을 사용하기위해 필터링</li>
  <li>HAVING절을 이용해 계산완료된 FEE값에 50만원이상 ~ 200만원 미만 범위로 필터링한다.</li>
  <li>마지막으로 FEE를 내림차순 같으면 종류를 오름차순으로 같으면 ID를 내림차순으로 정렬한다.</li>
</ol>

<pre><code class="language-roomsql">SELECT c.CAR_ID,
    c.CAR_TYPE,
    (c.DAILY_FEE - ROUND(c.DAILY_FEE / 100 * p.DISCOUNT_RATE)) * 30 AS FEE
FROM CAR_RENTAL_COMPANY_CAR c
LEFT JOIN CAR_RENTAL_COMPANY_DISCOUNT_PLAN p
    ON c.CAR_TYPE = p.CAR_TYPE 
WHERE c.CAR_TYPE IN ('세단','SUV') 
    AND c.CAR_ID NOT IN (
        SELECT CAR_ID
        FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY
        WHERE END_DATE &gt;= '2022-11-01' AND START_DATE &lt;= '2022-11-30'
    )
    AND p.DURATION_TYPE = '30일 이상'
HAVING FEE &gt;= 500000 AND FEE &lt; 2000000
ORDER BY FEE DESC, c.CAR_TYPE ASC, c.CAR_ID DESC;
</code></pre>

<p>풀면서 느낀점은 <code class="language-plaintext highlighter-rouge">CAR_RENTAL_COMPANY_RENTAL_HISTORY</code>를 조인해서 풀려고 했지만 <br />
사실상 날짜를 확인하여 필터링만하면 되기때문에 JOIN을 하지 않아도 되었다는 점.</p>

<p>서브쿼리를 사용한다는 발상이 자꾸 안떠오르는게 문제풀이하는데 조금 시간을 더 소요하는 것 같다. <br />
또한 WHERE절과 HAVING절의 차이를 이번 문제로 이해가 좀더 된 것 같다.</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 특정 기간동안 대여 가능한 자동차들의 대여비용 구하기]]></summary></entry></feed>