<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-15T21:38:18+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LeeJellan</title><subtitle>안녕하세요!🙂 IT,여행,기타 등 기록을 남기기위한 블로그 입니다 !</subtitle><author><name>LEE JAEHYEOK</name></author><entry><title type="html">Spring) AWS S3 FileUpload 하여 URL로 관리하기</title><link href="http://localhost:4000/spring/2023/01/15/spring-fileupload.html" rel="alternate" type="text/html" title="Spring) AWS S3 FileUpload 하여 URL로 관리하기" /><published>2023-01-15T00:00:00+09:00</published><updated>2023-01-15T00:00:00+09:00</updated><id>http://localhost:4000/spring/2023/01/15/spring-fileupload</id><content type="html" xml:base="http://localhost:4000/spring/2023/01/15/spring-fileupload.html"><![CDATA[<p>오늘은 AWS S3에 파일 업로드를 하는<br />
예제를 다뤄보려한다.</p>

<p>구글에서 여러가지 블로그를 돌아다니며 학습했고<br />
순서와 코드에 대해 정리해보려한다. <br />
내가 작성한 코드는 <a href="https://github.com/MyCatlikesChuru/ImageFileUpload">GitHub 레포지토리</a>로 공유해본다.</p>

<p><br /></p>

<h3 id="-작업-환경">✅ 작업 환경</h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AWS S3 버킷
Spring Boot 2.7.7  
Java 11 
macOs Monterey 12.6 버전 
로컬환경에서 테스트 진행
</code></pre></div></div>

<p><br /></p>

<h3 id="-작업-순서-및-준비">📌 작업 순서 및 준비</h3>

<p>내가 구상하려고 생각하는 아키텍처를 그려보았다.<br />
순서를 간단히 짚고 넘어가자</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212537839-f1ebee39-3c06-449e-b3f0-359bb3c3d1c6.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>1). 클라이언트에서 이미지파일을 업로드 요청<br />
-&gt; multipart/form-data 타입으로 요청<br />
-&gt; Key=file / value=이미지 형태로 요청을 보냄</p>

<p>2). 요청을 받은 서버에서 파일을 AWS S3 버킷에 저장함.<br />
-&gt; 전달 받은 파일을 AWS 저장소에 원하는 폴더에 저장함.<br />
-&gt; 저장완료후 DataBase에 URL을 저장함.</p>

<p>3). 저장이 정상적으로 처리되었다고 클라이언트에 응답함.<br />
-&gt; 만약 저장에 실패 및 예외가 발생했을 때는 예외처리하여 응답해줌</p>

<p>❗️코드가 길어질 것을 우려해 DB에 저장하는 과정은 생략합니다!<br />
AWS S3에 저장되고 URL을 추출하는 과정만 담으려합니다.</p>

<p><br /></p>

<h3 id="-aws-s3-생성">📌 AWS S3 생성</h3>

<p>첫번째로 해야할 것이 S3 버킷을 생성해야한다. <br />
여러가지 글을 참고해보면 쉽게 만들 수 있을 것이다. <br />
그래도 이러한 과정을 적어보려한다.</p>

<p>나와 같은 경우는 프리티어 계정이 있기에 무료로 만들어 사용했다. <br />
무료 기준에 넘어가지만 않게 잘 사용하면 무리는 없을 것 같다.</p>

<p>본격적으로 만들어보자</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538169-ec74cc60-1060-40d0-8e44-df280f9571dc.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>버킷 이름과 리전을 선택해주자.<br />
한국에 있기때문에 서울리전을 선택했다.</p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538230-331609e3-66e3-4d2d-8f55-aa7cb22b4792.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>우선 엑세스 차단의 체크박스는 해제시켜두었고<br />
이에따라 아래 경고문구가 뜬다. 해당부분을 체크해줘야<br />
버킷을 만들 수 있다.</p>

<p>이미지를 클라이언트에 공용으로 사용할 것이기 때문에 <br />
우선은 퍼블릭 액세서를 차단하지 않았다.</p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538236-33952455-c626-4cad-99df-69af51b0ecf2.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538244-c3dbfff3-1865-4a8f-9b49-1874cd5ca7c0.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>이외 설정은 기본으로 두고 버킷 생성을 진행하면 <br />
버킷이 만들어진 것을 볼 수 있다.</p>

<p>해당 버킷에서 폴더를 만들어 관리를 할 수 있다.<br />
나는 프로필사진을 모아놓는 폴더에 <br />
이미지 업로드한 파일을 관리하려한다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538533-35027900-bebf-458b-b258-bd28fe7a5025.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>버킷에서 폴더 만들기를 눌러 만들어 줄 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538576-c6629514-ad7d-406f-9c39-3b9ce24562e8.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>만들게될 경우 위와 같은 폴더가 생기는 것을 볼 수 있다. <br />
최종적으로 위에 폴더에 이미지를 올려볼 예정이다.</p>

<p><br /></p>

<h3 id="-iam-설정">📌 IAM 설정</h3>

<p>IAM -&gt; 엑세스 관리 -&gt; 사용자 -&gt; 사용자 추가를 눌러 줍니다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538540-44bf93ef-9803-4f48-9f86-827a3d36f4fe.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>사용자이름을 원하는대로 설정하고 <br />
엑세스 키 체크 박스를 체크한다.</p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538545-cdcaad32-3f64-4a44-b73d-6c534338cb6b.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>다음으로 넘어가 기존 정책 직접 연결에서<br />
<code class="language-plaintext highlighter-rouge">AmazonS3FullAcess</code>를 추가해준다.</p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538553-619d2f40-f900-4376-a9f7-c79633571007.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>다음을 눌러 넘어가준다.</p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538556-b8fff09d-fe94-4dc2-bdfc-58f3625efee0.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>사용자 만들기 추가</p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538557-7d71c867-db35-4be6-bd34-a1b9fc4a99e9.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>지정한 사용자이름으로 엑세스 키ID와 비밀 엑세스 키가 발급된다. <br />
이 두가지가 중요하다. 후에 연결할때 사용되니 따로 저장해두자</p>

<p>이 키는 절대로 Github에 올리거나 공유되면 안되는 키값이니 <br />
주의해서 관리하도록 하자</p>

<p><br /></p>

<p><img src="https://user-images.githubusercontent.com/95069395/212538560-2247c35c-3d06-46c3-b4ef-215f9e8ca6ac.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>최종적으로 IAM 사용자가 만들어진 것을 확인할 수 있다. <br />
해당 키값으로 S3에 접근이 가능해졌고 <br />
이제 코드를 작성해 이미지를 올려보도록 하자</p>

<p><br /></p>

<h3 id="-코드-작성">📌 코드 작성</h3>

<h4 id="-기본-셋팅">🛠 기본 셋팅</h4>

<p><code class="language-plaintext highlighter-rouge">application.yml</code> 을 설정해주자</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">servlet</span><span class="pi">:</span>
    <span class="na">multipart</span><span class="pi">:</span>
      <span class="na">max-file-size</span><span class="pi">:</span> <span class="s">10MB</span>
      <span class="na">max-request-size</span><span class="pi">:</span> <span class="s">10MB</span>
<span class="na">cloud</span><span class="pi">:</span>
  <span class="na">aws</span><span class="pi">:</span>
    <span class="na">credentials</span><span class="pi">:</span>
      <span class="na">access-key</span><span class="pi">:</span> <span class="s">${S3_ACCESS_KEY}</span>
      <span class="na">secret-key</span><span class="pi">:</span> <span class="s">${S3_SECRET_KEY}</span>
    <span class="na">s3</span><span class="pi">:</span>
      <span class="na">bucket</span><span class="pi">:</span> <span class="s">indiego-fileupload/profileimage</span>
    <span class="na">region</span><span class="pi">:</span>
      <span class="na">static</span><span class="pi">:</span> <span class="s">ap-northeast-2</span>
    <span class="na">stack</span><span class="pi">:</span>
      <span class="na">auto</span><span class="pi">:</span> <span class="no">false</span>
</code></pre></div></div>

<p>처음으로는 servlet의 multipart 용량 사이즈를 지정해주었다. <br />
10MB 이상을 넘지못하도록 지정했고, 넘은 파일이 올 경우에<br />
예외처리는 가장 맨 아래에서 알아보자</p>

<p>위에서 S3 설정했던 것과 같이 <br />
region은 서울(ap-northeast-2)로 지정<br />
bucket은 나의 버킷이름인 indiego-fileupload에 <br />
폴더 경로인 /profileimage를 붙여주었다.</p>

<p>그리고 acees-key, secret-key에 대한 설정은 <br />
환경변수로 사용할 수 있고 지정해두었다. 각자 환경에 맞게<br />
값을 환경변수에 넣고 사용하거나 하드코딩으로 해두어도된다.(깃에올리지만 말것..)</p>

<p><br /></p>

<p>그리고 build.gradle을 설정해주자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">cloud</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">cloud</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="nl">aws:</span><span class="mf">2.2</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="na">RELEASE</span><span class="err">'</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음으로는<br />
AmazonS3Config 클래스를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AmazonS3Config</span> <span class="o">{</span>
    
	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${cloud.aws.credentials.access-key}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">accessKey</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${cloud.aws.credentials.secret-key}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">secretKey</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${cloud.aws.region.static}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">region</span><span class="o">;</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">AmazonS3Client</span> <span class="nf">amazonS3Client</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">BasicAWSCredentials</span> <span class="n">awsCreds</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BasicAWSCredentials</span><span class="o">(</span><span class="n">accessKey</span><span class="o">,</span> <span class="n">secretKey</span><span class="o">);</span>
		<span class="k">return</span> <span class="o">(</span><span class="nc">AmazonS3Client</span><span class="o">)</span> <span class="nc">AmazonS3ClientBuilder</span><span class="o">.</span><span class="na">standard</span><span class="o">()</span>
			<span class="o">.</span><span class="na">withRegion</span><span class="o">(</span><span class="n">region</span><span class="o">)</span>
			<span class="o">.</span><span class="na">withCredentials</span><span class="o">(</span><span class="k">new</span> <span class="nc">AWSStaticCredentialsProvider</span><span class="o">(</span><span class="n">awsCreds</span><span class="o">))</span>
			<span class="o">.</span><span class="na">build</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">AmazonS3Client</code>타입으로 빈을 만들어 주었다. <br />
이용된 정보는 환경변수에 설정했던 값들이 이용되었다.
이렇게까지만 설정해놓고 스프링 부트가 잘 실행되는지 확인해보자</p>

<p><br /></p>

<h4 id="-문제발생-처리">🐞 문제발생 처리</h4>

<p>실행중 여러가지 예외들을 만나게 될 수 있다. <br />
내가 만든 예외들의 해결방법을 적어본다.</p>

<p><strong>1). AmazonClientException 문제</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">com</span><span class="o">.</span><span class="na">amazonaws</span><span class="o">.</span><span class="na">AmazonClientException</span><span class="o">:</span> <span class="no">EC2</span> <span class="nc">Instance</span> <span class="nc">Metadata</span> <span class="nc">Service</span> <span class="n">is</span> <span class="n">disabled</span>
</code></pre></div></div>

<p>위와 같은 예외가 콘솔에 찍혀있었다.<br />
<a href="https://h-kkaemi.tistory.com/24">AmazonClientException 참고 레퍼런스</a>를 참고해서 해결해보았다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212529483-83bdd3c5-1ec1-499e-a7b9-9e4d4143866b.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>첫번째로 구성편집에서  VM Option을 추가해<br />
<code class="language-plaintext highlighter-rouge">-Dcom.amazonaws.sdk.disableEc2Metadata=true</code>를 추가해주었다.</p>

<p>그리고 yml 파일 로깅 설정을</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">logging</span><span class="pi">:</span>
  <span class="na">level</span><span class="pi">:</span>
    <span class="na">com</span><span class="pi">:</span>
      <span class="na">amazonaws</span><span class="pi">:</span>
        <span class="na">util</span><span class="pi">:</span>
          <span class="na">EC2MetadataUtils</span><span class="pi">:</span> <span class="s">error</span>
</code></pre></div></div>

<p>위와 같이 설정해준다면, 더이상 오류 메세지는 보이지 않을 것이다.</p>

<p><br /></p>

<p><strong>2). AmazonS3Exception 문제</strong></p>

<p>이번에 발생한 문제는 버킷에서 ACLs를 허용하지<br />
않았다는 문구가 출력외었다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>com.amazonaws.services.s3.model.AmazonS3Exception: The bucket does not allow ACLs
</code></pre></div></div>

<p>해당 문제도 AWS S3 버킷의</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212529451-bd253a0e-7033-44a9-9749-8704c9223db3.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>ACL을 활성화시켜두었더니 해결되었다.</p>

<p><br /></p>

<h4 id="-코드-작성-1">🛠 코드 작성</h4>

<p>첫번째로 Controller를 작성해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">com.image.fileupload.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.image.fileupload.service.AwsS3Service</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.image.fileupload.service.ImageUploadService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.RequiredArgsConstructor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.ResponseEntity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.multipart.MultipartFile</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>

<span class="nd">@Slf4j</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/upload"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UploadController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ImageUploadService</span> <span class="n">awsS3Service</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UploadController</span><span class="o">(</span><span class="nc">AwsS3Service</span> <span class="n">awsS3Service</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">awsS3Service</span> <span class="o">=</span> <span class="n">awsS3Service</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">saveImage</span><span class="o">(</span><span class="nd">@RequestParam</span> <span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">){</span>

        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"multipartFile = {}"</span><span class="o">,</span> <span class="n">file</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">url</span> <span class="o">=</span> <span class="n">awsS3Service</span><span class="o">.</span><span class="na">StoreImage</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"url = {}"</span><span class="o">,</span><span class="n">url</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">url</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>사이사이에 로그로 값을 확인할 수 있도록 찍어두었다. <br />
key = file / value = 이미지 로 받아오는 방법이다.<br />
Spring에서는 MultipartFile 형식으로 받아올 수 있다. <br />
물론 HttpServletReqeust에서도 꺼내올 수 있다.</p>

<p>여기서 MutipartFile 타입으로 받아온 file 객체를 로그로 찍어보면<br />
<code class="language-plaintext highlighter-rouge">StandardMultipartFile@57413913</code>와 같은 형태로 오는게 확인이 가능하다.</p>

<p><br /></p>

<p>이제 서비스 로직을 작성해보자 <br />
AWS S3 외에 다른 저장소를 사용할 수 있게에 <br />
인터페이스를 하나 만들었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ImageUploadService</span> <span class="o">{</span>
	<span class="nc">String</span> <span class="nf">StoreImage</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">img</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>해당 인터페이스를 구현체로 <br />
AwsS3Service 클래스를 만들었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AwsS3Service</span> <span class="kd">implements</span> <span class="nc">ImageUploadService</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">AmazonS3</span> <span class="n">amazonS3</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${cloud.aws.s3.bucket}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">bucketName</span><span class="o">;</span>

	<span class="kd">public</span> <span class="nc">String</span> <span class="nf">StoreImage</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">file</span><span class="o">)</span> <span class="o">{</span>
		<span class="n">validateFileExists</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
		<span class="nc">String</span> <span class="n">originalFilename</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">getOriginalFilename</span><span class="o">();</span>
		<span class="nc">String</span> <span class="n">storeFileName</span> <span class="o">=</span> <span class="n">createStoreFileName</span><span class="o">(</span><span class="n">originalFilename</span><span class="o">);</span>

		<span class="k">try</span> <span class="o">(</span><span class="nc">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">())</span> <span class="o">{</span>
			<span class="n">amazonS3</span><span class="o">.</span><span class="na">putObject</span><span class="o">(</span><span class="k">new</span> <span class="nc">PutObjectRequest</span><span class="o">(</span><span class="n">bucketName</span><span class="o">,</span> <span class="n">storeFileName</span><span class="o">,</span> <span class="n">inputStream</span><span class="o">,</span> <span class="kc">null</span><span class="o">)</span>
				<span class="o">.</span><span class="na">withCannedAcl</span><span class="o">(</span><span class="nc">CannedAccessControlList</span><span class="o">.</span><span class="na">PublicRead</span><span class="o">));</span>
		<span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
		<span class="o">}</span>

		<span class="k">return</span> <span class="n">amazonS3</span><span class="o">.</span><span class="na">getUrl</span><span class="o">(</span><span class="n">bucketName</span><span class="o">,</span> <span class="n">storeFileName</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kt">void</span> <span class="nf">validateFileExists</span><span class="o">(</span><span class="nc">MultipartFile</span> <span class="n">multipartFile</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">if</span> <span class="o">(</span><span class="n">multipartFile</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
			<span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">();</span>
		<span class="o">}</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">createStoreFileName</span><span class="o">(</span><span class="nc">String</span> <span class="n">originalFilename</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">String</span> <span class="n">ext</span> <span class="o">=</span> <span class="n">extractExt</span><span class="o">(</span><span class="n">originalFilename</span><span class="o">);</span>
		<span class="nc">String</span> <span class="n">uuid</span> <span class="o">=</span> <span class="no">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">();</span>
		<span class="k">return</span> <span class="n">uuid</span> <span class="o">+</span> <span class="s">"."</span> <span class="o">+</span> <span class="n">ext</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">extractExt</span><span class="o">(</span><span class="nc">String</span> <span class="n">originalFilename</span><span class="o">)</span> <span class="o">{</span>
		<span class="kt">int</span> <span class="n">pos</span> <span class="o">=</span> <span class="n">originalFilename</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="s">"."</span><span class="o">);</span>
		<span class="k">return</span> <span class="n">originalFilename</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="n">pos</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>여기서 AmazonS3 를 DI 받아 <code class="language-plaintext highlighter-rouge">.putObject();</code> 메서드를 이용해 <br />
AWS S3 저장소에 저장을할 수 있게되어진다.</p>

<p><code class="language-plaintext highlighter-rouge">.putObject();</code>의 매개변수들로는<br />
(버킷 이름과, 파일이름, MultipartFile inputsStream 객체, ObjectMetaData 객체)<br />
를 넣어 주면 정상적으로 파일이 업로드가 되어질 것이다.</p>

<p>그리고 외부에 공개할 이미지이기 때문에<br />
<code class="language-plaintext highlighter-rouge">.withCannedAcl(CannedAccessControlList.PublicRead)</code>를 걸어주었다.</p>

<p>나와 같은 경우에 파일이름같은 경우는 <br />
기존에 받은 originalFilename을 UUID를 이용해 <br />
종복될 확률이 매우 낮게 파일이름을 변경해주고 마지막에는<br />
확장자 데이터를 뽑아 붙여주게 되어 파일이름을 완성시켜주었다.</p>

<p>예를들자면 <code class="language-plaintext highlighter-rouge">e491b9f6-c528-4a47-bd5c-0381aad21ed5.png</code>와 같이 <br />
파일이름이 만들어지게 되는 모습을 볼 수 있다.</p>

<p><br /></p>

<p>여기까지 작성을 헀다면 이제 클라이언트 쪽에서 <br />
이미지를 보내 AWS S3에 저장되는 모습을 확인해볼 수 있다.</p>

<p>클라이언트을 SSR 방식으로<br />
thymeleaf를 이용해 만들어줄 수도 있지만</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212540211-2ec688c8-b5c4-4630-8b45-56f08ae246f9.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>포스트맨을 통해서도 전송이 가능하다. <br />
multipart/form-data 형식으로 설정해준다음. <br />
Body에 Key,Value를 설정해주면된다.</p>

<p>Key값 설정시에는 오른쪽에 Text가아닌 File로 변경해주어야한다.<br />
그러면 Value에 이미지를 선택할 수 있는 창이나온다. <br />
창을 눌러 현재 데스크탑에서 올릴 이미지를 선택해준다.</p>

<p>그리고 API를 요청보내게 된다면</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212540224-4a1655bc-b22f-4694-a948-dcb7d368e697.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>내가 지정했던 indiego-fileupload 버킷에<br />
profileimage라는 폴더에 내가 지정한 형식의 폴더이름과 확장자로 <br />
객체가 올라가있는 모습을 확인할 수 있다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212540227-70c09e05-f781-4a21-9236-8f60b8872d04.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>객체를 눌러 들어가면 객체 URL이 나오게되는데<br />
해당 URL을 꺼내서 클라이언트 측에 전달하고 우리 DB에 저장하면된다.</p>

<p>꺼내는 코드는 이미 위에 작성되어있다.<br />
<code class="language-plaintext highlighter-rouge">amazonS3.getUrl(bucketName, storeFileName).toString();</code> 코드로 <br />
<code class="language-plaintext highlighter-rouge">getUrl();</code> 메서드를 이용해 꺼내올 수 있다. 해당 값을 String으로 <br />
반환해주고 해당값을 이제 우리가 원하는 목적에 맞게 사용하면된다.</p>

<p>나와 같은 경우에는 반환한 URL을 text/plain으로 반환해주었고<br />
위에 Postman으로 보면 잘 반환된 것을 확인할 수가있다.</p>

<p><br /></p>

<h3 id="-파일-사이즈-예외처리">📌 파일 사이즈 예외처리</h3>

<p>처음에 설정했던 yml 파일에 10MB로<br />
용량을 제한해두었었다.</p>

<p>만약 정말로 사이즈가 넘게 된다면</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.springframework.web.multipart.MaxUploadSizeExceededException: Maximum upload size exceeded<span class="p">;</span> nested exception is java.lang.IllegalStateException:
</code></pre></div></div>

<p>와 같은 예외가 발생하게 될 것이고 <br />
해당 예외를 처리하기위해서 간단한 예외처리 로직을 구현해보았다.</p>

<p>@ControllerAdvice를 이용해서<br />
<code class="language-plaintext highlighter-rouge">MaxUploadSizeExceededException</code>예외를 잡을 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ControllerAdvice</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GlobalExceptionHandler</span> <span class="o">{</span>

    <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">protected</span> <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">ErrorResponse</span><span class="o">&gt;</span> <span class="nf">handleException</span><span class="o">(</span><span class="nc">MaxUploadSizeExceededException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">"MaxUploadSizeExceededException"</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>

        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# 예외처리 잡음"</span><span class="o">);</span>
        <span class="kd">final</span> <span class="nc">ErrorResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="nc">ErrorResponse</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">internalServerError</span><span class="o">().</span><span class="na">body</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@JsonInclude</span><span class="o">(</span><span class="nc">JsonInclude</span><span class="o">.</span><span class="na">Include</span><span class="o">.</span><span class="na">NON_NULL</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ErrorResponse</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kt">int</span> <span class="n">status</span><span class="o">;</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>

	<span class="kd">private</span> <span class="nf">ErrorResponse</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="kt">int</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span>
		<span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
	<span class="o">}</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="nc">ErrorResponse</span> <span class="nf">of</span><span class="o">(</span><span class="nc">MaxUploadSizeExceededException</span> <span class="n">maxUploadSizeExceededException</span><span class="o">)</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">ErrorResponse</span><span class="o">(</span><span class="n">maxUploadSizeExceededException</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span><span class="mi">500</span><span class="o">);</span>
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>ErrorResponse에 대한 내용은 우선 대강 정의해보았다. <br />
어떻게 반환할지에대해서는 커스터마이징을 통해서 <br />
입맛에 맞게 변경해보면 좋을 것 같다.</p>

<p><br />
<br /></p>

<p>✨ 참고 블로그 <br />
<a href="https://antdev.tistory.com/93#recentEntries">AWS S3, FileUpload 참고 레퍼런스</a>, <a href="https://victorydntmd.tistory.com/334">FileUpload 관련 참고 블로그 레퍼런스</a></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Spring" /><category term="Spring" /><category term="S3" /><summary type="html"><![CDATA[오늘은 AWS S3에 파일 업로드를 하는 예제를 다뤄보려한다.]]></summary></entry><entry><title type="html">Redis JWT Refresh Token 관리 및 재발행</title><link href="http://localhost:4000/db/2023/01/14/db-redis.html" rel="alternate" type="text/html" title="Redis JWT Refresh Token 관리 및 재발행" /><published>2023-01-14T00:00:00+09:00</published><updated>2023-01-14T00:00:00+09:00</updated><id>http://localhost:4000/db/2023/01/14/db-redis</id><content type="html" xml:base="http://localhost:4000/db/2023/01/14/db-redis.html"><![CDATA[<p>Redis에 대한 간단한 CS지식과 <br />
<a href="https://mycatlikeschuru.github.io/db/2023/01/08/db-redissetting.html">Redis 설치 및 CLI 사용법</a>을 알아보았었다.</p>

<p>오늘은 이제 나의 사용 목적인 프로젝트에 도입을 해보려한다. <br />
JWT Refresh Token관리와 좋아요,조회수 등 <br />
빈번히 update가 일어나는 항목에 대해서 관리하는 차원에서 <br />
캐시서버인 Redis를 사용해보려한다.</p>

<p>그 중에서도 Redis 사용에 대한 코드와<br />
JWT 토큰을 Redis에 어떻게 관리하고 재발급받는지에 대해<br />
초점을 두고 작성했기에 많은 코드들이 생략되어 있다는점 참고 부탁드린다.</p>

<h3 id="-작업환경">✅ 작업환경</h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Spring Boot 2.7.7
java 11 
macOS Ventura 13.1
로컬 환경에서 테스트 진행
</code></pre></div></div>

<p><br /></p>

<h3 id="-redis-프로그램-작성">📌 Redis 프로그램 작성</h3>

<p>Spring Boot에서는 <code class="language-plaintext highlighter-rouge">Spring Data Redis</code>를 이용해<br />
Lettuce, Jedis라는 두가지 오픈소스 Java 라이브러리를 사용할 수 있다고 한다.<br />
Lettuce는 별도의 설정이 필요없고, Jedis는 의존성을 추가해줘야한다.</p>

<p>Gradle 의존성</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">data</span><span class="o">-</span><span class="n">redis</span><span class="err">'</span>
</code></pre></div></div>

<p>Spring data Redis는 두가지 접근 방식을 제공하는데<br />
하나는 Redis Template, 하나는 RedisRepository를 이용한 방식이다.   <br />
이번에 사용해본 방법은 Redis Template 방식이고</p>

<p><code class="language-plaintext highlighter-rouge">RedisConnectionFactory</code> 인터페이스를 통해<br />
<code class="language-plaintext highlighter-rouge">LettuceConnectionFactory</code> 생성하여 반환하는 Bean을 등록해야한다.</p>

<p><strong>1). RedisConfig 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisConfig</span> <span class="o">{</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.host}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="nc">String</span> <span class="n">host</span><span class="o">;</span>

	<span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.redis.port}"</span><span class="o">)</span>
	<span class="kd">private</span> <span class="kt">int</span> <span class="n">port</span><span class="o">;</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">RedisConnectionFactory</span> <span class="nf">redisConnectionFactory</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="k">new</span> <span class="nf">LettuceConnectionFactory</span><span class="o">(</span><span class="n">host</span><span class="o">,</span> <span class="n">port</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">redisTemplate</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RedisTemplate</span><span class="o">&lt;&gt;();</span>
		<span class="n">redisTemplate</span><span class="o">.</span><span class="na">setKeySerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
		<span class="n">redisTemplate</span><span class="o">.</span><span class="na">setValueSerializer</span><span class="o">(</span><span class="k">new</span> <span class="nc">StringRedisSerializer</span><span class="o">());</span>
		<span class="n">redisTemplate</span><span class="o">.</span><span class="na">setConnectionFactory</span><span class="o">(</span><span class="n">redisConnectionFactory</span><span class="o">());</span>
		<span class="k">return</span> <span class="n">redisTemplate</span><span class="o">;</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">LettuceConnectionFactory</code>를 생성자를 만들어 반환할때<br />
host, port 정보가 필요하다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">cache</span><span class="pi">:</span>
    <span class="na">type</span><span class="pi">:</span> <span class="s">redis</span>
  <span class="na">redis</span><span class="pi">:</span>
    <span class="na">host</span><span class="pi">:</span> <span class="s">localhost</span>
    <span class="na">port</span><span class="pi">:</span> <span class="m">6379</span>
</code></pre></div></div>

<p>로컬환경에서 테스트를 할 것이기 때문에<br />
yml파일에 설정해주고 @Value 어노테이션으로 파싱하도록 했다.</p>

<p>그리고 <code class="language-plaintext highlighter-rouge">setKeySerializer</code>,<code class="language-plaintext highlighter-rouge">setValueSerializer</code>와 같은<br />
<code class="language-plaintext highlighter-rouge">RedisTemplete</code>객체에 설정을 해주는 이유는</p>

<p>RedisTemplate를 사용할 때 Spring - Redis 간 데이터<br />
직렬화,역직렬화 시 사용하는 방식이 JDK 직렬화 방식이기 때문에 <br />
문제는 없지만 redis-cli를 통해 접근할때 알아볼 수 없는 형태로 출력되기 때문에 <br />
설정을 진행 해준 것이다!</p>

<p><br /></p>

<p><strong>2). RedisDao 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RedisDao</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">RedisDao</span><span class="o">(</span><span class="nc">RedisTemplate</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">redisTemplate</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisTemplate</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValues</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ValueOperations</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">();</span>
        <span class="n">values</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setValues</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">data</span><span class="o">,</span> <span class="nc">Duration</span> <span class="n">duration</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ValueOperations</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">();</span>
        <span class="n">values</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">data</span><span class="o">,</span> <span class="n">duration</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getValues</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ValueOperations</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForValue</span><span class="o">();</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">values</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteValues</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">expireValues</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="kt">int</span> <span class="n">timeout</span><span class="o">){</span>
        <span class="n">redisTemplate</span><span class="o">.</span><span class="na">expire</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">timeout</span> <span class="o">,</span> <span class="nc">TimeUnit</span><span class="o">.</span><span class="na">MILLISECONDS</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setHashOps</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">data</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">HashOperations</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForHash</span><span class="o">();</span>
        <span class="n">values</span><span class="o">.</span><span class="na">putAll</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">data</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getHashOps</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">hashKey</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">HashOperations</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForHash</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">values</span><span class="o">.</span><span class="na">hasKey</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hashKey</span><span class="o">)</span> <span class="o">?</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span><span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForHash</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hashKey</span><span class="o">)</span> <span class="o">:</span> <span class="k">new</span> <span class="nc">String</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteHashOps</span><span class="o">(</span><span class="nc">String</span> <span class="n">key</span><span class="o">,</span> <span class="nc">String</span> <span class="n">hashKey</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">HashOperations</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">values</span> <span class="o">=</span> <span class="n">redisTemplate</span><span class="o">.</span><span class="na">opsForHash</span><span class="o">();</span>
        <span class="n">values</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="n">hashKey</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">validateValue</span><span class="o">(</span><span class="nc">String</span> <span class="n">value</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>두번째로는 <code class="language-plaintext highlighter-rouge">RedisDao</code>라는 클래스를 만들어 <br />
스프링 컨테이너에 빈으로 등록해<br />
DI 받아 사용하도록 클래스를 하나 만들어 주었다.</p>

<p>안에 메서드 내용들을 보면 <br />
기본적인 Key,Value를 설정하는 방법, 그리고 Get하여 가져오기 <br />
또한 소멸 시간설정(TTL)을 하여 Key를 만들기</p>

<p>Hash 자료구조로 Key,Value 만들기 정도 코드를 추가해두었다. <br />
JWT사용할땐 기본적 Key,Value로 진행할 예정이고<br />
다른 프로젝트에서 Hash 구조를 사용하기때문에 우선 추가해줬다.</p>

<p><br /></p>

<h3 id="-redis를-통한-refresh-token-관리">📌 Redis를 통한 Refresh Token 관리</h3>

<h4 id="redis를-이용한-jwt-활용">Redis를 이용한 JWT 활용</h4>

<p>이러한 방법이 정말 최선일지? <br />
확실하진 않다… 여러가지 레퍼런스 블로그들을 보면서<br />
이번에 프로젝트를 하면서 적용해본 아키텍처를 그려보았다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212480772-df9dcb0d-241e-4301-97e7-688b64424717.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>순서를 살펴 보자면</p>

<p><strong>1). 로그인시 JWT 토큰을 발급 받는다.</strong><br />
-&gt; AccessToken, RefreshToken을 발급 받음.</p>

<p><br /></p>

<p><strong>2). 발급받은 토큰을 Client에 전달 한다.</strong><br />
-&gt; Access Token은 Header에 <code class="language-plaintext highlighter-rouge">Authorization</code>에 담는다.<br />
-&gt; Refresh Token은 쿠키에 담아 보내준다.
전달하기 전에 서버에서는 Refresh Token을 Redis 캐시서버에 Key/Value <br />
형태로 소멸시간을 지정해 저장한다. (나는 2일 정도로 해두었다)</p>

<p>❗️<strong>생각해볼 만한 내용들</strong><br />
여기서 생각해보면 좋은 점이. Refresh Token을 클라이언트에 보내는 것이<br />
정말 최신인가? 라는 생각이 든다. 이부분에 대해 고민을 많이해봤고 많이 찾아보았지만<br />
결론적으로 내가 내린 생각은 해당 Refresh Token을 클라이언트에서 서버로<br />
보내주지 않으면 Access Token으로만 재발급이 이루어지게되는데<br />
Access Token을 탈취당할 경우 Redis에 있는 Refresh Token으로 재발급이 가능해지니<br />
위험해 질 것 같다는 생각에 이르럿고, 취약점이 존재하지만 최소한 쿠키로 담아 보내 <br />
HttpOnly 옵션으로 XSS(Cross-Site Scripting) 공격을 막을 수기에 보내주기로 결정했다.</p>

<p><br /></p>

<p><strong>3). API 요청할때 인증을 위한 Access Token을 담아 요청한다.</strong><br />
-&gt; 정상적으로 인증이 완료되면 해당 API를 수행한다.<br />
-&gt; 만약 Access Token이 만료되었다면? 서버에서는 만료되었다고 <br />
클라이언트측에 알려준다. (나와 같은경우는 토큰이 만료되었다고 JSON을 응답해줌)</p>

<p><br /></p>

<p><strong>4). 만료응답을 받은 클라이언트는 Access Token 재발행 API를 요청한다.</strong><br />
-&gt; Access Token과 Refresh Token을 헤더에 담아서 Access Token 재발급을 요청한다.<br />
-&gt; 재발급 요청을 받은 서버는 Refresh Token을 Redis에서 찾는다. <br />
-&gt; 만약 Redis 캐시서버안에 Refresh Token이 소멸되지 않았다면<br />
Access Token 재발급 시퀀스를 진행한다.<br />
-&gt; 만약 Refresh Token이 소멸되었다면, 예외처리하여 클라이언트에 알려준다.<br />
(이후 로그아웃을 하든 다음 액션은 클라이언트쪽에 맡긴다.)</p>

<p><br /></p>

<h4 id="jwt-redis-저장-재발행-코드">JWT Redis 저장, 재발행 코드</h4>

<p>위와 같은 플로우로 일단 정리를 하였다. <br />
해당 로직 구현은 아래에서 살펴보자.<br />
모든 로직을 적어두진 않을 것이고, 중요하다고 생각하는<br />
부분의 클래스 내용들만 적어볼 예정이다.</p>

<p><strong>1). 로그인시 JWT 토큰 발급, Redis에 저장</strong></p>

<p><strong>JwtAuthenticationFilter 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtAuthenticationFilter</span> <span class="kd">extends</span> <span class="nc">UsernamePasswordAuthenticationFilter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TokenProvider</span> <span class="n">tokenProvider</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisDao</span> <span class="n">redisDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">JwtAuthenticationFilter</span><span class="o">(</span><span class="nc">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">,</span> <span class="nc">TokenProvider</span> <span class="n">tokenProvider</span><span class="o">,</span> <span class="nc">RedisDao</span> <span class="n">redisDao</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authenticationManager</span> <span class="o">=</span> <span class="n">authenticationManager</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tokenProvider</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">redisDao</span> <span class="o">=</span> <span class="n">redisDao</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nd">@SneakyThrows</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Authentication</span> <span class="nf">attemptAuthentication</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>

        <span class="nc">LoginDto</span> <span class="n">loginDto</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="nc">LoginDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// ServletInputSteam을 LoginDto 클래스 객체로 역직렬화 (즉, JSON 객체꺼냄)</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# attemptAuthentication : loginDto.getEmail={}, login.getPassword={}"</span><span class="o">,</span><span class="n">loginDto</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span><span class="n">loginDto</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span>

        <span class="nc">UsernamePasswordAuthenticationToken</span> <span class="n">authenticationToken</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UsernamePasswordAuthenticationToken</span><span class="o">(</span><span class="n">loginDto</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">loginDto</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">authenticationManager</span><span class="o">.</span><span class="na">authenticate</span><span class="o">(</span><span class="n">authenticationToken</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">successfulAuthentication</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">,</span> <span class="nc">Authentication</span> <span class="n">authResult</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

        <span class="nc">AuthMember</span> <span class="n">authMember</span> <span class="o">=</span> <span class="o">(</span><span class="nc">AuthMember</span><span class="o">)</span> <span class="n">authResult</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>
        <span class="nc">TokenDto</span> <span class="n">tokenDto</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">generateTokenDto</span><span class="o">(</span><span class="n">authMember</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">tokenDto</span><span class="o">.</span><span class="na">getAccessToken</span><span class="o">();</span> <span class="c1">// accessToken 만들기</span>
        <span class="nc">String</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">tokenDto</span><span class="o">.</span><span class="na">getRefreshToken</span><span class="o">();</span> <span class="c1">// refreshToken 만들기</span>

        <span class="n">tokenProvider</span><span class="o">.</span><span class="na">accessTokenSetHeader</span><span class="o">(</span><span class="n">accessToken</span><span class="o">,</span><span class="n">response</span><span class="o">);</span> <span class="c1">// AccessToken Header response 생성</span>
        <span class="c1">//tokenProvider.refreshTokenSetHeader(refreshToken,response); // RefreshToken Header response 생성</span>
        <span class="n">tokenProvider</span><span class="o">.</span><span class="na">refreshTokenSetCookie</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">,</span><span class="n">response</span><span class="o">);</span> <span class="c1">// RefreshToken Cookie로 설정</span>
        <span class="nc">Responder</span><span class="o">.</span><span class="na">loginSuccessResponse</span><span class="o">(</span><span class="n">response</span><span class="o">,</span><span class="n">authMember</span><span class="o">);</span> <span class="c1">// login 완료시 Response 응답 만들기</span>

        <span class="c1">// 로그인 성공시 Refresh Token Redis 저장 ( key = Refresh Token / value = Access Token )</span>
        <span class="kt">int</span> <span class="n">refreshTokenExpirationMinutes</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">getRefreshTokenExpirationMinutes</span><span class="o">();</span>
        <span class="n">redisDao</span><span class="o">.</span><span class="na">setValues</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">,</span><span class="n">accessToken</span><span class="o">,</span> <span class="nc">Duration</span><span class="o">.</span><span class="na">ofMinutes</span><span class="o">(</span><span class="n">refreshTokenExpirationMinutes</span><span class="o">));</span>

        <span class="k">this</span><span class="o">.</span><span class="na">getSuccessHandler</span><span class="o">().</span><span class="na">onAuthenticationSuccess</span><span class="o">(</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">,</span><span class="n">authResult</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code>를 상속받아<br />
구현한 <code class="language-plaintext highlighter-rouge">JwtAuthenticationFilter</code> 필터 클래스이다. Spring Security에<br />
FilterChain에 설정해두어 로그인 요청시 해당 필터를 거치게된다.</p>

<p>여기서 중점적으로 봐야할 코드는<br />
<code class="language-plaintext highlighter-rouge">successfulAuthentication</code>메서드 부분이다.<br />
<code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code> 필터에서는 <br />
인증된 객체를 <code class="language-plaintext highlighter-rouge">Security Context Holder</code>에 저장해주는 역할을한다.</p>

<p>나와 같은 경우는 해당 필터를 Override하였기 때문에<br />
<code class="language-plaintext highlighter-rouge">Security Context Holder</code>에 객체저장하는건 <code class="language-plaintext highlighter-rouge">JwtVerificationFilter</code>라는<br />
인증필터를 만들어 처리해주었고, 현재 위에 올려둔 필터클래스에서는<br />
JWT 발행과 <code class="language-plaintext highlighter-rouge">redisDao.setValues()</code>메서드를 통해 Redis에</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Key : refreshToken  
Value : accessToken  
소멸시간 : 2일
</code></pre></div></div>
<p>로 저장을 해주게 되었다. 위 플로우에서 얘기했던 1),2)번에 해당하는 내용이다.<br />
이렇게 필터 구현 부분에서 JWT를 발행해 Redis에 저장해주게 되었다.</p>

<p><br /></p>

<p><strong>2). Token 만료시 JWT 재발행</strong></p>

<p>위에서 로그인시 토큰 발급까지 해주었고  <br />
클라이언트에서 Access Token을 헤더에 담아 어떤<br />
API를 요청하였을때, 토큰이 만료되었다고 서버에서 확인해서 알려주면<br />
재발행 API를 클라이언트에서 보내기로 했었다.</p>

<p>❗️ Access Token 만료확인 코드는 너무 많기때문에 생략합니다.<br />
필자는 <code class="language-plaintext highlighter-rouge">JwtAuthenticationFilter</code> 필터클래스를 만들어 <code class="language-plaintext highlighter-rouge">OncePerRequestFilter</code>를<br />
상속받아 API요청시 <code class="language-plaintext highlighter-rouge">doFilterInternal</code>를 Override받아 구현해 해당 필터에서 <br />
JWT 해독을하고, 정상적으로 해독하면 API가 실행될 것이고, 토큰에 문제가 있거나 만료가되었으면<br />
예외처리하여 클라이언트 측에 JSON을 만들어 Body에 던져주었습니다.</p>

<p><br /></p>

<p><strong>MemberController 클래스</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RestController</span>
<span class="nd">@Validated</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="o">...</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/reissue"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">reissue</span><span class="o">(</span><span class="nd">@CookieValue</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"refreshToken"</span><span class="o">,</span> <span class="n">required</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span> <span class="nc">String</span> <span class="n">refreshToken</span><span class="o">,</span>
                                  <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
                                  <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">){</span>

        <span class="n">memberService</span><span class="o">.</span><span class="na">reissueAccessToken</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">,</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="s">"Refresh Token 재발급 완료!"</span><span class="o">,</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>재발행을 실행해주는 API이다. 해당 API는<br />
위에서 얘기했던 <code class="language-plaintext highlighter-rouge">JwtAuthenticationFilter</code>에서 실행되지 않게<br />
<code class="language-plaintext highlighter-rouge">shouldNotFilter</code>를 구현해 처리해줄 수 있다. <br />
그렇게되면 AccessToken이 만료되었더라도, 해당 API는 실행이 된다.<br />
해당 로직은 API 요청부분이고, 이제 중요한 Service로직을 확인해보자</p>

<p><br /></p>

<p><strong>MemberSerivce 클래스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomBeanUtils</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">beanUtils</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TokenProvider</span> <span class="n">tokenProvider</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RedisDao</span> <span class="n">redisDao</span><span class="o">;</span>

    <span class="o">...</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">reissueAccessToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">refreshToken</span><span class="o">,</span> <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">){</span>

        <span class="k">if</span><span class="o">(</span><span class="n">refreshToken</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">COOKIE_REFRESH_TOKEN_NOT_FOUND</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">resolveToken</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">redisAccessToken</span> <span class="o">=</span> <span class="n">redisDao</span><span class="o">.</span><span class="na">getValues</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">);</span>

        <span class="c1">// Refresh Token이 Redis에 존재할 경우 Access Token 생성</span>
        <span class="k">if</span><span class="o">(</span><span class="n">redisDao</span><span class="o">.</span><span class="na">validateValue</span><span class="o">(</span><span class="n">redisAccessToken</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">accessToken</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">redisAccessToken</span><span class="o">)){</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# RefreshToken을 통한 AccessToken 재발급 시작"</span><span class="o">);</span>
            <span class="nc">Claims</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">parseClaims</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">);</span> <span class="c1">// Refresh Token 복호화</span>
            <span class="nc">String</span> <span class="n">email</span> <span class="o">=</span> <span class="n">claims</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"sub"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// Refresh Token에서 email정보 가져오기</span>
            <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">findVerifiedMember</span><span class="o">(</span><span class="n">email</span><span class="o">);</span> <span class="c1">// DB에서 사용자 정보 찾기</span>
            <span class="nc">AuthMember</span> <span class="n">authMember</span> <span class="o">=</span> <span class="nc">AuthMember</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">getRoles</span><span class="o">());</span>
            <span class="nc">TokenDto</span> <span class="n">tokenDto</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">generateTokenDto</span><span class="o">(</span><span class="n">authMember</span><span class="o">);</span> <span class="c1">// Token 만들기</span>
            <span class="kt">int</span> <span class="n">refreshTokenExpirationMinutes</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">getRefreshTokenExpirationMinutes</span><span class="o">();</span>
            <span class="n">redisDao</span><span class="o">.</span><span class="na">setValues</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">,</span> <span class="n">tokenDto</span><span class="o">.</span><span class="na">getAccessToken</span><span class="o">(),</span> <span class="nc">Duration</span><span class="o">.</span><span class="na">ofMinutes</span><span class="o">(</span><span class="n">refreshTokenExpirationMinutes</span><span class="o">));</span>
            <span class="n">tokenProvider</span><span class="o">.</span><span class="na">accessTokenSetHeader</span><span class="o">(</span><span class="n">tokenDto</span><span class="o">.</span><span class="na">getAccessToken</span><span class="o">(),</span><span class="n">response</span><span class="o">);</span>

        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(!</span><span class="n">redisDao</span><span class="o">.</span><span class="na">validateValue</span><span class="o">(</span><span class="n">redisAccessToken</span><span class="o">)){</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">REFRESH_TOKEN_NOT_FOUND</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">TOKEN_IS_NOT_SAME</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다른 서비스 로직들은 지우고 표현해두었다. <br />
<code class="language-plaintext highlighter-rouge">reissueAccessToken</code>메서드라는 부분을 만들어 검증 로직을 작성했다.</p>

<p>첫번째로는 쿠키에 RefreshToken이 제대로 담겨왔는지를 확인한다.</p>

<p>그리고는 이제 헤더에 담긴 AccessToken을 꺼내고<br />
쿠키로 전달받은 RefreshToken으로 <code class="language-plaintext highlighter-rouge">redisDao.getValues</code>메서드를 이용해<br />
Redis에서 AccessToken을 꺼낸다. <em><strong>(key=refreshToken, value=accessToken으로 저장했으니까!)</strong></em></p>

<p>이제 <code class="language-plaintext highlighter-rouge">if(redisDao.validateValue(redisAccessToken) &amp;&amp; accessToken.equals(redisAccessToken))</code><br />
비교문을 통해 이 두개의 AccessToken을 비교해 일치하는지 확인하고<br />
만약 꺼내왔을때 소멸이 된 상태라면 <code class="language-plaintext highlighter-rouge">redisDao.validateValue(redisAccessToken)</code>에<br />
null값이 찍혀있게되어 둘 중하나라도 조건이 만족하지 못하면 예외처리가 될 것이다.</p>

<p>즉! Refresh Token이 존재하고(소멸되지 않고)<br />
해당 Refresh Token에 매칭되는 Access Token을 들고왔을때만<br />
Access Token을 재발행 한다음에 다시 클라이언트에 전송해준다는 서비스 로직이다.</p>

<p><br /></p>

<h3 id="-정리">📌 정리</h3>

<p>이렇게 여러가지 레퍼런스를 찾아보면서 <br />
우선 내가 생각하는대로 정리하여 올려보았다. <br />
이 방법이 틀릴수도 있고, 어느정도 타협이 될 수도 있다고 생각한다.</p>

<p>앞으로도 토큰을 사용한다면 보안에 대해 좀더 깊게 공부를 해봐야할 것 같다.<br />
또한, 이 글의 본목적은 코드를 전부 리뷰한다기 보다는</p>

<p>어떠한 흐름으로 작업을 했는지와 Redis를 이용하여<br />
토큰을 비교하는 부분에 초점을 두고 작성했기에 <br />
Spring Security에 대한 내용을 어느정도 선수지식으로 가지고 있어야하기에<br />
조금 불친절한 설명이 될 수도 있을 것 같다는 생각이든다.</p>

<p>그래도 참고차 올려보고<br />
내공부를 위한 기록이기도하여 정리해보았다 📚</p>

<p><br />
<br /></p>

<p>✨ 참고 블로그
<a href="https://hudi.blog/refresh-token-in-spring-boot-with-redis/">Redis Jpa 사용 레퍼런스</a>, <a href="https://wildeveloperetrain.tistory.com/32">Redis 사용방법 2가지 레퍼런스</a></p>

<p><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="DB" /><category term="DB" /><category term="redis" /><summary type="html"><![CDATA[Redis에 대한 간단한 CS지식과 Redis 설치 및 CLI 사용법을 알아보았었다.]]></summary></entry><entry><title type="html">Git 이전 Commit Message 수정하기</title><link href="http://localhost:4000/git/2023/01/12/git-commitmessage.html" rel="alternate" type="text/html" title="Git 이전 Commit Message 수정하기" /><published>2023-01-12T00:00:00+09:00</published><updated>2023-01-12T00:00:00+09:00</updated><id>http://localhost:4000/git/2023/01/12/git-commitmessage</id><content type="html" xml:base="http://localhost:4000/git/2023/01/12/git-commitmessage.html"><![CDATA[<h3 id="-cli로-변경">📌 CLI로 변경</h3>

<p>만약 이전에 커밋메세지를 실수로 잘못 올렸다고할 경우</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git rebase <span class="nt">-i</span> HEAD~3        
</code></pre></div></div>
<p>를 입력해서 커밋메세지가 수정이 가능하다. <br />
<code class="language-plaintext highlighter-rouge">~3</code>은 가장최신부터 수정하고자하는 커밋 수량이다</p>

<p>Pick이라고 되어있는 부분을 reword로 변경한 다음 <br />
커밋메세지를 수정해주면 반영된다.</p>

<p><br /></p>

<h3 id="-intellij로-변경">📌 IntelliJ로 변경</h3>

<p>IDE를 사용하면 vi,nano 편집기를 이용하는 것보다<br />
훨씬 수월하게 작업할 수 있다.</p>

<p>하단의 Git 탭에서 커밋메세지를 변경하고자하는<br />
커밋을 눌러 오른쪽 클릭을하자</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212041524-5d07ce20-07d1-4299-96e0-866fc2857dfb.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><code class="language-plaintext highlighter-rouge">Interactively Rebase from Here</code>를 눌러주자</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212041533-03319280-6850-4b08-8cfe-f8918c7013d8.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>그러면 Rebasing Commits 팝업이 노출되는데 <br />
원하는 커밋 메시지 이름으로 변경한 다음에</p>

<p>START REBASING을 눌러주면 <br />
변경된 커밋 메세지로 반영된 모습을 확인할 수 있다.</p>

<p><br />
<br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="GIT" /><category term="GIT" /><category term="GITHUB" /><summary type="html"><![CDATA[📌 CLI로 변경]]></summary></entry><entry><title type="html">Git Cherry-Pick으로 Commit 옮기기</title><link href="http://localhost:4000/git/2023/01/12/git-cherrypick.html" rel="alternate" type="text/html" title="Git Cherry-Pick으로 Commit 옮기기" /><published>2023-01-12T00:00:00+09:00</published><updated>2023-01-12T00:00:00+09:00</updated><id>http://localhost:4000/git/2023/01/12/git-cherrypick</id><content type="html" xml:base="http://localhost:4000/git/2023/01/12/git-cherrypick.html"><![CDATA[<h3 id="-cherry-pick">📌 Cherry-Pick</h3>

<p>작업을 하던중 다른 브랜치에 Commit을 해버렸다…</p>

<p><strong>팀원 모두가 개발 중인 브랜치</strong> : <code class="language-plaintext highlighter-rouge">develop</code><br />
<strong>현재 내가 개발하는 브랜치</strong> : <code class="language-plaintext highlighter-rouge">feat/BE/ljh</code></p>

<p>이렇게 두가지로 운영중이었다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212029237-9092798b-deca-43ea-8a8d-d99591ca7963.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>사진에서 볼 수 있듯이… <code class="language-plaintext highlighter-rouge">develop</code> 브랜치에 커밋을 두개나 해버린상황<br />
#14, #3 으로된 제목의 커밋이다..<br />
<code class="language-plaintext highlighter-rouge">feat/BE/ljh</code>  브랜치로 커밋을 옮겨야하는 상황이다.</p>

<p>해당 커밋을 복사해서 옮길 수 있는 방법이 Cherry-Pick이다.<br />
본격적으로 사용법을 알아보자</p>

<p><br /></p>

<h3 id="-commit-hash-값">📌 Commit Hash 값</h3>

<p>첫번째로 내가 잘못올릴 커밋의 해쉬값을 알아야한다.</p>

<p>내가 커밋을 잘못올린 브랜치(<code class="language-plaintext highlighter-rouge">develop</code>)에서<br />
<code class="language-plaintext highlighter-rouge">git log</code>를 입력해 커밋의 해쉬값을 알 수 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>commit 7525f9a220700884994e53e90babc345d199e10e <span class="o">(</span>HEAD -&gt; develop<span class="o">)</span>
Author: Lee JaeHyeok &lt;dhfif718@gmail.com&gt;
Date:   Thu Jan 12 18:02:48 2023 +0900

    <span class="c">#14 - Responseder, TokenPrvider 역할 추가</span>
    
    1. 로그인 시 응답 가능하도록 Responder 추가
    2. JWT 관련 예외발생시 Json 객체로 반환안되는 문제 수정
    3. HttpServletRequest 객체로 AccessToken 가져오도록 TokenProvider에게 역할 이전
       <span class="o">(</span>추후 RefreshToken으로 AccessToken 발급시 통일성있게 사용을 위함<span class="o">)</span>


commit cd49c93bd4905f6d1f4a19d8438ab4c4d6b6d15b
Author: Lee JaeHyeok &lt;dhfif718@gmail.com&gt;
Date:   Thu Jan 12 17:58:46 2023 +0900

    <span class="c">#3 - LoginResponseDto 추가</span>
    
    1. 로그인 시 응답 가능하도록 ResponseDto 추가

</code></pre></div></div>

<p>나는 총 2개의 커밋을 했고<br />
첫번째 커밋은 <code class="language-plaintext highlighter-rouge">7525f9a220700884994e53e90babc345d199e10e</code>로<br />
<code class="language-plaintext highlighter-rouge">7525f9a</code>와 같이 7자리로 표현할 수도 있다.</p>

<p>두번째 커밋은 <code class="language-plaintext highlighter-rouge">cd49c93bd4905f6d1f4a19d8438ab4c4d6b6d15b</code>이다.</p>

<p>이 두가지 커밋을 이제 <code class="language-plaintext highlighter-rouge">feat/BE/ljh</code>라는<br />
브랜치로 옮기고 싶은 상황이다.</p>

<p><br /></p>

<h3 id="-cherry-pick-사용하여-커밋-옮기기">📌 Cherry-Pick 사용하여 커밋 옮기기</h3>

<p>먼저 브랜치 체크아웃을 진행하자.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout feat/BE/ljh
</code></pre></div></div>

<p><br /></p>

<p>이제 하나씩 Cherry-Pick 명령어를 사용해 옮겨보자</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git cherry-pick cd49c93bd4905f6d1f4a19d8438ab4c4d6b6d15b
</code></pre></div></div>
<p>를 입력해주면되고, 만약 실행하였을때 정상적으로 <br />
완료가되면 이상이 없겠지만, 혹시나</p>

<p>아래와 같이 conflict가 발생하게 될 수 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Auto-merging server/src/main/java/codestates/frogroup/indiego/domain/member/entity/dto/MemberDto.java
CONFLICT <span class="o">(</span>content<span class="o">)</span>: Merge conflict <span class="k">in </span>server/src/main/java/codestates/frogroup/indiego/domain/member/entity/dto/MemberDto.java
error: could not apply cd49c93... <span class="c">#3 - LoginResponseDto 추가</span>
hint: After resolving the conflicts, mark them with
hint: <span class="s2">"git add/rm &lt;pathspec&gt;"</span>, <span class="k">then </span>run
hint: <span class="s2">"git cherry-pick --continue"</span><span class="nb">.</span>
hint: You can instead skip this commit with <span class="s2">"git cherry-pick --skip"</span><span class="nb">.</span>
hint: To abort and get back to the state before <span class="s2">"git cherry-pick"</span>,
hint: run <span class="s2">"git cherry-pick --abort"</span><span class="nb">.</span>
</code></pre></div></div>
<p>hint 안내에 따라 진행할수가 있다. <br />
우선 CONFLICT가 발생한 부분을 로그로 알려준다.<br />
나와 같은 경우는 <code class="language-plaintext highlighter-rouge">MemberDto</code> 충돌이 나왔다고 위에 나와있다.</p>

<p>해당 클래스로 가면 인텔리제이에서 충돌난 부분을 표시해준다. <br />
충돌난 부분을 코드를 수정해 우선 해결해주고<br />
<code class="language-plaintext highlighter-rouge">git add .</code>를 진행후 <code class="language-plaintext highlighter-rouge">git cherry-pick --continue</code>를 진행하면된다.<br />
마치 rebase하는 과정과 매우 흡사하다.</p>

<p>충돌부분이 전부 해결되었으면 nano편집기로 저장할건지를 물어본다.<br />
ctrl + s, ctrl + x 를 눌러줘 저장을해준다.</p>

<p><br /></p>

<p>완료를 했다면.. <code class="language-plaintext highlighter-rouge">git log</code>를 입력하면 <br />
<code class="language-plaintext highlighter-rouge">develop</code>브랜치에 있던 커밋이 <code class="language-plaintext highlighter-rouge">feat/BE/ljh</code>로 복사된 것을 <br />
볼 수 있을 것이다 !!!!!</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>commit a5d3ef8d6110d838c896ba3125c351eb5b611623 <span class="o">(</span>HEAD -&gt; feat/BE/ljh<span class="o">)</span>
Author: Lee JaeHyeok &lt;dhfif718@gmail.com&gt;
Date:   Thu Jan 12 17:58:46 2023 +0900

    1. 로그인 시 응답 가능하도록 ResponseDto 추가

</code></pre></div></div>

<p>해쉬값을 보아하니 복사보다는 새로 만들어진 느낌이다. <br />
이렇게 옮기려고하는 커밋을 모두 옮기면 된다.</p>

<p><br /></p>

<h3 id="-잘못올린-커밋-삭제">📌 잘못올린 커밋 삭제</h3>

<p><code class="language-plaintext highlighter-rouge">develop</code> 브랜치에 잘못올린 커밋을 삭제해줘야한다. <br />
Cherry-Pick을 했다고 자동으로 삭제가되진 않는다.</p>

<p><code class="language-plaintext highlighter-rouge">develop</code> 브랜치로 체크아웃을하여</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git reset HEAD^
</code></pre></div></div>

<p>를 입력하면 가장 최근인 HEAD의 커밋이 삭제되어진다.</p>

<p>혹시나 인텔리제이를 사용하고 있다면<br />
하단에 Git에 들어가서</p>

<p><img src="https://user-images.githubusercontent.com/95069395/212040809-3a14a459-78b8-42a4-9558-b42c83cd9f30.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>삭제하려고 하는 커밋에 오른쪽 마우스를 클릭해<br />
Drop Commit을 눌러주면 된다.</p>

<p><br />
<br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="GIT" /><category term="GIT" /><category term="GITHUB" /><summary type="html"><![CDATA[📌 Cherry-Pick]]></summary></entry><entry><title type="html">Redis CLI 설치 및 사용방법</title><link href="http://localhost:4000/db/2023/01/08/db-redissetting.html" rel="alternate" type="text/html" title="Redis CLI 설치 및 사용방법" /><published>2023-01-08T00:00:00+09:00</published><updated>2023-01-08T00:00:00+09:00</updated><id>http://localhost:4000/db/2023/01/08/db-redissetting</id><content type="html" xml:base="http://localhost:4000/db/2023/01/08/db-redissetting.html"><![CDATA[<p><strong>Redis</strong>는 <strong>Remote Dictionary Server</strong>의 약자로 <br />
<code class="language-plaintext highlighter-rouge">key:value</code>로 값을 저장하는 NoSQL이다. <br />
인-메모리(In-Memory) 데이터베이스로 메모리에 데이터가 저장된다..</p>

<p><img src="https://user-images.githubusercontent.com/95069395/211693910-59b5da13-847e-4313-aed9-ce48a76c7434.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>비관계형 데이터 베이스 관리 시스템(DBMS)이며<br />
캐시서버로 많이 이용된다.  <br />
캐시는 한번 읽어온 데이터를 임의의 공간에 저장하여<br />
다음에 읽을 때는 빠르게 결과값을 받을 수 있도록 도와주는 공간이다.</p>

<p><br /></p>

<p>학습의 목적은 JWT Refresh Token 관리 목적과<br />
좋아요,혹은 조회수 같은 자주 업데이트가 일어나는 데이터를<br />
RDBMS에서 계속 쿼리를 날리고 싶지 않기때문이였다.</p>

<p>본격적으로 알아보기전에 CLI를 통해 설치와 기본적인 명령어를 익혀보자</p>

<p><br /></p>

<h3 id="-redis-설치">📌 Redis 설치</h3>

<p>맥을 사용하는 유저라면 brew를 사용할 텐데</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>redis
</code></pre></div></div>
<p>를 입력하면 redis 설치가 가능하다.</p>

<p><br /></p>

<h3 id="-redis-시작-종료">📌 Redis 시작, 종료</h3>

<p>기본 적인 redis 시작 명렁어이다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew services start redis
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">==&gt; Successfully started redis (label: homebrew.mxcl.redis)</code><br />
와 같이 표현되면 정상적으로 실행 된 것이다.</p>

<p><br /></p>

<p>시작이완료되고 아래 명령어를 입력하면</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>redis-cli
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">127.0.0.1:6379&gt;</code>과 같이 <code class="language-plaintext highlighter-rouge">localhost:6379</code>로<br />
접속되었다는 표시가 나올 거다.</p>

<p><br /></p>

<p>redis 종료, 재시작 명렁어이다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew services stop redis
</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew services restart redis
</code></pre></div></div>

<p>nginx, httpd 등 시작명령어가 비슷하고 익숙할 것이다.</p>

<p><br /></p>

<h3 id="-redis-crud">📌 Redis CRUD</h3>

<p><strong>1). 현재의 키값을 확인</strong></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; keys <span class="k">*</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>2). key / value 형태로 저장 (한개만)</strong></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; <span class="nb">set test </span>a
</code></pre></div></div>
<p>test : key 값이된다.<br />
a : value 값이된다.<br />
즉 test라는 키의 a라는 value로 저장!</p>

<p><br /></p>

<p><strong>3). key / value 형태로 저장 (여러개 한번에)</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; mset test1 a test2 b
</code></pre></div></div>
<p>와 같이 입력하게 될 경우, test1,test2 라는 키가 생기고<br />
a,b라는 value가 생긴다.</p>

<p><br /></p>

<p><strong>4). key의 value를 조회</strong></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; get <span class="nb">test</span>
</code></pre></div></div>
<p>test라는 키의 value를 조회한다. <br />
위에서 a로 지정했으니 a로 출력된다.</p>

<p><br /></p>

<p><strong>5). 소멸시간 지정해서 저장하기</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; setex <span class="nb">test </span>10 a
</code></pre></div></div>
<p>와 같이 지정하게 될 경우, test라는 키값은<br />
10초동안만 존재하게 된다.<br />
10초후에 자동으로 소멸되며 조회를해도 찾을 수 없다.</p>

<p><br /></p>

<p><strong>6). 키와 값 삭제하기</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; del <span class="nb">test</span>
</code></pre></div></div>
<p>키값을 입력해 만들어둔 키를 삭제할 수 있다. <br />
삭제가 완료되면 <code class="language-plaintext highlighter-rouge">(integer) 1</code>와 같이 표시된다.</p>

<p><br /></p>

<p><strong>7). 모든 키와 값 삭제하기</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; flushall
</code></pre></div></div>
<p>모든 키와 값을 삭제해주는 명령어다</p>

<p><br /></p>

<p><strong>8). 키의 소멸 시간 확인하기</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; ttl <span class="nb">test</span>
</code></pre></div></div>
<p>ttl 다음에 키값을 입력하면 현재 남은 시간을 확인할 수 있다. <br />
초단위로 표시되며, 계속 입력하면 초가 줄어드는걸 볼 수 있다.</p>

<p><br /></p>

<h3 id="-redis-여러개의-필드">📌 Redis 여러개의 필드</h3>

<p>redis의 hashes 자료구조에는<br />
Key와 Field 용어가 나온다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hash Key1
     ᄂ Hash Sub Key1 (=Field1)
     ᄂ Hash Sub Key2 (=Field2)
</code></pre></div></div>
<p>와 같은 구조로 하나의 Key값에 여러가지<br />
Field를 저장을 할수 있다.</p>

<p><br /></p>

<p><strong>1). 하나의 키로 여러개 필드 저장</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; hset dhfif718@naver.com token <span class="s2">"value1"</span> like <span class="s2">"10"</span>
</code></pre></div></div>
<p>HSET 명령어를 이용할 수 있다.</p>

<p>dhfif718@naver.com 라는 Key값에</p>

<p>key : token / value : value1<br />
key : like / value : 10<br />
이라는 필드로 저장이 되어진 것이다.</p>

<p>어떻게 보면 dhfif718@naver.com Key의 필드는 token과 like가 되는 셈이다.</p>

<p><br /></p>

<p><strong>2). 조회하는 방법</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; hget dhfif718@naver.com like
</code></pre></div></div>

<p>조회를할때 위와 같은 방법으로 조회하게되면<br />
10이라는 값이 출력되게 되어진다.</p>

<p>만약 전체 필드를 조회하고 싶다면</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; hgetall dhfif718@naver.com
</code></pre></div></div>
<p>hgetall을 key값과 입력하면 전체 조회가 된다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1<span class="o">)</span> <span class="s2">"token"</span>
2<span class="o">)</span> <span class="s2">"value1"</span>
3<span class="o">)</span> <span class="s2">"like"</span>
4<span class="o">)</span> <span class="s2">"10"</span>
</code></pre></div></div>
<p>와 같은 방식으로 출력되어진다.</p>

<p><br /></p>

<p><strong>3). 삭제하는 방법</strong></p>

<p>마지막으로 삭제하는 방법이다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>127.0.0.1:6379&gt; hdel dhfif718@naver.com token like
</code></pre></div></div>

<p>여러개의 필드를 한번에 삭제할 수도 있고<br />
하나씩 지정해서 삭제할 수도 있다.</p>

<p><br /><br />
<br /></p>

<p>✨ 참고 블로그 <br />
<a href="https://freeblogger.tistory.com/10">Redis 참고 레퍼런스 1</a>, <a href="https://wlswoo.tistory.com/44">Redis 참고 레퍼런스 2</a>, <a href="https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&amp;blogId=wideeyed&amp;logNo=221428664697">Redis Hash 참고 레퍼런스</a>, <a href="https://server-talk.tistory.com/472">Redis 우분투 설치 레퍼런스</a></p>

<p><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="DB" /><category term="DB" /><category term="redis" /><summary type="html"><![CDATA[Redis는 Remote Dictionary Server의 약자로 key:value로 값을 저장하는 NoSQL이다. 인-메모리(In-Memory) 데이터베이스로 메모리에 데이터가 저장된다..]]></summary></entry><entry><title type="html">Jekyll Github IO 블로그 코드 하이라이트</title><link href="http://localhost:4000/jekyll/2023/01/02/it-jekyll-codehighlight.html" rel="alternate" type="text/html" title="Jekyll Github IO 블로그 코드 하이라이트" /><published>2023-01-02T00:00:00+09:00</published><updated>2023-01-02T00:00:00+09:00</updated><id>http://localhost:4000/jekyll/2023/01/02/it-jekyll-codehighlight</id><content type="html" xml:base="http://localhost:4000/jekyll/2023/01/02/it-jekyll-codehighlight.html"><![CDATA[<p>현재 내가 운영중인 Github.io 블로그의<br />
테마는 YAT 이라는 테마이다.</p>

<p>이전에 <a href="https://mycatlikeschuru.github.io/jekyll/2022/10/22/it-jekyll-comment&amp;favicon.html">YAT 테마 댓글 기능, 파비콘 추가</a>하는 방법까지 알아보았다.<br />
이제 기본으로 제공하는 Code Highlight(코드 하이라이트) <br />
변경하는 법을 알아보려한다.</p>

<p><br /></p>

<h3 id="jekyll-코드-하이라이트-적용">Jekyll 코드 하이라이트 적용</h3>

<p>코드 하이라이트 적용은 매우 간단하다.</p>

<p>나와 같은 경우에는 <a href="https://highlightjs.org/static/demo/">highlight.js demo</a> 사이트에서 <br />
마음에 드는 코드하이라이트의 이름만 설정해주면 된다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>_includes -&gt; extensions -&gt; comments -&gt; code-highlight.html
</code></pre></div></div>
<p>해당 경로의 <code class="language-plaintext highlighter-rouge">code-highlight.html</code> 파일에서</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">"stylesheet"</span> <span class="na">href=</span><span class="s">"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/styles/atom-one-dark.min.css"</span><span class="nt">&gt;</span>
<span class="nt">&lt;script </span><span class="na">src=</span><span class="s">"//cdnjs.cloudflare.com/ajax/libs/highlight.js/11.2.0/highlight.min.js"</span><span class="nt">&gt;&lt;/script&gt;</span>
</code></pre></div></div>
<p>link 태그 맨끝에 <code class="language-plaintext highlighter-rouge">atom-one-dark.min.css</code>로 되어있는 모습을 볼 수 있다. <br />
기존에는 <code class="language-plaintext highlighter-rouge">deault.min.css</code>로 되어있을 텐데, 이부분을 위 사이트에서<br />
마음에 드는 코드 하이라이트 이름으로 가져와 주면된다.</p>

<p>다만 주의할점은 띄어쓰기가 되어있느느 부분은<br />
<code class="language-plaintext highlighter-rouge">-</code>를 붙여서 처리해주면 된다.</p>

<p>혹시나 버전에따라 적용이 안되어질 수 있으니<br />
잘 확인해서 적용해보자 !!</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Jekyll" /><category term="Jekyll" /><category term="yat" /><category term="테마적용" /><category term="GitHub Pages" /><summary type="html"><![CDATA[현재 내가 운영중인 Github.io 블로그의 테마는 YAT 이라는 테마이다.]]></summary></entry><entry><title type="html">Oracle Cloud Ubuntu 22.04 1GB 램 성능 개선</title><link href="http://localhost:4000/db/2023/01/01/db-oraclesetting.html" rel="alternate" type="text/html" title="Oracle Cloud Ubuntu 22.04 1GB 램 성능 개선" /><published>2023-01-01T00:00:00+09:00</published><updated>2023-01-01T00:00:00+09:00</updated><id>http://localhost:4000/db/2023/01/01/db-oraclesetting</id><content type="html" xml:base="http://localhost:4000/db/2023/01/01/db-oraclesetting.html"><![CDATA[<p><a href="https://mycatlikeschuru.github.io/db/2023/01/01/db-oracledb.html">Oracle Cloud Free Tier 무료 인스턴스 생성과 접속</a>을 통해서<br />
오라클 평생 무료 인스턴스를 직접 만들어 보았다.</p>

<p>하지만 인스턴스를 만들면서 느낀건데 램이 1GB로<br />
여러가지 설치를하고 사용하기에는 너무 무리가 있어보이는 사양을 확인할 수가 있다.</p>

<p>AMD 기반으로 만들었기 때문에 사양이 낮은 무료 인스턴스를 사용하고 있지만<br />
몇 가지 설정을 통해 시스템을 원할히 돌아가게 셋팅을할 수가 있다.</p>

<p>한번 알아보자</p>

<h4 id="-현재-인스턴스-사양">📌 현재 인스턴스 사양</h4>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>이미지 : Ubuntu 22.04
구성 : (AMD) VM.Standard.E2.1.Micro / 1 core OCPU, 1GB Memory
</code></pre></div></div>

<p><br /></p>

<h4 id="-기초-셋팅">📌 기초 셋팅</h4>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update
</code></pre></div></div>
<p>가장 먼저 시스템 업데이트를 해준다.</p>

<p><br /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo apt install -y nano
</code></pre></div></div>
<p>nano 편집기를 다운받아 편하게 사용해보자</p>

<p><br /></p>

<h4 id="-swap-공간-생성">📌 SWAP 공간 생성</h4>

<p>오라클 클라우드 AMD 인스턴스는 위에서 얘기했듯이<br />
1GB RAM을 제공한다. 이것저것 설치하다보면 금방 RAM이 부족에 부딪힌다.<br />
상대적으로 넉넉한 HDD 저장공간의 일부를 RAM 공간으로 활용이 가능하다.</p>

<p><strong>1). 스왑공간</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>fallocate <span class="nt">-l</span> 2G /swapfile
<span class="nb">sudo chmod </span>600 /swapfile
<span class="nb">sudo </span>mkswap /swapfile
</code></pre></div></div>
<p>를 순서대로 입력을 해주게 된다면</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Setting up swapspace version 1, size <span class="o">=</span> 2 GiB <span class="o">(</span>2147479552 bytes<span class="o">)</span>
no label, <span class="nv">UUID</span><span class="o">=</span>8f85218d-329c-4eec-bf11-5d87964c5f0d
</code></pre></div></div>
<p>위와 같이 스왑공간이 정상적으로 생성되었다고 메세지가 뜬다.</p>

<p><br /></p>

<p><strong>2). 스왑시작</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>swapon /swapfile
</code></pre></div></div>
<p>위 명령어로 스왑을 시작한다.</p>

<p><br /></p>

<p><strong>3). 스왑생성 확인</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>swapon <span class="nt">--show</span>
</code></pre></div></div>
<p>명령어로 정상적으로 작동하는지 확인이 가능하다</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NAME      TYPE SIZE USED PRIO
/swapfile file   2G   0B   <span class="nt">-2</span>
</code></pre></div></div>
<p>와 같은식으로 확인이되며, 2GB의 스왑공간이 확보되었다고 표시된다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>free <span class="nt">-h</span>
</code></pre></div></div>
<p>명령어를 통해 시스템에서 사용할 수 있는<br />
메모리 공간을 확인할 수 있다.</p>

<p><br /></p>

<p><strong>4). 스왑공간 시스템 고정</strong></p>

<p>스왑공간은 시스템이 재시작되면 초기화가 진행되므로<br />
스왑공간을 그대로 남아있게하기 위해서 간단한 셋팅값을 지정해주어야 한다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nano /etc/fstab
</code></pre></div></div>

<p>를 입력해 nano 편집기로 fstab 파일을 수정해줄 수 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">LABEL</span><span class="o">=</span>cloudimg-rootfs   /        ext4   discard,errors<span class="o">=</span>remount-ro       0 1
<span class="nv">LABEL</span><span class="o">=</span>UEFI      /boot/efi       vfat    <span class="nb">umask</span><span class="o">=</span>0077      0 1
/swapfile swap swap defaults 0 0
</code></pre></div></div>
<p>최종적으로는 맨 아래의 <code class="language-plaintext highlighter-rouge">/swapfile swap swap defaults 0 0</code>를<br />
입력한후 저장해주면 된다. nano 편집기 저장방법은 <code class="language-plaintext highlighter-rouge">ctrl+s</code>한 다음에 <code class="language-plaintext highlighter-rouge">ctrl+x</code>를<br />
입력해주면 정상적으로 저장될 것 이다.</p>

<p>이렇게 설정을 완료하면 스왑공간이 기본값으로 활성화 되어<br />
시스템을 재시작하여도 문제없다 !</p>

<p><br /></p>

<h4 id="-시간설정">📌 시간설정</h4>

<p>마지막으로 서버의 시간을 설정해줄 수 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>timedatectl set-timezone Asia/Seoul
</code></pre></div></div>

<p><br /></p>

<p>✨ 참고 블로그 <br />
<a href="https://yeon-kr.tistory.com/174">클라우드 성능 개선 참고 레퍼런스 1</a>, <a href="https://blog.hangyeong.com/1773#%EC%8B%9C%EC%8A%A4%ED%85%9C_%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8">클라우드 성능 개선 참고 레퍼런스 2</a></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="DB" /><category term="DB" /><category term="Oracle" /><summary type="html"><![CDATA[Oracle Cloud Free Tier 무료 인스턴스 생성과 접속을 통해서 오라클 평생 무료 인스턴스를 직접 만들어 보았다.]]></summary></entry><entry><title type="html">Oracle Cloud Free Tier 무료 인스턴스 생성과 접속</title><link href="http://localhost:4000/db/2023/01/01/db-oracledb.html" rel="alternate" type="text/html" title="Oracle Cloud Free Tier 무료 인스턴스 생성과 접속" /><published>2023-01-01T00:00:00+09:00</published><updated>2023-01-01T00:00:00+09:00</updated><id>http://localhost:4000/db/2023/01/01/db-oracledb</id><content type="html" xml:base="http://localhost:4000/db/2023/01/01/db-oracledb.html"><![CDATA[<p>오늘은 <a href="https://www.oracle.com/kr/cloud/free/">Oracle Cloud 무료 데이터베이스</a>를 생성해보려한다.</p>

<p>회원 가입과 카드 등록은 되어있다 가정하고<br />
인스턴스 생성전에 구획생성과 VCN 네트워크 생성<br />
그리고 인스턴스를 생성하는 과정을 적어보려한다.<br />
<a href="https://hoing.io/archives/318">Oracle 무료 인스턴스 참고 레퍼런스</a>를 토대로 작업하였습니다.</p>

<p><br /></p>

<h3 id="-구획-생성">📌 구획 생성</h3>

<p>VM 생성 전에 구획을 먼저 생성해야한다.<br />
구획은 리소스를 포함하고 관리할 수 있는 가상의 공간/영역이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNs_7nfk_gmvLEvuBwFQHxq_WeESvVrrNgHncikIguZT5WSDBFRWJouafXAfIAnVKgSH8daI2o4KyS-YzP_fNz25gBp=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<h3 id="-vcn-네트워크-생성">📌 VCN 네트워크 생성</h3>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPQ25gr2990xuN0OLF_Qr90USye42bZ6DbogZyuabsYL-OejRkV1p7C3LfLIa3X8BF5dgwz7eyH5zr20LtMPIO8nRjHjA=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>먼저 아까 생성한 구획을 먼저 선택한다음<br />
VCN 마법사를 시작한다.</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gN4OZ_5VRp8kmYeue1N02iMuXfeOZln12KRSuhL_PifDDhaNnn04SjU50HgsoewLDs6y8QAapnbFdv-GGZlSNSp9rSA=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>VCN 마법사 시작 클릭</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPJqkxzAgS17AG9KpQ1OtqlFWGHiBgNCpvx7ydTjS4MjBJ1jb4a12pnVVnO5Th7cckoNEPKhQmajAVdg02USWVmeLsW=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>VCN 이름을 설정하고 다음 클릭</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMZctP8XvWQbWqzGbVm-w77_ba-OS6OrBJb46yB5-zZv1IxFQDJ9z4q80NN8B-4D2O3qMINEhwKwEaA65i_zTR4aDLa=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>생성 버튼을 눌러 리소스 생성을 완료합니다.</p>

<p><br /></p>

<h3 id="-인스턴스-생성">📌 인스턴스 생성</h3>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNGOpUG5JQk1Y20qWPgcKom-VzhRcFsYcez9OIcBXBhA1q6MjLkamcxo3FMef5Uhsg1FdpF8fD0x6dydtnJl3GAjIyoIA=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>VM 인스턴스 생성을 눌러 줍니다.</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO1m0uwf3jt9p5biT_6GwYRrmuWIoUXdvRUlZ0HbDrbWTYrj1VK4ci1QVvZhNRVNuKISN1FAY2l3rI7Fyap86OMc6E1EA=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>인스턴스 이름과 이전에 생성한 구획을 선택해줍니다.</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOdIXghpgxv_vlEivea2ZDnBtqZT-NuITqQPLie9l8He0bfkDT-Of9-oZUhU783AMfII_LhhfdlcLjwMNKIYZz1c37o7w=w1524-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>이미지와 Shape 선택이 가능하고<br />
항상 무료 적격이라 적혀있는 것을 선택해서 사용해주면된다.</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPo3-KkV26L9DztTmGJe7RvC3TpnqdtJ_TuMqP8fQwXvxfrpIKJH8pSbmXrPtmaHYtX1oresm5LE13S4bx5tot7rF5qUQ=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>네트워킹도 마찬가지로 이전에 만들어둔 VCN 네트워크를<br />
선택해주시면 됩니다.</p>

<p>만약 구획생성과 네트워킹을 만들어주지 않았다면<br />
인스턴스 생성을하여도 에러가 발생합니다.</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMOEnVFm0OsNdlUigDiwml8a2oJrXHpmUdMcf1PLn7PSX0fIHhR77mwY1-pbOOsFqz_Ld4ydtHu7l_TeA0f4AN17rBy2Q=w1524-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>SSH 키를 추가해줘야하는데<br />
이전에 Github를 사용하신분들은 공용키가 이미 있을 것이다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat</span> ~/.ssh/id_rsa.pub
</code></pre></div></div>

<p>명령어를 입력해 공용 ssh를 붙여넣어주시면 됩니다. <br />
만약 없다면 생성을 해주시면 되는데, 해당 내용은 스킵하겠습니다.</p>

<p>부트 볼륨과 같은 경우에는 100GB까지 최대로 사용가능하고<br />
50GB씩 2개의 인스턴스를 만들어 나눠사용할 수도 있습니다.</p>

<p>이제 설정을 끝냈으면, 생성을 눌러 최종완료를 해주시면 됩니다.</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNo2CptbsDAon2CtX6-RAqpmRSSTa7z3m9LWRW9JCFCdVbgMoJTOb9hisTz1OHSLY0EkNb9cXhzDeMauPpUOxUqBrtAXQ=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>이제 인스턴스 정보에 가서 확인해보시면<br />
내가만든 인스턴스를 확인해 볼 수 있다.</p>

<p><br /></p>

<h3 id="-인스턴스-접속하기">📌 인스턴스 접속하기</h3>

<p>이제 인스턴스를 만들었으니 접속을하는법을 알아보자<br />
우리는 공용 SSH로 인스턴스를 만들었다.</p>

<p>$HOME/.ssh 경로에 private key가 저장되어 있기 때문에 <br />
암호를 입력하지 않아도 원격 서버에 접속할 수 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh ubuntu@주소
</code></pre></div></div>

<p>만약 private key가 $HOME/.ssh 경로에 위치하지 않은 경우</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh <span class="nt">-i</span> <span class="o">[</span>private key path] ubuntu@주소
</code></pre></div></div>
<p>를 입력해주면 접속이 가능하다.
[private key path]에는 경로를 입력해주면 된다.</p>

<p>터미널에서 입력시</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gN0U_vZhmyBCubkA_yUqYCkiETMcUZtOnZLVXoUTz9DjMI_17cNV1t6S7kLe2Ajxg3hGFEed9nmR6d7kK4Ha7nvpTyeAw=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>와 같이 정상적으로 인스턴스에 접속한 모습을 볼 수 있다 !!</p>

<p><br /></p>

<p>FileZilla를 통해서도 접속이 가능하다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNNwSW2rB9___rqmhE9ee14DuQbywCDLJsaQY9D9nUls2WpBa9DsFwQ2tVE-3hj33naagXa8NPqAbdt8njgA5D9Weh_Ww=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>SFTP - SSH 프로토콜을 선택해준다음에   <br />
호스트는 인스턴스 주소를 입력해주면 된다.<br />
그리고 키파일을 공개키가 아닌 <code class="language-plaintext highlighter-rouge">id_rsa</code> private key를 선택해주면<br />
정상적으로 접속할 수 있는 모습을 확인해 볼 수 있다.</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="DB" /><category term="DB" /><category term="Oracle" /><summary type="html"><![CDATA[오늘은 Oracle Cloud 무료 데이터베이스를 생성해보려한다.]]></summary></entry><entry><title type="html">AWS EC2 NginX 클라이언트 배포</title><link href="http://localhost:4000/linux/unix/2022/12/29/server-NginX.html" rel="alternate" type="text/html" title="AWS EC2 NginX 클라이언트 배포" /><published>2022-12-29T00:00:00+09:00</published><updated>2022-12-29T00:00:00+09:00</updated><id>http://localhost:4000/linux/unix/2022/12/29/server-NginX</id><content type="html" xml:base="http://localhost:4000/linux/unix/2022/12/29/server-NginX.html"><![CDATA[<h3 id="-nginx-이용하여-클라이언트-배포하기">✅ NGINX 이용하여 클라이언트 배포하기</h3>

<p><a href="https://velog.io/@gudcks0305/%EB%B0%B0%ED%8F%AC-Cloud-Compute-%EB%A1%9C-%EB%B0%B0%ED%8F%AC%ED%95%98%EA%B8%B0">클라우딩 컴퓨터 배포 참고레퍼런스</a>를 토대로<br />
공부하고 테스트해본 기록을 적어보려한다.</p>

<p>우리 코스에 한분이 작성하신 글이고<br />
헤매고있는 나에게 빛줄기를 내려주셨다…🥹</p>

<p>우선 우리팀에서 생각한 아키텍처이다.<br />
정확히 맞는지는 모르겠지만, 우리가 아는 지식을 모아 그려봤다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gN7pzIQwGbZHGCEUS4jHehIs9yAoOY3RHwfGUqiNHJgziufPka455gX63ZA492CwBarFgJwzDiqJx6XRydBBBJCWJJYNA=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>AWS 클라우딩 컴퓨터를 이용한 S3 - EC2 - RDS를 운용하고 싶었지만… <br />
프리티어를 사용하는 우리에게 혹시나 비용문제가 걸림돌이 될 수 있을 것 같아<br />
꼼꼼히 홈페이지 사양을 읽어보긴했지만,,, 아직 미숙한 우리들에게 사고를<br />
미연에 방지하고자 EC2만 빌린다음에 진행하려고한다.</p>

<p><br /></p>

<h4 id="-작업-환경">📌 작업 환경</h4>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>NGINX version : nginx/1.22.1
EC2 인스턴스 유형 : Ubuntu, 22.04 LTS (HVM), SSD Volume Type , 64비트(x86)  
JDK : openjdk version 11.0.17
작업 컴퓨터 OS : macOS Monterey 12.6
</code></pre></div></div>

<p><br /></p>

<h4 id="-nginx-설치">📌 NGINX 설치</h4>

<p>EC2 인스턴스에 Nginx를 설치해줘야한다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>nginx
</code></pre></div></div>
<p>업데이트를 해주고 nginx를 설치해주면 된다.</p>

<p>설치가 완료되었다면 <code class="language-plaintext highlighter-rouge">nginx -version</code>을 입력하면<br />
<code class="language-plaintext highlighter-rouge">nginx version: nginx/1.22.1</code>와 같이 버젼이 <br />
나오면 정상적으로 설치된 것이다.</p>

<p><br /></p>

<h4 id="-nginx-시작-종료">📌 NGINX 시작, 종료</h4>

<p>1). 시작 명령어</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>service nginx start
</code></pre></div></div>

<p><br /></p>

<p>2). 중지 명령어</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>service nginx stop
</code></pre></div></div>

<p><br /></p>

<p>3). 상태 확인 명령어</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>service nginx status
</code></pre></div></div>

<p><br /></p>

<p>4). 설정파일 테스트 명령어</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>nginx <span class="nt">-t</span> 
</code></pre></div></div>

<p><br /></p>

<p>5). 재시작 명령어</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>service nginx restart
</code></pre></div></div>

<p>이렇게 5가지를 이용해 중지,시작 및 상태확인이 가능하다.</p>

<p>처음에 Start 명령어로 시작을한다면 <br />
기본 페이지인 아래의 화면이 나올 것이다. <br />
도메인 주소는 당연히 EC 인스턴스의 IPv4를 입력해주면된다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPDQyLIrueFY34ZhChcQqOsepcLPLrsa-qd8SRR-U_eG55nRUstLL8aOqIAjkjg84o68D2be4WfoeOlMewuzCKEmjHv=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>기본 설정 PORT가 80이기 때문에<br />
<code class="language-plaintext highlighter-rouge">http://3.35.174.126</code> 으로 입력하여도 접속이 가능한 것이다.</p>

<p>해당 html 파일의 주소에 접속하고 싶다면<br />
<code class="language-plaintext highlighter-rouge">/usr/share/nginx/html</code> 경로로 이동하면 <br />
<code class="language-plaintext highlighter-rouge">index.html</code>과 <code class="language-plaintext highlighter-rouge">50x.html</code>을 확인할 수 있다.</p>

<p><br /></p>

<h4 id="-nginx-설정">📌 NGINX 설정</h4>

<p><code class="language-plaintext highlighter-rouge">/etc/nginx</code> 폴더에 설정 관련파일들을 찾아볼 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPlZj5J-OVdyUfWtLi-3GsOpph99bcO6chVUREqjXeqUdIDkUOKwDuTaIgeCapp2Qls01XhQ1J7hcVYQA0VCaSmXCmlDQ=w1656-h864" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>여기서 <code class="language-plaintext highlighter-rouge">nginx.conf</code> 파일에 설정을 시작해주면 된다.<br />
<code class="language-plaintext highlighter-rouge">nginx.conf</code>파일에는 기본적으로 <code class="language-plaintext highlighter-rouge">conf.d</code> 폴더안의 <code class="language-plaintext highlighter-rouge">.conf</code>파일들을<br />
읽을 수 있도록 코드가 작성되어 있어, <code class="language-plaintext highlighter-rouge">conf.d</code> 폴더에 새로운 <code class="language-plaintext highlighter-rouge">.conf</code>파일을<br />
만들어서 사용 설정이 가능하다.<br />
(<code class="language-plaintext highlighter-rouge">include /etc/nginx/conf.d/*.conf;</code> 이런 코드가 있다.)</p>

<p><code class="language-plaintext highlighter-rouge">conf.d</code>폴더에는 <code class="language-plaintext highlighter-rouge">default.conf</code> 파일이 있다. <br />
해당 파일을 수정하여 사용해도되고, 새로운 <code class="language-plaintext highlighter-rouge">.conf</code>파일을 만들어도 된다.</p>

<p>나와 같은 경우는 <code class="language-plaintext highlighter-rouge">nginx.conf</code> 파일은 초기설정 그대로 두고<br />
<code class="language-plaintext highlighter-rouge">conf.d</code>폴더에 1).<code class="language-plaintext highlighter-rouge">client.conf</code> , 2).<code class="language-plaintext highlighter-rouge">server.conf</code> 두개를 만들었다.</p>

<p><strong>1). client.conf</strong></p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>server {
  server_name stackoverflowpre.p-e.kr;
  root /home/ubuntu/preproject/seb41_pre_037/client/build;
  index index.html index.htm;
  try_files $uri $uri/ /index.html;
  location / {
    try_files $uri $uri/ /index.html;
  }
}
</code></pre></div></div>
<p>server_name에는 <a href="https://xn--220b31d95hq8o.xn--3e0b707e/">내 도메인 한국</a>에서 받은 <br />
도메인(stackoverflowpre.p-e.kr)으로 적어주었고  <br />
EC2 IPv4 주소와 연결되어있다.</p>

<p>root에는 프론트엔드쪽 빌드된 파일이 올라가있는 경로이다.</p>

<p><br /></p>

<p><strong>2). server.conf</strong></p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>upstream preServer {
        ip_hash;
        server 127.0.0.1:8080;
}

server {

        server_name stackoverflowpre.p-e.kr;
        location / {

            proxy_pass http://preServer; # 위 upstream 에서 설정한 이름

            proxy_set_header    HOST $http_host;

            proxy_set_header    X-Real-IP $remote_addr;

            proxy_set_header    X-Forwarded-For $proxy_add_x_forwarded_for;

            proxy_set_header    X-Forwarded-Proto $scheme;

            proxy_redirect  off;
            charset utf-8;
        }

}
</code></pre></div></div>
<p>preServer에 <code class="language-plaintext highlighter-rouge">localhost:8080</code>인 <code class="language-plaintext highlighter-rouge">127.0.0.1:8080</code>을 설정해주었고 (스프링 톰켓서버)<br />
server_name에는 동일하게 도메인을 넣어주었다.</p>

<p>이제 jar 빌드파일을 실행시켜놓고 <br />
<code class="language-plaintext highlighter-rouge">sudo service nginx start </code> 명령어를 입력해주면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gP7Sh6YFwUrS61qHgvcTyuBFnYthfSnOon6P1upWJ51Brs04kAsppAbtReYthNfYC4poomu4WMycAhF6xnd6bN9sVF8OQ=w1656-h864" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>우리가 만들어 놓은 <code class="language-plaintext highlighter-rouge">index.html</code> 화면이 보이기 시작하면서  <br />
정삭적으로 배포환경에서 동작하는지 확인이 가능하다 !! <br />
(스택오버플로우 클론코딩을 한 도메인이다)</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Linux/Unix" /><category term="Linux" /><category term="Unix" /><summary type="html"><![CDATA[✅ NGINX 이용하여 클라이언트 배포하기]]></summary></entry><entry><title type="html">MySQL EC2에 설치후 WorkBench 접속하기</title><link href="http://localhost:4000/db/2022/12/28/db-mysqlEC2.html" rel="alternate" type="text/html" title="MySQL EC2에 설치후 WorkBench 접속하기" /><published>2022-12-28T00:00:00+09:00</published><updated>2022-12-28T00:00:00+09:00</updated><id>http://localhost:4000/db/2022/12/28/db-mysqlEC2</id><content type="html" xml:base="http://localhost:4000/db/2022/12/28/db-mysqlEC2.html"><![CDATA[<p>EC2에 MySQL을 설치한다음<br />
WorkBench로 접속하려는데 설정한 내용을 정리해보려한다.<br />
MySQL 설치과정은 생략하겠다.</p>

<p><br /></p>

<h4 id="-yml-파일-설정">📌 yml 파일 설정</h4>

<p>우선 EC2에 배포한 스프링 <code class="language-plaintext highlighter-rouge">.yml</code> 파일 설정이다.<br />
기존과 동일하게 <code class="language-plaintext highlighter-rouge">localhost:3306</code>으로 설정을 해주었고</p>

<p>스키마 이름은 stackover라는 이름으로지 지정했다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">com.mysql.cj.jdbc.Driver</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost:3306/stackover?serverTimezone=Asia/Seoul</span> <span class="c1"># 포트넘버, 스키마이름</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">${MYSQL_ID}</span> <span class="c1"># 유저네임</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">${MYSQL_PASSWORD}</span> <span class="c1"># 비밀번호</span>
</code></pre></div></div>

<p>환경변수를 사용해 유저이름과 비밀번호를 지정해줬다.</p>

<p><br /></p>

<h4 id="-ec2-설정">📌 EC2 설정</h4>

<p><strong>첫번쨰</strong>로 EC2 보안그룹의 인바운드 규칙을 설정해줘야한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gN095iTdhlGaDzXDoZONY9_byOM5RVo22mey2JsVdznjSR1iAFXH3SeeTRFq2MaN2FCRYRU7O8iAwqpF0rpulNSiOhkKg=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>MYSQL을 선택하고 0.0.0.0/0 을 지정해주었다.</p>

<p><br /></p>

<p><strong>두번째</strong>로는 EC2의 <code class="language-plaintext highlighter-rouge">mysqld.cnf</code> 파일의 내용을 수정해줘야한다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cd</span> /etc/mysql/mysql.conf.d
</code></pre></div></div>
<p>해당 경로에 진입하면 <code class="language-plaintext highlighter-rouge">mysqld.conf</code> 파일을 열 수 있고</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>vi mysqld.cnf
</code></pre></div></div>
<p>sudo를 이용해야 저장이 가능하다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOPpSA6Dj0VxEP0QUnOJuYtmaV64BdOTsIT_o2mvPCkZHCKxSQaPSVtVXAc4UZqFLGDwoyFIrAOfKw8_9fq_2oG6lFG=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>파일의 bind-address를 <code class="language-plaintext highlighter-rouge">0.0.0.0</code>으로 설정 해주었고<br />
mysqlx-bind-address는 주석처리를 해주었다.</p>

<p><br /></p>

<p><strong>세번째</strong>로는 User 계정을 생성하고<br />
해당 계정에 권한을 부여해주었다.</p>

<p>✅ <strong>mysql 접속</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-u</span> root <span class="nt">-p</span>
</code></pre></div></div>
<p>처음에는 root 계정으로 진입하면 mysql에 접속이 가능하다.<br />
만약 root 계정에 비밀번호를 설정하지 않았을 경우에는</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mysql <span class="nt">-u</span> root
</code></pre></div></div>
<p>명령어로 접근한 다음에</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ALTER USER <span class="s1">'root'</span>@<span class="s1">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="s1">'yourPassword'</span><span class="p">;</span>
</code></pre></div></div>
<p>yourPassword에 원하는 비밀번호를 입력해 root 계정에<br />
비밀번호를 설정해 줄 수 있다.</p>

<p><br /></p>

<p>✅ <strong>유저 생성</strong><br />
이제 mysql에 접속이 완료되었다면</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SELECT user,authentication_string,plugin,host FROM mysql.user<span class="p">;</span>
</code></pre></div></div>
<p>명령어로 등록된 user 정보를 확인할 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO-FEGjAwEuSnVLX_OZnmrstM6XDpJZRgPzMGhUCNxJJmQ-ob0QO97XihuOkInNrM8Iy0-9WSM9bBu9z1kaeUmBM_cErg=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>user가 현재 내가 만들어둔 계정이고 기본으로는 root가 있다.<br />
그리고 host를 %로 변경해주면 외부에서도 진입이 가능해진다.</p>

<p>이제 계정을 하나 만들어보자</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>create user 유저이름@‘%’ identified by ‘비밀번호’<span class="p">;</span>
</code></pre></div></div>
<p>유저이름과 비밀번호를 입력해 계정을 생성할 수 있다.<br />
만약 비밀번호를 변경하고 싶은경우 위에서 root계정 비밀번호를 변경할 때<br />
사용했던 명령어를 입력해주면 비밀번호를 변경할 수 있다.</p>

<p><br /></p>

<p>✅ <strong>유저 삭제</strong><br />
혹시나 유저를 삭제하고 싶은 경우에는</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>drop user 유저이름@localhost<span class="p">;</span>
</code></pre></div></div>
<p>과 같이 입력해주면 삭제가 가능핟.</p>

<p>✅ <strong>유저 권한부여</strong><br />
이제 유저를 만들었으니<br />
유저에 대한 권한을 설정해주면 된다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>grant all privileges on <span class="k">*</span>.<span class="k">*</span> to ‘유저이름’@‘%’<span class="p">;</span>
</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>flush privileges<span class="p">;</span>
</code></pre></div></div>
<p>정상적으로 처리가 완료되었다면 쿼리가 날라갔다고 메세지가 나온다.</p>

<p>전부 완료를 하고나면 <code class="language-plaintext highlighter-rouge">quit</code>로 mysql을 나온다음에<br />
우분투 터미널에서</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart mysql
</code></pre></div></div>
<p>해당 명령어를 입력해 mysql을 재실행 시켜주자</p>

<p>위 과정이 전부 완료되었다면<br />
방금 만든 계정과 비밀번호, 그리고 EC2 공개 IP를 이용해</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNtl81ccvr2i_SPrMZV_lXTrzZ82HmAX4GffSwHZ0ZRV69bgx16OnwlRwzCVC5YdY1AZL3XQU4lMfH71k-aaMFMmcaIOA=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위와 같이 정상적으로 WorkBench에 접속할 수 있을 것이다!!!</p>

<p><br /></p>

<p>혹시나 아래와 같은 알람이 발생한 경우에는<br />
<code class="language-plaintext highlighter-rouge">Unable to connect to localhost</code></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNjgebqbY9sS3D33Pd29TXwqg6DDU4JIE9Go_c3XFDnw_1RgPPaIsywivrZapu1dPIvXURNgUn-mwRKe4kMYuh2uyuOGw=w1000-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>나와 같은 경우에는 EC2 인바운드 규칙 설정과 <br />
<code class="language-plaintext highlighter-rouge">mysqld.conf</code> 설정한 값이 맞지 않아서 였다.<br />
혹시나 참고차 올려본다.</p>

<p><br /></p>

<p><a href="https://changun516.tistory.com/55">에러 해결 참고 레퍼런스</a>, <a href="https://velog.io/@woals4815/MySQL-%EC%99%B8%EB%B6%80-%EC%A0%91%EC%86%8D-%ED%95%98%EA%B8%B0MySQLWorkbench-%EC%9D%B4%EC%9A%A9">MySQL 외부 접속 참고 레퍼런스</a></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="DB" /><category term="DB" /><category term="MySQL" /><summary type="html"><![CDATA[EC2에 MySQL을 설치한다음 WorkBench로 접속하려는데 설정한 내용을 정리해보려한다. MySQL 설치과정은 생략하겠다.]]></summary></entry></feed>