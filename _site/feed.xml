<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-11T18:30:27+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LeeJellan</title><subtitle>안녕하세요!🙂 IT,여행,기타 등 기록을 남기기위한 블로그 입니다 !</subtitle><author><name>LEE JAEHYEOK</name></author><entry><title type="html">[Spring] JPA N+1 문제 분석 (+Querydsl)</title><link href="http://localhost:4000/spring/2023/04/11/spring-jpanplusone.html" rel="alternate" type="text/html" title="[Spring] JPA N+1 문제 분석 (+Querydsl)" /><published>2023-04-11T00:00:00+09:00</published><updated>2023-04-11T00:00:00+09:00</updated><id>http://localhost:4000/spring/2023/04/11/spring-jpanplusone</id><content type="html" xml:base="http://localhost:4000/spring/2023/04/11/spring-jpanplusone.html"><![CDATA[<p>소개에 앞서 <a href="https://github.com/MyCatlikesChuru/JavaPersisitenceAPIstudy/tree/main/jpaoneplusn">Github 레포지토리</a>에 코드가 올라가 있습니다. <br />
<code class="language-plaintext highlighter-rouge">Querydsl</code> 라이브러리를 사용하였고, <code class="language-plaintext highlighter-rouge">Spring Boot 2.7.10</code> 입니다.</p>

<p>오늘은 Spring Data Jpa를 다루면서 발생한 N+1 문제에 대해 적어보려한다.</p>

<p><br /></p>

<h2 id="jpa-n1-문제란">JPA N+1 문제란?</h2>

<p>연관 관계가 설정된 엔티티를 조회할 경우에 조회된 데이터 갯수(N)만큼 연관관계의 <br />
조회 쿼리가 추가로 발생하여 데이터를 읽어오는 현상을 얘기한다.</p>

<p>JPA Repository로 실행하는 첫 쿼리에서 하위 엔티티까지 한번에 가져오지 않고 <br />
하위 엔티티를 사용할 때 추가로 조회하기 때문에 발생한다.</p>

<p>Fetch Type이 EAGER(즉시로딩), LAZY(지연로딩) 둘 다 발생하고<br />
쿼리가 발생하는 시점만 다를뿐이지 N+1문제는 여전하다.</p>

<p><br /></p>

<h2 id="문제-발생-테스트">문제 발생 테스트</h2>

<h3 id="테이블-설명">테이블 설명</h3>

<p>문제 발생 테스트를 위해 3개의 테이블을 만들었다. <br />
<code class="language-plaintext highlighter-rouge">POSTS(게시글)</code> - <code class="language-plaintext highlighter-rouge">POSTS_TAG(게시글 태그 관리)</code> - <code class="language-plaintext highlighter-rouge">TAG(태그)</code></p>

<p><code class="language-plaintext highlighter-rouge">1:N:1</code> 관계를 가지며, POSTS쪽에서 TAG의 데이터를 가져오기 위해서 <br />
LEFT JOIN으로 접근하는 과정에서 발생하는 N+1 문제를 체크해볼 생각이다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/230547251-d9b554a7-85a0-4430-9aa2-5b1f4548b431.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<h3 id="코드-준비">코드 준비</h3>

<p>🔖 <strong>프로젝트 구조</strong></p>

<p><a href="https://github.com/MyCatlikesChuru/JavaPersisitenceAPIstudy/tree/main/jpaoneplusn">Github 레포지토리</a>를 참고하시면 더 도움이 됩니다!</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>├── main
│   ├── java
│   │   └── com
│   │       └── jpa
│   │           └── jpaoneplusn
│   │               ├── JpaoneplusnApplication.java
│   │               └── domain
│   │                   ├── config
│   │                   │   └── QuerydslConfig.java
│   │                   ├── entity
│   │                   │   ├── Posts.java
│   │                   │   ├── PostsTag.java
│   │                   │   └── Tag.java
│   │                   └── repository
│   │                       ├── PostsCustomRepository.java
│   │                       ├── PostsCustomRepositoryImpl.java
│   │                       ├── PostsRepository.java
│   │                       └── TagRepository.java
│   └── resources
│       ├── application.yml
│       ├── static
│       └── templates
└── test
    └── java
        └── com
            └── jpa
                └── jpaoneplusn
                    ├── JpaoneplusnApplicationTests.java
                    └── test
                        └── PostsTest.java

</code></pre></div></div>

<p><br /></p>

<p>우선 모든 클래스의 코드를 올리기에는 이해하는데 복잡할 수 있기 때문에  <br />
주요 코드인 <code class="language-plaintext highlighter-rouge">Entity</code>와 <code class="language-plaintext highlighter-rouge">PostsCustomRepositoryImpl</code>만 올리도록 하겠습니다.</p>

<p><strong>Posts.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Entity</span>
<span class="nd">@NoArgsConstructor</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">AccessLevel</span><span class="o">.</span><span class="na">PROTECTED</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Posts</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">title</span><span class="o">;</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"posts"</span><span class="o">,</span> <span class="n">cascade</span> <span class="o">=</span> <span class="nc">CascadeType</span><span class="o">.</span><span class="na">PERSIST</span><span class="o">,</span> <span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span> <span class="c1">// LAZY, EAGER 변경후 쿼리 시점변경</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">PostsTag</span><span class="o">&gt;</span> <span class="n">postsTags</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@Builder</span>
    <span class="kd">public</span> <span class="nf">Posts</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">title</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">title</span> <span class="o">=</span> <span class="n">title</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">addPostsTag</span><span class="o">(</span><span class="nc">PostsTag</span> <span class="n">postsTag</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">postsTags</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">postsTag</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>PostsTag.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Entity</span>
<span class="nd">@NoArgsConstructor</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">AccessLevel</span><span class="o">.</span><span class="na">PROTECTED</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostsTag</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"posts_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Posts</span> <span class="n">posts</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"tag_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Tag</span> <span class="n">tag</span><span class="o">;</span>

    <span class="nd">@Builder</span>
    <span class="kd">public</span> <span class="nf">PostsTag</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">Posts</span> <span class="n">posts</span><span class="o">,</span> <span class="nc">Tag</span> <span class="n">tag</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">posts</span> <span class="o">=</span> <span class="n">posts</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">tag</span> <span class="o">=</span> <span class="n">tag</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>Tag.java</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Entity</span>
<span class="nd">@NoArgsConstructor</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">AccessLevel</span><span class="o">.</span><span class="na">PROTECTED</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Tag</span> <span class="o">{</span>

    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">type</span><span class="o">;</span>

    <span class="nd">@Builder</span>
    <span class="kd">public</span> <span class="nf">Tag</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">type</span> <span class="o">=</span> <span class="n">type</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>PostsCustomRepositoryImpl</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostsCustomRepositoryImpl</span> <span class="kd">implements</span> <span class="nc">PostsCustomRepository</span><span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JPAQueryFactory</span> <span class="n">queryFactory</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Posts</span><span class="o">&gt;</span> <span class="nf">findAll_noFetchJoin</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">posts</span><span class="o">)</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">posts</span><span class="o">.</span><span class="na">postsTags</span><span class="o">,</span> <span class="n">postsTag</span><span class="o">)</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">postsTag</span><span class="o">.</span><span class="na">tag</span><span class="o">,</span> <span class="n">tag</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">posts</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">postsTag</span><span class="o">.</span><span class="na">id</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Posts</span><span class="o">&gt;</span> <span class="nf">findAll_useFetchJoin</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">posts</span><span class="o">)</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">posts</span><span class="o">.</span><span class="na">postsTags</span><span class="o">,</span> <span class="n">postsTag</span><span class="o">).</span><span class="na">fetchJoin</span><span class="o">()</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">postsTag</span><span class="o">.</span><span class="na">tag</span><span class="o">,</span> <span class="n">tag</span><span class="o">).</span><span class="na">fetchJoin</span><span class="o">()</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">posts</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">postsTag</span><span class="o">.</span><span class="na">id</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<h3 id="n1-문제-테스트">N+1 문제 테스트</h3>

<p>우선 <code class="language-plaintext highlighter-rouge">application.yml</code>파일에 sql을 출력할 수 있도록 설정하였다. <br />
그리고 Test 코드를 통해 쿼리를 보면서 검증을 해보았다.</p>

<p><strong>PostsTest</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PostsTest</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>
    
    <span class="nc">JPAQueryFactory</span> <span class="n">queryFactory</span><span class="o">;</span>
    
    <span class="nd">@Autowired</span>
    <span class="nc">PostsRepository</span> <span class="n">postsRepository</span><span class="o">;</span>
    
    <span class="nd">@Autowired</span>
    <span class="nc">TagRepository</span> <span class="n">tagRepository</span><span class="o">;</span>


    <span class="nd">@BeforeEach</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setUp</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">queryFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JPAQueryFactory</span><span class="o">(</span><span class="n">em</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">long</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Posts</span> <span class="n">post</span> <span class="o">=</span> <span class="nc">Posts</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">title</span><span class="o">(</span><span class="s">"제목 "</span><span class="o">+</span><span class="n">i</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
            <span class="nc">Tag</span> <span class="n">tag</span> <span class="o">=</span> <span class="nc">Tag</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">name</span><span class="o">(</span><span class="s">"태그 "</span><span class="o">+</span><span class="n">i</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="s">"타입 "</span><span class="o">+</span><span class="n">i</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
            <span class="nc">PostsTag</span> <span class="n">postTag</span> <span class="o">=</span> <span class="nc">PostsTag</span><span class="o">.</span><span class="na">builder</span><span class="o">().</span><span class="na">tag</span><span class="o">(</span><span class="n">tag</span><span class="o">).</span><span class="na">posts</span><span class="o">(</span><span class="n">post</span><span class="o">).</span><span class="na">build</span><span class="o">();</span>
            <span class="n">post</span><span class="o">.</span><span class="na">addPostsTag</span><span class="o">(</span><span class="n">postTag</span><span class="o">);</span>
            <span class="n">tagRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">tag</span><span class="o">);</span>
            <span class="n">postsRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>
<span class="c1">//            em.persist(tag);</span>
<span class="c1">//            em.persist(post);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>가독성을 위해 코드를 분리해서 설명하겠다.  <br />
첫번쨰로 @BeforeEach를 통해서 Posts, Tag, PostsTag에 정보를 넣어 주었다. <br />
총4개씩 넣어 주었고 Repository에 <code class="language-plaintext highlighter-rouge">.save()</code>를 이용해 테이블에 저장해주었다.  <br />
여기서 PostsTag는 casecade를 이용해 저장되기 때문에 Repository를 따로 만들지 않았다.</p>

<p><br /></p>

<p>본격적인 테스트는 아래에서 부터 설명하겠다.</p>

<h4 id="1-n1-문제-테스트">1. N+1 문제 테스트</h4>
<p>첫번째로 영속성 컨텍스트를 초기화 해주어야한다. <br />
초기화 시켜주지 않는다면 이미 영속화되어 있기 때문에  <br />
문제 발생상황이 체크가 되지 않는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"N+1 문제 발생하는 테스트 케이스"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">jpaProblem</span><span class="o">()</span> <span class="o">{</span>

        <span class="c1">// 영속성 컨텍스트 초기화</span>
        <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"============= 쿼리 시작 ============="</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Posts</span><span class="o">&gt;</span> <span class="n">findPosts</span> <span class="o">=</span> <span class="n">postsRepository</span><span class="o">.</span><span class="na">findAll_noFetchJoin</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"============= PostsTag 가져오기 ============="</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">PostsTag</span><span class="o">&gt;</span> <span class="n">findPostsTag</span> <span class="o">=</span> <span class="n">findPosts</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getPostsTags</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"PostsTag id = "</span> <span class="o">+</span> <span class="n">findPostsTag</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getId</span><span class="o">());</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"============= Tag 가져오기 ============="</span><span class="o">);</span>
        <span class="nc">Tag</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">findPostsTag</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getTag</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Tag Name = "</span> <span class="o">+</span> <span class="n">tag</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>그리고 프린트출력문으로 3가지 파트로 나누었고  <br />
처음에 레포지토리에서 쿼리를 가져오고 다른 테이블에 접근하도록 나누었다.</p>

<p><code class="language-plaintext highlighter-rouge">postsRepository.findAll_noFetchJoin();</code>를 호출하여 테스트하였다.<br />
(위에 Querydsl 코드로 작성된 클래스를 참조)</p>

<p>현재 구분하기 쉽게 <code class="language-plaintext highlighter-rouge">Posts</code> 엔티티나 <code class="language-plaintext highlighter-rouge">PostsTag</code>엔티티나 FetchType을 LAZY로 설정했다.<br />
(EAGER로 하여도 쿼리 출력 시점만 다르고 N+1문제는 발생합니다.)</p>

<p><strong>LAZY 설정</strong></p>
<pre><code class="language-roomsql">============= 쿼리 시작 =============
Hibernate: 
    select
        posts0_.id as id1_0_,
        posts0_.title as title2_0_ 
    from
        posts posts0_ 
    left outer join
        posts_tag poststags1_ 
            on posts0_.id=poststags1_.posts_id 
    left outer join
        tag tag2_ 
            on poststags1_.tag_id=tag2_.id 
    where
        posts0_.id=poststags1_.id
============= PostsTag 가져오기 =============
Hibernate: 
    select
        poststags0_.posts_id as posts_id2_1_0_,
        poststags0_.id as id1_1_0_,
        poststags0_.id as id1_1_1_,
        poststags0_.posts_id as posts_id2_1_1_,
        poststags0_.tag_id as tag_id3_1_1_ 
    from
        posts_tag poststags0_ 
    where
        poststags0_.posts_id=?
PostsTag id = 1
============= Tag 가져오기 =============
Hibernate: 
    select
        tag0_.id as id1_2_0_,
        tag0_.name as name2_2_0_,
        tag0_.type as type3_2_0_ 
    from
        tag tag0_ 
    where
        tag0_.id=?
Tag Name = 태그 1
</code></pre>

<p>실제 쿼리를 확인해보면 Hibernate로 구분을 하면 되는데 3번의 쿼리가 나오게되었다.<br />
즉 연관관계가 설정된 엔티티를 조회하는데 쿼리가 추가로 발생하였기 때문에 <br />
N+1문제가 발생하였다는 것이다.</p>

<p><br /></p>

<p>만약 EAGER로 변경하게될 경우</p>

<p><strong>EAGER 설정</strong></p>
<pre><code class="language-roomsql">============= 쿼리 시작 =============
Hibernate: 
    select
        posts0_.id as id1_0_,
        posts0_.title as title2_0_ 
    from
        posts posts0_ 
    left outer join
        posts_tag poststags1_ 
            on posts0_.id=poststags1_.posts_id 
    left outer join
        tag tag2_ 
            on poststags1_.tag_id=tag2_.id 
    where
        posts0_.id=poststags1_.id
Hibernate: 
    select
        poststags0_.posts_id as posts_id2_1_0_,
        poststags0_.id as id1_1_0_,
        poststags0_.id as id1_1_1_,
        poststags0_.posts_id as posts_id2_1_1_,
        poststags0_.tag_id as tag_id3_1_1_,
        tag1_.id as id1_2_2_,
        tag1_.name as name2_2_2_,
        tag1_.type as type3_2_2_ 
    from
        posts_tag poststags0_ 
    left outer join
        tag tag1_ 
            on poststags0_.tag_id=tag1_.id 
    where
        poststags0_.posts_id=?
Hibernate: 
    select
        poststags0_.posts_id as posts_id2_1_0_,
        poststags0_.id as id1_1_0_,
        poststags0_.id as id1_1_1_,
        poststags0_.posts_id as posts_id2_1_1_,
        poststags0_.tag_id as tag_id3_1_1_,
        tag1_.id as id1_2_2_,
        tag1_.name as name2_2_2_,
        tag1_.type as type3_2_2_ 
    from
        posts_tag poststags0_ 
    left outer join
        tag tag1_ 
            on poststags0_.tag_id=tag1_.id 
    where
        poststags0_.posts_id=?
Hibernate: 
    select
        poststags0_.posts_id as posts_id2_1_0_,
        poststags0_.id as id1_1_0_,
        poststags0_.id as id1_1_1_,
        poststags0_.posts_id as posts_id2_1_1_,
        poststags0_.tag_id as tag_id3_1_1_,
        tag1_.id as id1_2_2_,
        tag1_.name as name2_2_2_,
        tag1_.type as type3_2_2_ 
    from
        posts_tag poststags0_ 
    left outer join
        tag tag1_ 
            on poststags0_.tag_id=tag1_.id 
    where
        poststags0_.posts_id=?
Hibernate: 
    select
        poststags0_.posts_id as posts_id2_1_0_,
        poststags0_.id as id1_1_0_,
        poststags0_.id as id1_1_1_,
        poststags0_.posts_id as posts_id2_1_1_,
        poststags0_.tag_id as tag_id3_1_1_,
        tag1_.id as id1_2_2_,
        tag1_.name as name2_2_2_,
        tag1_.type as type3_2_2_ 
    from
        posts_tag poststags0_ 
    left outer join
        tag tag1_ 
            on poststags0_.tag_id=tag1_.id 
    where
        poststags0_.posts_id=?
============= PostsTag 가져오기 =============
PostsTag id = 1
============= Tag 가져오기 =============
Tag Name = 태그 1
</code></pre>

<p>쿼리가 5번 나오게되었다. 즉시로딩이기 때문에 쿼리시작하는 부분에서 <br />
모든 쿼리가 나오게 된 차이점만 있을뿐 N+1문제는 여전히 존재한다. <br />
오히려 쿼리가 2개나 더나오게되었다.</p>

<p><br /></p>

<h4 id="2-n1-해결-테스트">2. N+1 해결 테스트</h4>
<p>이렇게 콘솔을 통해서 N+1문제가 발생하고 있다는걸 확인했다.<br />
그러면 해결하려면 어떻게해야하는가?</p>

<p>해결방법으로는 <code class="language-plaintext highlighter-rouge">fetchJoin</code>을 사용하는 방법이 있다. <br />
<code class="language-plaintext highlighter-rouge">findAll_useFetchJoin()</code> 메서드를 참조하면된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Posts</span><span class="o">&gt;</span> <span class="nf">findAll_useFetchJoin</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">posts</span><span class="o">)</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">posts</span><span class="o">.</span><span class="na">postsTags</span><span class="o">,</span> <span class="n">postsTag</span><span class="o">).</span><span class="na">fetchJoin</span><span class="o">()</span> <span class="c1">// &lt;- fetchJoin</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">postsTag</span><span class="o">.</span><span class="na">tag</span><span class="o">,</span> <span class="n">tag</span><span class="o">).</span><span class="na">fetchJoin</span><span class="o">()</span> <span class="c1">// &lt;- fetchJoin</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">posts</span><span class="o">.</span><span class="na">id</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">postsTag</span><span class="o">.</span><span class="na">id</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">findAll_noFetchJoin()</code> 코드에서 <code class="language-plaintext highlighter-rouge">fetchJoin()</code>을 붙여준게 끝이다.</p>

<p>그럼 이메서드를 호출한 테스트 코드를 확인해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="nd">@DisplayName</span><span class="o">(</span><span class="s">"N+1 문제 해결한 테스트 케이스"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">jpaProblemSolve</span><span class="o">()</span> <span class="o">{</span>

        <span class="c1">// 영속성 컨텍스트 초기화</span>
        <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"============= 쿼리 시작 ============="</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Posts</span><span class="o">&gt;</span> <span class="n">findPosts</span> <span class="o">=</span> <span class="n">postsRepository</span><span class="o">.</span><span class="na">findAll_useFetchJoin</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"============= PostsTag 가져오기 ============="</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">PostsTag</span><span class="o">&gt;</span> <span class="n">findPostsTag</span> <span class="o">=</span> <span class="n">findPosts</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getPostsTags</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"PostsTag id = "</span> <span class="o">+</span> <span class="n">findPostsTag</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getId</span><span class="o">());</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"============= Tag 가져오기 ============="</span><span class="o">);</span>
        <span class="nc">Tag</span> <span class="n">tag</span> <span class="o">=</span> <span class="n">findPostsTag</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getTag</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Tag Name = "</span> <span class="o">+</span> <span class="n">tag</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>똑같은 테스트 코드에서 <code class="language-plaintext highlighter-rouge">postsRepository.findAll_useFetchJoin();</code>만 변경되었다.</p>

<p>실제 SQL문을 확인해보면서 차이점을 느껴보자 <br />
FetchType 설정은 LAZY, EAGER 똑같이 출력된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">=============</span> <span class="n">쿼리</span> <span class="n">시작</span> <span class="o">=============</span>
<span class="nl">Hibernate:</span> 
    <span class="n">select</span>
        <span class="n">posts0_</span><span class="o">.</span><span class="na">id</span> <span class="n">as</span> <span class="n">id1_0_0_</span><span class="o">,</span>
        <span class="n">poststags1_</span><span class="o">.</span><span class="na">id</span> <span class="n">as</span> <span class="n">id1_1_1_</span><span class="o">,</span>
        <span class="n">tag2_</span><span class="o">.</span><span class="na">id</span> <span class="n">as</span> <span class="n">id1_2_2_</span><span class="o">,</span>
        <span class="n">posts0_</span><span class="o">.</span><span class="na">title</span> <span class="n">as</span> <span class="n">title2_0_0_</span><span class="o">,</span>
        <span class="n">poststags1_</span><span class="o">.</span><span class="na">posts_id</span> <span class="n">as</span> <span class="n">posts_id2_1_1_</span><span class="o">,</span>
        <span class="n">poststags1_</span><span class="o">.</span><span class="na">tag_id</span> <span class="n">as</span> <span class="n">tag_id3_1_1_</span><span class="o">,</span>
        <span class="n">poststags1_</span><span class="o">.</span><span class="na">posts_id</span> <span class="n">as</span> <span class="n">posts_id2_1_0__</span><span class="o">,</span>
        <span class="n">poststags1_</span><span class="o">.</span><span class="na">id</span> <span class="n">as</span> <span class="n">id1_1_0__</span><span class="o">,</span>
        <span class="n">tag2_</span><span class="o">.</span><span class="na">name</span> <span class="n">as</span> <span class="n">name2_2_2_</span><span class="o">,</span>
        <span class="n">tag2_</span><span class="o">.</span><span class="na">type</span> <span class="n">as</span> <span class="n">type3_2_2_</span> 
    <span class="n">from</span>
        <span class="n">posts</span> <span class="n">posts0_</span> 
    <span class="n">left</span> <span class="n">outer</span> <span class="n">join</span>
        <span class="n">posts_tag</span> <span class="n">poststags1_</span> 
            <span class="n">on</span> <span class="n">posts0_</span><span class="o">.</span><span class="na">id</span><span class="o">=</span><span class="n">poststags1_</span><span class="o">.</span><span class="na">posts_id</span> 
    <span class="n">left</span> <span class="n">outer</span> <span class="n">join</span>
        <span class="n">tag</span> <span class="n">tag2_</span> 
            <span class="n">on</span> <span class="n">poststags1_</span><span class="o">.</span><span class="na">tag_id</span><span class="o">=</span><span class="n">tag2_</span><span class="o">.</span><span class="na">id</span> 
    <span class="n">where</span>
        <span class="n">posts0_</span><span class="o">.</span><span class="na">id</span><span class="o">=</span><span class="n">poststags1_</span><span class="o">.</span><span class="na">id</span>
<span class="o">=============</span> <span class="nc">PostsTag</span> <span class="n">가져오기</span> <span class="o">=============</span>
<span class="nc">PostsTag</span> <span class="n">id</span> <span class="o">=</span> <span class="mi">5</span>
<span class="o">=============</span> <span class="nc">Tag</span> <span class="n">가져오기</span> <span class="o">=============</span>
<span class="nc">Tag</span> <span class="nc">Name</span> <span class="o">=</span> <span class="n">태그</span> <span class="mi">1</span>
</code></pre></div></div>

<p>쿼리가 1개만 출력된 모습을 확인할 수 있다. <br />
실제로 N+1 문제가 발생한 쿼리랑 차이를 느낄 수 있고 <br />
해당 API를 만번 조회한다치면 쿼리의 양도 3배나 차이가 나게되는 것이다.</p>

<p><br /></p>

<hr />

<p>오늘은 이렇게 N+1 문제가 발생하는 이유와 해결방법을 알아보았는데 <br />
<code class="language-plaintext highlighter-rouge">fetchJoin()</code>외에도 EntityGraph, Batch Size를 통해 해결이 가능하다고한다. <br />
해당 방법에 대해서는 추후 포스팅을 해보도록하려하고, fetchJoin에 대한 원리 공부도 <br />
필요하다고 느껴진다..</p>

<p><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Spring" /><category term="Spring" /><category term="QueryDSL" /><summary type="html"><![CDATA[소개에 앞서 Github 레포지토리에 코드가 올라가 있습니다. Querydsl 라이브러리를 사용하였고, Spring Boot 2.7.10 입니다.]]></summary></entry><entry><title type="html">[Programmers] 3월에 태어난 여성 회원 목록 출력하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/11/sql-womenmarch.html" rel="alternate" type="text/html" title="[Programmers] 3월에 태어난 여성 회원 목록 출력하기 (MySQL)" /><published>2023-04-11T00:00:00+09:00</published><updated>2023-04-11T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/11/sql-womenmarch</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/11/sql-womenmarch.html"><![CDATA[<h2 id="-문제--카테고리-별-상품-개수-구하기">📌 문제 : [카테고리 별 상품 개수 구하기]</h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 식당 리뷰 사이트의 회원 정보를 담은 <code>MEMBER_PROFILE</code> 테이블입니다. <code>MEMBER_PROFILE</code> 테이블은 다음과 같으며 <code>MEMBER_ID</code>, <code>MEMBER_NAME</code>, <code>TLNO</code>, <code>GENDER</code>, <code>DATE_OF_BIRTH</code>는 회원 ID, 회원 이름, 회원 연락처, 성별, 생년월일을 의미합니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>MEMBER_ID</td>
<td>VARCHAR(100)</td>
<td>FALSE</td>
</tr>
<tr>
<td>MEMBER_NAME</td>
<td>VARCHAR(50)</td>
<td>FALSE</td>
</tr>
<tr>
<td>TLNO</td>
<td>VARCHAR(50)</td>
<td>TRUE</td>
</tr>
<tr>
<td>GENDER</td>
<td>VARCHAR(1)</td>
<td>TRUE</td>
</tr>
<tr>
<td>DATE_OF_BIRTH</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>MEMBER_PROFILE</code> 테이블에서 생일이 3월인 여성 회원의 ID, 이름, 성별, 생년월일을 조회하는 SQL문을 작성해주세요. 이때 전화번호가 NULL인 경우는 출력대상에서 제외시켜 주시고, 결과는 회원ID를 기준으로 오름차순 정렬해주세요. </p>

<hr />

<h5>예시</h5>

<p><code>MEMBER_PROFILE</code> 테이블이 다음과 같을 때</p>
<table class="table">
        <thead><tr>
<th>MEMBER_ID</th>
<th>MEMBER_NAME</th>
<th>TLNO</th>
<th>GENDER</th>
<th>DATE_OF_BIRTH</th>
</tr>
</thead>
        <tbody><tr>
<td><code>jiho92@naver.com</code></td>
<td>이지호</td>
<td>01076432111</td>
<td>W</td>
<td>1992-02-12</td>
</tr>
<tr>
<td><code>jiyoon22@hotmail.com</code></td>
<td>김지윤</td>
<td>01032324117</td>
<td>W</td>
<td>1992-02-22</td>
</tr>
<tr>
<td><code>jihoon93@hanmail.net</code></td>
<td>김지훈</td>
<td>01023258688</td>
<td>M</td>
<td>1993-02-23</td>
</tr>
<tr>
<td><code>seoyeons@naver.com</code></td>
<td>박서연</td>
<td>01076482209</td>
<td>W</td>
<td>1993-03-16</td>
</tr>
<tr>
<td><code>yoonsy94@gmail.com</code></td>
<td>윤서연</td>
<td>NULL</td>
<td>W</td>
<td>1994-03-19</td>
</tr>
</tbody>
      </table>
<p>SQL을 실행하면 다음과 같이 출력되어야 합니다.</p>
<table class="table">
        <thead><tr>
<th>MEMBER_ID</th>
<th>MEMBER_NAME</th>
<th>GENDER</th>
<th>DATE_OF_BIRTH</th>
</tr>
</thead>
        <tbody><tr>
<td><code>seoyeons@naver.com</code></td>
<td>박서연</td>
<td>W</td>
<td>1993-03-16</td>
</tr>
</tbody>
      </table>
<hr />

<h5>주의사항</h5>

<p><code>DATE_OF_BIRTH</code>의 데이트 포맷이 예시와 동일해야 정답처리 됩니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>여성회원만 출력해야하므로 WHERE절로 GENDER = ‘W’</li>
  <li>전화번호가 null이 아니여야하므로 TLO is not null</li>
  <li>3월에 태어난 회원만 추출해야하므로 LIKE절을 이용 ‘%-03-%’</li>
  <li>MEMBER_ID 기준으로 오름차순 정렬</li>
</ol>

<pre><code class="language-roomsql">SELECT MEMBER_ID,
    MEMBER_NAME,
    GENDER,
    DATE_FORMAT(DATE_OF_BIRTH,'%Y-%m-%d') AS DATE_OF_BIRTH
FROM MEMBER_PROFILE m
WHERE GENDER = 'W' 
AND TLNO is not null
AND DATE_OF_BIRTH LIKE '%-03-%'
ORDER BY MEMBER_ID ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : [카테고리 별 상품 개수 구하기]]]></summary></entry><entry><title type="html">[DB] Join의 종류</title><link href="http://localhost:4000/db/2023/04/10/db-join.html" rel="alternate" type="text/html" title="[DB] Join의 종류" /><published>2023-04-10T00:00:00+09:00</published><updated>2023-04-10T00:00:00+09:00</updated><id>http://localhost:4000/db/2023/04/10/db-join</id><content type="html" xml:base="http://localhost:4000/db/2023/04/10/db-join.html"><![CDATA[<h3 id="join-이란">Join 이란?</h3>

<p>조인(Join)이란 하나의 테이블이 아닌 두 개 이상의 테이블을 묶어서 하나의 결과물을 만드는 <br />
것을 얘기한다. MySQL에서는 JOIN이라는 쿼리로, MongoDB에서는 lookup이라는 쿼리로 이를 처리한다.</p>

<p>참고로 RDBMS보다 DBMS가 조인연산에 대해 성능이 떨어진다고 벤치마크 테스트에서 알려져 있다. <br />
즉, MongoDB에서는 되도록 lookup을 사용하지 말아야한다. 여러 테이블을 조인하는 작업이 많을 경우 <br />
에는 관계형 데이터베이스를 사용하는게 적합하다.</p>

<p><br /></p>

<h3 id="join의-종류">Join의 종류</h3>

<p><img src="https://user-images.githubusercontent.com/95069395/230895141-c489f559-205c-41e3-8589-d1912b913dc5.png" alt="image" class="align-left" style="max-width: 100%" />   <br />
<a href="https://server-dev.tistory.com/35">그림 출처 - 소찾나님</a></p>

<p>Join의 종류는 위와 같다.</p>

<p>가장 대표적으로 많이 사용하는 조인은 3가지가 있다. (위에 그림에서 상위 3개)</p>
<ul>
  <li>LEFT OUTER JOIN : 왼쪽 테이블의 모든 행이 결과 테이블에 표기된다.</li>
  <li>INNER JOIN : 왼쪽 테이블과 오른쪽 테이블의 두 행이 모두 일치하는 행이 있는 부분만 표기된다.</li>
  <li>RIGHT OUTER JOIN : 오른쪽 테이블의 모든 행이 결과 테이블에 표기된다.</li>
</ul>

<p><br /></p>

<p>테이블을 실제로 만들어서 예제를 적용시켜 보자. <br />
MYSQL을 기준으로 작성을 해본다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/230901387-9a835c93-ab3c-4819-9c68-bdabdf04d4d5.png" alt="image" class="align-left" style="max-width: 70%" /></p>

<p>Member 테이블에는 아래와 같은 정보를 삽입 하였고 (3개)</p>

<p><img src="https://user-images.githubusercontent.com/95069395/230901520-8a76578c-ae85-4ffb-acd4-a5b6c9772c90.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<p>POSTS 테이블에는 아래와 같은 정보를 넣어 두었다. (4걔)</p>

<p><img src="https://user-images.githubusercontent.com/95069395/230901523-b5ec05c4-799e-4e08-8551-4d59c0db526f.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<p><br /></p>

<h4 id="1-left-join">1. LEFT JOIN</h4>

<p><img src="https://user-images.githubusercontent.com/95069395/230900044-2aaddb97-ca1b-482c-96a8-fc370aa38e02.png" alt="image" class="align-left" style="max-width: 60%" /></p>

<p>LEFT JOIN은 LEFT OUTER JOIN과 동일한 말이다. <br />
MEMBER를 A라고 기준을 두고 POST를 B라고 가정하고 SQL을 작성해보자</p>

<pre><code class="language-roomsql">SELECT * 
FROM member m
LEFT JOIN posts p 
ON m.id = p.id;
</code></pre>

<p><img src="https://user-images.githubusercontent.com/95069395/230901518-ce0b6cd7-70b4-4631-a1b0-8ec71125076b.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>실행결과는 위와 같이 나온다. member 테이블의 id와 posts id가 같은걸  <br />
LEFT JOIN을 실행하는 구문이다. member 테이블을 기준으로 조회하기 때문에 <br />
총 3개의 레코드가 표현되어진 것을 볼 수 있다.</p>

<p>반대로 posts 테이블을 A로 두고 SQL문을 작성한다면</p>

<p><img src="https://user-images.githubusercontent.com/95069395/230902997-d95c55d5-93fc-40e1-80aa-049b183b03ea.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위와 같이 posts 테이블을 기준으로 member를 가져오고 <br />
데이터가 없는 자리에는 null이라는 값으로 채워진다.</p>

<p><br /></p>

<h4 id="2-inner-join">2. INNER JOIN</h4>

<p><img src="https://user-images.githubusercontent.com/95069395/230900146-f2c10db6-3b72-4319-8300-abbf44867bf5.png" alt="image" class="align-left" style="max-width: 60%" /></p>

<p>INNER JOIN의 특성은 교집합의 데이터만 가져온다는 것이다.</p>

<pre><code class="language-roomsql">SELECT * 
FROM posts p
JOIN member m
ON m.id = p.id;
</code></pre>

<p><img src="https://user-images.githubusercontent.com/95069395/230903795-8103881d-6769-405c-b045-2d738c1c76f3.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>이번에는 posts를 A로 두고 INNER JOIN을 실행시켜 보았다. <br />
LEFT JOIN에서는 값이 null로 들어왔지만, INNER JOIN에서는 <br />
같은 값만 가져오기 때문에 4번의 행을 가져오지 않은 모습을 볼 수 있다.</p>

<p><br /></p>

<h4 id="3-right-join">3. RIGHT JOIN</h4>

<p><img src="https://user-images.githubusercontent.com/95069395/230900188-d3e84cae-6bbd-46a1-a303-7c4506a2df73.png" alt="image" class="align-left" style="max-width: 60%" /></p>

<p>RIGHT JOIN은 사실상 LEFT JOIN의 반대 개념이기 떄문에 이해하기가 쉽다.</p>

<pre><code class="language-roomsql">SELECT * 
FROM member m
RIGHT JOIN posts p
ON m.id = p.id;
</code></pre>

<p><img src="https://user-images.githubusercontent.com/95069395/230904125-cc4cc4da-499d-49ca-aee2-90de90f2a20d.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>member를 A로 두고 RIGHT JOIN을 시켰을때 위와 같이 <br />
4번째행의 데이터가 없기 때문에 null로 표현되고 posts의 데이터를 <br />
전부 가져온 모습을 볼 수 있다.</p>

<p><br /></p>

<h4 id="4-합집합-join-full-join">4. 합집합 JOIN (FULL JOIN)</h4>

<p><img src="https://user-images.githubusercontent.com/95069395/230905128-d3585cfb-d792-443e-8822-283eb6da9547.png" alt="image" class="align-left" style="max-width: 60%" /></p>

<p>FULL OUTER JOIN이라고도 부른다. MySQL에서는 해당 조인 기능을 지원하지 않는다. <br />
대시 LEFT,RIGHT JOIN과 UNION을 이용해 FULL JOIN처럼 사용이 가능하다.   <br />
(UNION은 여러 테이블에 존재하는 같은 성격의 값을 한번의 쿼리로 출력하도록 돕는 연산자이다.)</p>

<pre><code class="language-roomsql">SELECT * 
FROM member 
LEFT JOIN posts ON member.id = posts.id
UNION
SELECT * 
FROM member
RIGHT JOIN posts ON member.id = posts.id;
</code></pre>

<p><img src="https://user-images.githubusercontent.com/95069395/230906403-88cb0235-7570-4e22-84c7-907cf101b0d6.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>최종적으로 출력해보면 모든 테이블의 데이터를 가져오는 모습을 볼 수 있다.</p>

<p><br /></p>

<h4 id="5-차집합-join">5. 차집합 JOIN</h4>

<p><img src="https://user-images.githubusercontent.com/95069395/230905008-e3ca460b-bb24-4077-8a0c-5667dee6a097.png" alt="image" class="align-left" style="max-width: 60%" /></p>

<p>차집합을 구하는 LEFT, RIGHT JOIN이 있다.  <br />
사실 LEFT, RIGHT JOIN의 개념만 알고 있으면 유추가 가능한 <br />
부분이므로 간단하게 설명하고 넘어가겠다.</p>

<pre><code class="language-roomsql">SELECT * 
FROM posts p
LEFT JOIN member m
ON m.id = p.id WHERE m.id IS NULL;
</code></pre>

<p><img src="https://user-images.githubusercontent.com/95069395/230905244-6dc18827-fcde-49b1-b373-9f99c0a79c01.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>현재 차집합을 테스트해보려면 수량이 많은 posts 테이블을 A로 두어야했다.<br />
따라서 member 테이블을 B로 두었다.   <br />
LEFT JOIN에서 추가된 코드는 <code class="language-plaintext highlighter-rouge">m.id IS NULL</code>만 추가되었다.<br />
member 테이블의 id가 null인 값들만 가져오게하는 구문이다. <br />
말은 즉슨, A만 가지고 있는 값만 표시하겠다라는 의미와 동일하고 그래서 출력이 4번만 나온 것이다.</p>

<p><br /></p>

<h3 id="join-원리">JOIN 원리</h3>

<h4 id="1-중첩-루프-조인">1. 중첩 루프 조인</h4>

<p>Nested Loop Join이라고 부르며<br />
중첩 루프 조인은 중첩 for문과 같은 원리로 조건에 맞는 조인을 하는 방법이다. <br />
랜덤 접근에 대한 비용이 많이 증가하므로 대용량의 테이블에서는 사용하지 않는다.</p>

<p>JOIN을 할 때 먼저 액세스 되어 ACCESS PATH를 주도하는 테이블을 Driving Table이라고 하고 <br />
나중에 엑세스 되는 테이블을 Driven Table 이라고 한다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> for(i=0; i&lt;dept.length; i++) { -- driving table 
    for(j=0; j&lt;emp.length; j++) { -- driven table
       // Search
    } 
}
</code></pre></div></div>

<p><br /></p>

<h4 id="2-정렬-병합-조인">2. 정렬 병합 조인</h4>

<p>Sort Merge Join이라고 부르며 <br />
조회의 범위가 많을 때 주로 사용하는 조인 방법론이다. <br />
양쪽 테이블을 각각 Access 하여 그 결과를 정렬하고 그 정렬한 결과를 차례로 <br />
Scan 해 나가면서 연결고리의 조건으로 Merge를 하는 방식이다. 주로 칼럼에 인덱스 없거나 <br />
출력해야할 결과 값이 많을 때 사용한다. 중첩 루프 조인의 조인 방식과 장단점이 서로 바뀌었다고 <br />
생각하면 이해하기가 쉽다.</p>

<p><br /></p>

<h4 id="3-해쉬-조인">3. 해쉬 조인</h4>

<p>Hash Join은 두 테이블 중 하나를 해시 테이블로 선정하여 조인될 테이블의 <br />
조인 키 값을 해시 알고리즘으로 비교하여 매치되는 결과값을 얻는 방식입니다. <br />
주로 많은 양의 데이터를 조인해야 하는 경우 주로 사용하고    <br />
JOIN 칼럼에 인덱스가 없어 중첩 루프 조인이 비효율적일 떄 사용한다.</p>

<p><img src="" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="DB" /><category term="DB" /><summary type="html"><![CDATA[Join 이란?]]></summary></entry><entry><title type="html">[Programmers] 카테고리 별 상품 개수 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/10/sql-productcode.html" rel="alternate" type="text/html" title="[Programmers] 카테고리 별 상품 개수 구하기 (MySQL)" /><published>2023-04-10T00:00:00+09:00</published><updated>2023-04-10T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/10/sql-productcode</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/10/sql-productcode.html"><![CDATA[<h2 id="-문제--카테고리-별-상품-개수-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131529">카테고리 별 상품 개수 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 의류 쇼핑몰에서 판매중인 상품들의 정보를 담은 <code>PRODUCT</code> 테이블입니다. <code>PRODUCT</code> 테이블은 아래와 같은 구조로 되어있으며, <code>PRODUCT_ID</code>, <code>PRODUCT_CODE</code>, <code>PRICE</code>는 각각 상품 ID, 상품코드, 판매가를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>PRODUCT_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_CODE</td>
<td>VARCHAR(8)</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRICE</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>상품 별로 중복되지 않는 8자리 상품코드 값을 가지며, 앞 2자리는 카테고리 코드를 의미합니다.</p>

<hr />

<h5>문제</h5>

<p><code>PRODUCT</code> 테이블에서 상품 카테고리 코드(<code>PRODUCT_CODE</code> 앞 2자리) 별 상품 개수를 출력하는 SQL문을 작성해주세요. 결과는 상품 카테고리 코드를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>PRODUCT</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>PRODUCT_ID</th>
<th>PRODUCT_CODE</th>
<th>PRICE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>A1000011</td>
<td>10000</td>
</tr>
<tr>
<td>2</td>
<td>A1000045</td>
<td>9000</td>
</tr>
<tr>
<td>3</td>
<td>C3000002</td>
<td>22000</td>
</tr>
<tr>
<td>4</td>
<td>C3000006</td>
<td>15000</td>
</tr>
<tr>
<td>5</td>
<td>C3000010</td>
<td>30000</td>
</tr>
<tr>
<td>6</td>
<td>K1000023</td>
<td>17000</td>
</tr>
</tbody>
      </table>
<p>상품 카테고리 코드 별 상품은 아래와 같으므로,</p>

<ul>
<li><code>A1</code>: <code>PRODUCT_ID</code>가 1, 2 인 상품</li>
<li><code>C3</code>: <code>PRODUCT_ID</code>가 3, 4, 5 인 상품</li>
<li><code>K1</code>: <code>PRODUCT_ID</code>가 6 인 상품</li>
</ul>

<p>다음과 같은 결과가 나와야 합니다.</p>
<table class="table">
        <thead><tr>
<th>CATEGORY</th>
<th>PRODUCTS</th>
</tr>
</thead>
        <tbody><tr>
<td>A1</td>
<td>2</td>
</tr>
<tr>
<td>C3</td>
<td>3</td>
</tr>
<tr>
<td>K1</td>
<td>1</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>LEFT를 이용해 문자열을 자른다.</li>
  <li>COUNT를 이용해 자른 PRODUCT_CODE를 집계한다.</li>
</ol>

<pre><code class="language-roomsql">SELECT LEFT(PRODUCT_CODE,2) AS CATEGORY,
    COUNT(PRODUCT_CODE) AS PRODUCTS
FROM PRODUCT
GROUP BY CATEGORY
ORDER BY CATEGORY ASC;
</code></pre>

<p>여기서 알아야할 문법은 LEFT 문법이다. <br />
유사 문법으로는 RIGHT, SUBSTRING 등이 있으니 참고하자</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 카테고리 별 상품 개수 구하기]]></summary></entry><entry><title type="html">[Programmers] 가격대 별 상품 개수 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/09/sql-priceproduct.html" rel="alternate" type="text/html" title="[Programmers] 가격대 별 상품 개수 구하기 (MySQL)" /><published>2023-04-09T00:00:00+09:00</published><updated>2023-04-09T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/09/sql-priceproduct</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/09/sql-priceproduct.html"><![CDATA[<h2 id="-문제--가격대-별-상품-개수-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131530">가격대 별 상품 개수 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 의류 쇼핑몰에서 판매중인 상품들의 정보를 담은 <code>PRODUCT</code> 테이블입니다. <code>PRODUCT</code> 테이블은 아래와 같은 구조로 되어있으며, <code>PRODUCT_ID</code>, <code>PRODUCT_CODE</code>, <code>PRICE</code>는 각각 상품 ID, 상품코드, 판매가를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>PRODUCT_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_CODE</td>
<td>VARCHAR(8)</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRICE</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>상품 별로 중복되지 않는 8자리 상품코드 값을 가지며 앞 2자리는 카테고리 코드를 나타냅니다.</p>

<hr />

<h5>문제</h5>

<p><code>PRODUCT</code> 테이블에서 만원 단위의 가격대 별로 상품 개수를 출력하는 SQL 문을 작성해주세요. 이때 컬럼명은 각각 컬럼명은 PRICE_GROUP, PRODUCTS로 지정해주시고 가격대 정보는 각 구간의 최소금액(10,000원 이상 ~ 20,000 미만인 구간인 경우 10,000)으로 표시해주세요. 결과는 가격대를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>PRODUCT</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>PRODUCT_ID</th>
<th>PRODUCT_CODE</th>
<th>PRICE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>A1000011</td>
<td>10000</td>
</tr>
<tr>
<td>2</td>
<td>A1000045</td>
<td>9000</td>
</tr>
<tr>
<td>3</td>
<td>C3000002</td>
<td>22000</td>
</tr>
<tr>
<td>4</td>
<td>C3000006</td>
<td>15000</td>
</tr>
<tr>
<td>5</td>
<td>C3000010</td>
<td>30000</td>
</tr>
<tr>
<td>6</td>
<td>K1000023</td>
<td>17000</td>
</tr>
</tbody>
      </table>
<p>만원 단위의 가격대 별로 상품을 나누면</p>

<ul>
<li>가격대가 0원 ~ 1만원 미만인 상품은 <code>PRODUCT_ID</code> 가 2인 상품 1개,</li>
<li>가격대가 1만원 이상 ~ 2만원 미만인 상품들은 <code>PRODUCT_ID</code> 가 1, 4, 6인 상품 3개,</li>
<li>가격대가 2만원 이상 ~ 3만원 미만인 상품은 <code>PRODUCT_ID</code> 가 3인 상품 1개,</li>
<li>가격대가 3만원 이상 ~ 4만원 미만인 상품은 <code>PRODUCT_ID</code> 가 5인 상품 1개,</li>
</ul>

<p>에 각각 해당하므로 다음과 같이 결과가 나와야 합니다.</p>
<table class="table">
        <thead><tr>
<th>PRICE_GROUP</th>
<th>PRODUCTS</th>
</tr>
</thead>
        <tbody><tr>
<td>0</td>
<td>1</td>
</tr>
<tr>
<td>10000</td>
<td>3</td>
</tr>
<tr>
<td>20000</td>
<td>1</td>
</tr>
<tr>
<td>30000</td>
<td>1</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>CASE WHEN을 이용하여 가격별 집계를 할 수 있도록 만들어준다.</li>
  <li>PRICE의 수량을 PRODUCTS 컬럼으로 묶어준다.</li>
  <li>GROUP BY를 이용해 집계를 한다.</li>
  <li>PRICE_GROUP 오름차순으로 정렬한다.</li>
</ol>

<pre><code class="language-RoomSql">SELECT CASE 
WHEN PRICE BETWEEN 0 AND 9999 THEN 0
WHEN PRICE BETWEEN 10000 AND 19999 THEN 10000
WHEN PRICE BETWEEN 20000 AND 29999 THEN 20000
WHEN PRICE BETWEEN 30000 AND 39999 THEN 30000
WHEN PRICE BETWEEN 40000 AND 49999 THEN 40000
WHEN PRICE BETWEEN 50000 AND 59999 THEN 50000
WHEN PRICE BETWEEN 60000 AND 69999 THEN 60000
WHEN PRICE BETWEEN 70000 AND 79999 THEN 70000
WHEN PRICE BETWEEN 80000 AND 89999 THEN 80000
END AS PRICE_GROUP, 
COUNT(PRICE) AS PRODUCTS
FROM PRODUCT
GROUP BY PRICE_GROUP
ORDER BY PRICE_GROUP ASC;
</code></pre>

<p>문제에서는 0~4만원까지 밖에 없어서 4만원까지 풀이했다가 왜 안풀리지 하고 헷갈렸다.. <br />
<code class="language-plaintext highlighter-rouge">SELECT * FROM PRODUCT</code> 를 해보니 9만원까지 나와서 9만원까지 집계하였다.</p>

<p><br /></p>

<p>또 다른 풀이 방법으로는</p>

<pre><code class="language-roomsql">SELECT  FLOOR(PRICE/10000)*10000 AS PRICE_GROUP,
        COUNT(*) AS PRODUCTS
  FROM  product
 GROUP 
    BY  PRICE_GROUP
 ORDER
    BY  PRICE_GROUP ASC
</code></pre>
<p>과 같이 소수점을 제거하는 함수인 <code class="language-plaintext highlighter-rouge">FLOOR</code>를 이용한 풀이를 할 수 있다.    <br />
가격을 만원 단위로 나눠서 소수점을 버리고 만원씩 곱해주면  <br />
CASE 문법보다 훨씬 깔끔하게 풀이가 가능하다.</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 가격대 별 상품 개수 구하기]]></summary></entry><entry><title type="html">MySQL Foreign key 설정하기</title><link href="http://localhost:4000/db/2023/04/07/db-mysqlforeign.html" rel="alternate" type="text/html" title="MySQL Foreign key 설정하기" /><published>2023-04-07T00:00:00+09:00</published><updated>2023-04-07T00:00:00+09:00</updated><id>http://localhost:4000/db/2023/04/07/db-mysqlforeign</id><content type="html" xml:base="http://localhost:4000/db/2023/04/07/db-mysqlforeign.html"><![CDATA[<p>MySQL Foreign Key를 설정하는 방법을 적어보려한다. <br />
간단하게 아래와 같은 테이블을 준비했다.</p>

<p>스키마 이름은 sqlpractice로 설정하였다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/230547251-d9b554a7-85a0-4430-9aa2-5b1f4548b431.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>SQL문은 아래와 같이 작성하면 테이블이 생성되고</p>

<pre><code class="language-roomsql">CREATE TABLE sqlpractice.posts (
    id BIGINT NOT NULL PRIMARY KEY,
    title VARCHAR(255) NOT NULL
);

CREATE TABLE sqlpractice.tag (
    id BIGINT NOT NULL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(255) NOT NULL
);

CREATE TABLE sqlpractice.posts_tag (
    id BIGINT NOT NULL PRIMARY KEY,
    posts_id BIGINT NOT NULL,
    tag_id BIGINT NOT NULL
);
</code></pre>

<p><br /></p>

<p>FOREIGN KEY를 설정하기전에 관계를 살펴보자</p>

<p>1 : N : 1 관계의 테이블이고 <br />
POSTS_TAG가 연관관계의 주인이며 POSTS의 PK를 FK로 가지고 있고 <br />
TAG의 PK를 FK로 가지고 있는 상태이다.</p>

<p>FOREIGN KEY 설정 문법은 아래와 같다</p>
<pre><code class="language-roomsql">ALTER TABLE 테이블명 ADD 
FOREIGN KEY (컬럼명) REFERENCES 대상 테이블명 (컬럼명);
</code></pre>

<p><br /></p>

<p>위의 관계도처럼 POSTS_TAG 테이블에 FOREIGN KEY를 설정하려면 아래와 같이 입력하면된다.</p>

<pre><code class="language-roomsql">ALTER TABLE sqlpractice.posts_tag ADD 
FOREIGN KEY (posts_id) REFERENCES sqlpractice.posts(id);

ALTER TABLE sqlpractice.posts_tag ADD 
FOREIGN KEY (tag_id) REFERENCES sqlpractice.tag(id);
</code></pre>

<p><br />
<br />
<br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="DB" /><category term="DB" /><category term="MySQL" /><summary type="html"><![CDATA[MySQL Foreign Key를 설정하는 방법을 적어보려한다. 간단하게 아래와 같은 테이블을 준비했다.]]></summary></entry><entry><title type="html">[Programmers] 재구매가 일어난 상품과 회원 리스트 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/07/sql-duplicationproduct.html" rel="alternate" type="text/html" title="[Programmers] 재구매가 일어난 상품과 회원 리스트 구하기 (MySQL)" /><published>2023-04-07T00:00:00+09:00</published><updated>2023-04-07T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/07/sql-duplicationproduct</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/07/sql-duplicationproduct.html"><![CDATA[<h2 id="-문제--재구매가-일어난-상품과-회원-리스트-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131536">재구매가 일어난 상품과 회원 리스트 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 의류 쇼핑몰의 온라인 상품 판매 정보를 담은 <code>ONLINE_SALE</code> 테이블 입니다. <code>ONLINE_SALE</code> 테이블은 아래와 같은 구조로 되어있으며 <code>ONLINE_SALE_ID</code>, <code>USER_ID</code>, <code>PRODUCT_ID</code>, <code>SALES_AMOUNT</code>, <code>SALES_DATE</code>는 각각 온라인 상품 판매 ID, 회원 ID, 상품 ID, 판매량, 판매일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>ONLINE_SALE_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>USER_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_AMOUNT</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>동일한 날짜, 회원 ID, 상품 ID 조합에 대해서는 하나의 판매 데이터만 존재합니다.</p>

<hr />

<h5>문제</h5>

<p><code>ONLINE_SALE</code> 테이블에서 동일한 회원이 동일한 상품을 재구매한 데이터를 구하여, 재구매한 회원 ID와 재구매한 상품 ID를 출력하는 SQL문을 작성해주세요. 결과는 회원 ID를 기준으로 오름차순 정렬해주시고 회원 ID가 같다면 상품 ID를 기준으로 내림차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>ONLINE_SALE</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>ONLINE_SALE_ID</th>
<th>USER_ID</th>
<th>PRODUCT_ID</th>
<th>SALES_AMOUNT</th>
<th>SALES_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>3</td>
<td>2</td>
<td>2022-02-25</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>2022-03-01</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>4</td>
<td>2</td>
<td>2022-03-12</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>3</td>
<td>3</td>
<td>2022-03-31</td>
</tr>
<tr>
<td>5</td>
<td>3</td>
<td>5</td>
<td>1</td>
<td>2022-04-03</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
<td>4</td>
<td>1</td>
<td>2022-04-06</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>4</td>
<td>2</td>
<td>2022-05-11</td>
</tr>
</tbody>
      </table>
<p><code>USER_ID</code> 가 1인 유저가 <code>PRODUCT_ID</code> 가 3, 4인 상품들을 재구매하고, <code>USER_ID</code> 가 2인 유저가 <code>PRODUCT_ID</code> 가 4인 상품을 재구매 하였으므로, 다음과 같이 결과가 나와야합니다.</p>
<table class="table">
        <thead><tr>
<th>USER_ID</th>
<th>PRODUCT_ID</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>ONLINE_SALE 테이블에서 USER_ID, PRODUCT_ID를 가져온다.</li>
  <li>USER_ID, PRODUCT_ID를 GROUP BY하여 HAVING절로 2이상인 값(재구매한 값)을 찾기</li>
  <li>USER_ID 오름차순 정렬 후 같을 경우 PRODUCT_ID 내림차순 정렬</li>
</ol>

<pre><code class="language-RoomSql">SELECT USER_ID,
    PRODUCT_ID
FROM ONLINE_SALE
GROUP BY USER_ID, PRODUCT_ID
HAVING COUNT(PRODUCT_ID) &gt;= 2
ORDER BY USER_ID ASC, PRODUCT_ID DESC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 재구매가 일어난 상품과 회원 리스트 구하기]]></summary></entry><entry><title type="html">[Spring] QueryDSL DTO 조회 방법</title><link href="http://localhost:4000/spring/2023/04/07/spring-querydsladvance.html" rel="alternate" type="text/html" title="[Spring] QueryDSL DTO 조회 방법" /><published>2023-04-07T00:00:00+09:00</published><updated>2023-04-07T00:00:00+09:00</updated><id>http://localhost:4000/spring/2023/04/07/spring-querydsladvance</id><content type="html" xml:base="http://localhost:4000/spring/2023/04/07/spring-querydsladvance.html"><![CDATA[<h2 id="querydsl">QueryDSL</h2>

<h3 id="테스트-코드">테스트 코드</h3>

<p>이전에 작성했던 <a href="https://mycatlikeschuru.github.io/spring/2023/04/04/spring-querydsl.html">QueryDSL 기초설정 및 JPQL과 비교해보기</a>에서 <br />
이어서 작업을 진행하였다. 클래스와 테스트코드는 동일하게 사용했고</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuerydslBasicTestPractice</span> <span class="o">{</span>

   <span class="nd">@Autowired</span>
   <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>

   <span class="nc">JPAQueryFactory</span> <span class="n">queryFactory</span><span class="o">;</span>

   <span class="nd">@PersistenceUnit</span>
   <span class="nc">EntityManagerFactory</span> <span class="n">emf</span><span class="o">;</span>

   <span class="nd">@BeforeEach</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
      <span class="n">queryFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JPAQueryFactory</span><span class="o">(</span><span class="n">em</span><span class="o">);</span>
      <span class="nc">Team</span> <span class="n">teamA</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">);</span>
      <span class="nc">Team</span> <span class="n">teamB</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">(</span><span class="s">"teamB"</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">teamA</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">teamB</span><span class="o">);</span>

      <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member1"</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="n">teamA</span><span class="o">);</span>
      <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member2"</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="n">teamA</span><span class="o">);</span>
      <span class="nc">Member</span> <span class="n">member3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member3"</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="n">teamB</span><span class="o">);</span>
      <span class="nc">Member</span> <span class="n">member4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member4"</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="n">teamB</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member3</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member4</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Team 객체 2개와 Member 객체 4개를 만들어서 테스트를 진행했다. <br />
아래의 코드는 위의 @BeforeEach를 통해 만들어진 객체를 기준으로 생각하면된다.</p>

<p><br /></p>

<h3 id="dto-클래스-작성">DTO 클래스 작성</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="nd">@NoArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberDto</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MemberDto</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>DTO클래스는 위와 같이 작성했다.</p>

<p><br /></p>

<h3 id="프로젝션과-결과-반환---dto-조회">프로젝션과 결과 반환 - DTO 조회</h3>

<h4 id="jpql을-이용한-방법">JPQL을 이용한 방법</h4>

<p>먼저 QueryDsl 사용 이전에 어떻게 사용하였는지?<br />
순수 JPA에서 DTO를 조회할때 사용하는 방법이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findDtoByJPQL</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select new study.querydsl.dto.MemberDto(m.username, m.age) from Member m"</span><span class="o">,</span> <span class="nc">MemberDto</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">MemberDto</span> <span class="n">memberDto</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"memberDto = "</span> <span class="o">+</span> <span class="n">memberDto</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>new 명령어를 이용해 패키지 이름을 적어줘야해서 지저분해지는 코드고 <br />
패지키이름을 매번적기에 상당히 번거롭다.</p>

<p><br /></p>

<h4 id="querydsl을-이용한-방법">QueryDsl을 이용한 방법</h4>

<p>결과를 DTO로 반환할 떄 사용하는 방법은 총 3가지가 있다.</p>

<ol>
  <li>프로퍼티 접근</li>
  <li>필드 직접 접근</li>
  <li>생성자 사용</li>
</ol>

<p>예제를 통해 살펴보자</p>

<p><br /></p>

<p><strong>1). 프로퍼티 접근방식</strong></p>

<p><code class="language-plaintext highlighter-rouge">getter</code>, <code class="language-plaintext highlighter-rouge">setter</code>를 이용한 값을 주입하는 방법이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findDtoBySetter</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="nc">Projections</span><span class="o">.</span><span class="na">bean</span><span class="o">(</span>
                        <span class="nc">MemberDto</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">))</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">MemberDto</span> <span class="n">memberDto</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"memberDto = "</span> <span class="o">+</span> <span class="n">memberDto</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
<span class="c1">// 출력 내용</span>
<span class="n">memberDto</span> <span class="o">=</span> <span class="nc">MemberDto</span><span class="o">(</span><span class="n">username</span><span class="o">=</span><span class="n">member1</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">10</span><span class="o">)</span>
<span class="n">memberDto</span> <span class="o">=</span> <span class="nc">MemberDto</span><span class="o">(</span><span class="n">username</span><span class="o">=</span><span class="n">member2</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">20</span><span class="o">)</span>
<span class="n">memberDto</span> <span class="o">=</span> <span class="nc">MemberDto</span><span class="o">(</span><span class="n">username</span><span class="o">=</span><span class="n">member3</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">30</span><span class="o">)</span>
<span class="n">memberDto</span> <span class="o">=</span> <span class="nc">MemberDto</span><span class="o">(</span><span class="n">username</span><span class="o">=</span><span class="n">member4</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">40</span><span class="o">)</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Projections.bean()</code>을 이용해 Dto타입을 지정해주고<br />
저장할 데이터를 지정해주면 된다. 여기서 중요한점은</p>

<p><code class="language-plaintext highlighter-rouge">getter</code>, <code class="language-plaintext highlighter-rouge">setter</code> 가 있어야 가능하다. <br />
(MemberDto에는 <code class="language-plaintext highlighter-rouge">@Data</code>가 있어서 getter,setter를 사용함)</p>

<p>또한 기본생성자가 존재해야 가능하다.</p>

<p><br /></p>

<p><strong>2). 필드 직접 접근방식</strong></p>

<p>위의 코드와 동일하지만 <code class="language-plaintext highlighter-rouge">Projections.fields()</code>만 변경 되었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findDtoByField</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="nc">Projections</span><span class="o">.</span><span class="na">fields</span><span class="o">(</span>
                        <span class="nc">MemberDto</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">))</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">MemberDto</span> <span class="n">memberDto</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"memberDto = "</span> <span class="o">+</span> <span class="n">memberDto</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>1번과의 차이점은 <code class="language-plaintext highlighter-rouge">getter</code>, <code class="language-plaintext highlighter-rouge">setter</code>가 없어도 가능하다는 점이다. <br />
필드에 바로 데이터를 삽입을 해준다. 여기서도 기본생성자는 있어야한다.</p>

<p><br /></p>

<p><strong>3). 생성자 사용방식</strong></p>

<p>생성자 사용방식도 위의 코드와 동일하지만 <code class="language-plaintext highlighter-rouge">Projections.constructor()</code>만 변경 되었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findDtoByConstructor</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">MemberDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="nc">Projections</span><span class="o">.</span><span class="na">constructor</span><span class="o">(</span>
                        <span class="nc">MemberDto</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">))</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">MemberDto</span> <span class="n">memberDto</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"memberDto = "</span> <span class="o">+</span> <span class="n">memberDto</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>생성자를 이용하는방법이 <code class="language-plaintext highlighter-rouge">MemberDto</code> 클래스의 생성자를 이용해서 값을 넣어준다. <br />
이와 같은 경우는 기본생성자가 없어도 가능하고</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="nf">MemberDto</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"나호출됨"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>와 같은 생성자가 존재하는데 위에 생성자가 직접 호출되기 때문에  <br />
생성자 안에 출력을 넣어 <code class="language-plaintext highlighter-rouge">System.out.println("나호출됨");</code> 테스트를 실행하면</p>

<p><code class="language-plaintext highlighter-rouge">나호출됨</code>이라는 출력문이 4번 출력된 것을 확인할 수 있다. <br />
(member 테이블에 4개가 있기 떄문에)</p>

<p><br /></p>

<p><strong>❗️필드 접근방식에서 Q타입 객체와 Dto의 이름이 다를경우</strong></p>

<p>예를 들어 <code class="language-plaintext highlighter-rouge">Member</code> 클래스의 <code class="language-plaintext highlighter-rouge">이름이 = username</code> 으로 지정되어 있고 <br />
<code class="language-plaintext highlighter-rouge">UserDto</code>의 <code class="language-plaintext highlighter-rouge">이름이 = name</code> 으로 지정되어 있다고 가정해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserDto</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">UserDto</code> 클래스가 이렇게 지정되어 있다고 가정하고 <br />
2번 방법인 필드 직접 접근방식을 사용해서 작성해보면</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findUserDtoByField</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">UserDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="nc">Projections</span><span class="o">.</span><span class="na">fields</span><span class="o">(</span>
                        <span class="nc">UserDto</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">))</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">UserDto</span> <span class="n">userDto</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"userDto = "</span> <span class="o">+</span> <span class="n">userDto</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span> 
<span class="c1">// 출력 내용  </span>
<span class="n">userDto</span> <span class="o">=</span> <span class="nc">UserDto</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="kc">null</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">10</span><span class="o">)</span>
<span class="n">userDto</span> <span class="o">=</span> <span class="nc">UserDto</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="kc">null</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">20</span><span class="o">)</span>
<span class="n">userDto</span> <span class="o">=</span> <span class="nc">UserDto</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="kc">null</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">30</span><span class="o">)</span>
<span class="n">userDto</span> <span class="o">=</span> <span class="nc">UserDto</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="kc">null</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">40</span><span class="o">)</span>
</code></pre></div></div>
<p>와 같은 방법으로 쿼리를 작성할 수 있다. 하지만 위와 같이 name은 null로 <br />
표현되는 모습을 볼 수 있다. 이유는 같은 이름이 매칭이 안되기 때문이다.</p>

<p>이를 해결하기 위해서 우리는 별칭(AS)를 붙여 해결이 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findUserDtoByField</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">UserDto</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="nc">Projections</span><span class="o">.</span><span class="na">fields</span><span class="o">(</span>
                        <span class="nc">UserDto</span><span class="o">.</span><span class="na">class</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="s">"name"</span><span class="o">),</span> <span class="c1">// &lt;- Alias 붙인곳</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">))</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">UserDto</span> <span class="n">userDto</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"userDto = "</span> <span class="o">+</span> <span class="n">userDto</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="c1">// 출력 내용 </span>
<span class="n">userDto</span> <span class="o">=</span> <span class="nc">UserDto</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="n">member1</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">10</span><span class="o">)</span>
<span class="n">userDto</span> <span class="o">=</span> <span class="nc">UserDto</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="n">member2</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">20</span><span class="o">)</span>
<span class="n">userDto</span> <span class="o">=</span> <span class="nc">UserDto</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="n">member3</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">30</span><span class="o">)</span>
<span class="n">userDto</span> <span class="o">=</span> <span class="nc">UserDto</span><span class="o">(</span><span class="n">name</span><span class="o">=</span><span class="n">member4</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">40</span><span class="o">)</span>
</code></pre></div></div>
<p>와 같이 <code class="language-plaintext highlighter-rouge">.as()</code>를 이용해 Dto이름과 Entity의 이름이 상이해도 해결이 가능하다.</p>

<p>서브쿼리의 별칭을 붙여야할 경우에는</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">ExpressionUtils</span><span class="o">.</span><span class="na">as</span><span class="o">(</span><span class="nc">JPAExpressions</span>
        <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">memberSub</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">max</span><span class="o">())</span>
        <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">memberSub</span><span class="o">),</span> <span class="s">"age"</span><span class="o">)</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">ExpressionUtils.as(서브쿼리, 별칭)</code>과 같은 방식으로 사용할 수 있다.</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Spring" /><category term="Spring" /><category term="QueryDSL" /><summary type="html"><![CDATA[QueryDSL]]></summary></entry><entry><title type="html">[Programmers] 진료과별 총 예약 횟수 출력하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/06/sql-resevecount.html" rel="alternate" type="text/html" title="[Programmers] 진료과별 총 예약 횟수 출력하기 (MySQL)" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/06/sql-resevecount</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/06/sql-resevecount.html"><![CDATA[<h2 id="-문제--진료과별-총-예약-횟수-출력하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/132202">진료과별 총 예약 횟수 출력하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 종합병원의 진료 예약정보를 담은 <code>APPOINTMENT</code> 테이블 입니다.<br />
<code>APPOINTMENT</code> 테이블은 다음과 같으며 <code>APNT_YMD</code>, <code>APNT_NO</code>, <code>PT_NO</code>, <code>MCDP_CD</code>, <code>MDDR_ID</code>, <code>APNT_CNCL_YN</code>, <code>APNT_CNCL_YMD</code>는 각각 진료예약일시, 진료예약번호, 환자번호, 진료과코드, 의사ID, 예약취소여부, 예약취소날짜를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>APNT_YMD</td>
<td>TIMESTAMP</td>
<td>FALSE</td>
</tr>
<tr>
<td>APNT_NO</td>
<td>NUMBER(5)</td>
<td>FALSE</td>
</tr>
<tr>
<td>PT_NO</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
<tr>
<td>MCDP_CD</td>
<td>VARCHAR(6)</td>
<td>FALSE</td>
</tr>
<tr>
<td>MDDR_ID</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
<tr>
<td>APNT_CNCL_YN</td>
<td>VARCHAR(1)</td>
<td>TRUE</td>
</tr>
<tr>
<td>APNT_CNCL_YMD</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>APPOINTMENT</code> 테이블에서 2022년 5월에 예약한 환자 수를 진료과코드 별로 조회하는 SQL문을 작성해주세요. 이때, 컬럼명은 '진료과 코드', '5월예약건수'로 지정해주시고 결과는 진료과별 예약한 환자 수를 기준으로 오름차순 정렬하고, 예약한 환자 수가 같다면 진료과 코드를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p><code>APPOINTMENT</code> 테이블이 다음과 같을 때</p>
<table class="table">
        <thead><tr>
<th>APNT_YMD</th>
<th>APNT_NO</th>
<th>PT_NO</th>
<th>MCDP_CD</th>
<th>MDDR_ID</th>
<th>APNT_CNCL_YN</th>
<th>APNT_CNCL_YMD</th>
</tr>
</thead>
        <tbody><tr>
<td>2022-04-14 09:30:00.000000</td>
<td>47</td>
<td>PT22000064</td>
<td>GS</td>
<td>DR20170123</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-04-15 10:30:00.000000</td>
<td>48</td>
<td>PT22000065</td>
<td>OB</td>
<td>DR20100231</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-15 17:30:00.000000</td>
<td>49</td>
<td>PT22000086</td>
<td>OB</td>
<td>DR20100231</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-18 10:30:00.000000</td>
<td>52</td>
<td>PT22000019</td>
<td>GS</td>
<td>DR20100039</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-19 12:00:00.000000</td>
<td>53</td>
<td>PT22000020</td>
<td>FM</td>
<td>DR20010112</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-22 08:30:00.000000</td>
<td>54</td>
<td>PT22000021</td>
<td>GS</td>
<td>DR20100039</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-04 10:30:00.000000</td>
<td>56</td>
<td>PT22000023</td>
<td>FM</td>
<td>DR20090112</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-14 15:30:00.000000</td>
<td>57</td>
<td>PT22000074</td>
<td>CS</td>
<td>DR20200012</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-24 15:30:00.000000</td>
<td>58</td>
<td>PT22000085</td>
<td>CS</td>
<td>DR20200012</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-28 10:00:00.000000</td>
<td>60</td>
<td>PT22000092</td>
<td>OS</td>
<td>DR20100031</td>
<td>N</td>
<td>NULL</td>
</tr>
</tbody>
      </table>
<p>SQL을 실행하면 다음과 같이 출력되어야 합니다.</p>
<table class="table">
        <thead><tr>
<th>진료과코드</th>
<th>5월예약건수</th>
</tr>
</thead>
        <tbody><tr>
<td>OB</td>
<td>1</td>
</tr>
<tr>
<td>OS</td>
<td>1</td>
</tr>
<tr>
<td>CS</td>
<td>2</td>
</tr>
<tr>
<td>FM</td>
<td>2</td>
</tr>
<tr>
<td>GS</td>
<td>2</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>COUNT를 이용하여 예약한 건수의 행의 합을 그룹핑시킴</li>
  <li>WHERE LIKE절을 이용해 22년 5월의 예약건수만 출력</li>
  <li><code class="language-plaintext highlighter-rouge">5월의예약건수</code>를 오름차순으로 정렬 = COUNT(a.MCDP_CD) ASC</li>
  <li>3번이 동일할 경우 <code class="language-plaintext highlighter-rouge">진료과코드</code>로 오름차순으로 정렬 = a.MCDP_CD ASC</li>
</ol>

<pre><code class="language-RoomSql">SELECT a.MCDP_CD AS '진료과코드', 
    COUNT(a.MCDP_CD) AS '5월예약건수'
FROM APPOINTMENT a
WHERE a.APNT_YMD LIKE '2022-05%'
GROUP BY a.MCDP_CD
ORDER BY COUNT(a.MCDP_CD) ASC, a.MCDP_CD ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 진료과별 총 예약 횟수 출력하기]]></summary></entry><entry><title type="html">[Programmers] 성분으로 구분한 아이스크림 총 주문량 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/05/sql-icecream.html" rel="alternate" type="text/html" title="[Programmers] 성분으로 구분한 아이스크림 총 주문량 (MySQL)" /><published>2023-04-05T00:00:00+09:00</published><updated>2023-04-05T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/05/sql-icecream</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/05/sql-icecream.html"><![CDATA[<h2 id="-문제--성분으로-구분한-아이스크림-총-주문량">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/133026">성분으로 구분한 아이스크림 총 주문량</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 아이스크림 가게의 상반기 주문 정보를 담은 <code>FIRST_HALF</code> 테이블과 아이스크림 성분에 대한 정보를 담은 <code>ICECREAM_INFO</code> 테이블입니다. <code>FIRST_HALF</code> 테이블 구조는 다음과 같으며, <code>SHIPMENT_ID</code>, <code>FLAVOR</code>, <code>TOTAL_ORDER</code> 는 각각 아이스크림 공장에서 아이스크림 가게까지의 출하 번호, 아이스크림 맛, 상반기 아이스크림 총주문량을 나타냅니다. <code>FIRST_HALF</code> 테이블의 기본 키는 <code>FLAVOR</code>입니다.</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">NAME</th>
<th style="text-align: left">TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">SHIPMENT_ID</td>
<td style="text-align: left">INT(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">FLAVOR</td>
<td style="text-align: left">VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">TOTAL_ORDER</td>
<td style="text-align: left">INT(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p><code>ICECREAM_INFO</code> 테이블 구조는 다음과 같으며, <code>FLAVOR</code>, <code>INGREDITENT_TYPE</code> 은 각각 아이스크림 맛, 아이스크림의 성분 타입을 나타냅니다. <code>INGREDIENT_TYPE</code>에는 아이스크림의 주 성분이 설탕이면 <code>sugar_based</code>라고 입력되고, 아이스크림의 주 성분이 과일이면 <code>fruit_based</code>라고 입력됩니다. <code>ICECREAM_INFO</code>의 기본 키는 <code>FLAVOR</code>입니다. <code>ICECREAM_INFO</code>테이블의 <code>FLAVOR</code>는 <code>FIRST_HALF</code> 테이블의  <code>FLAVOR</code>의 외래 키입니다.</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">NAME</th>
<th style="text-align: left">TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">FLAVOR</td>
<td style="text-align: left">VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">INGREDIENT_TYPE</td>
<td style="text-align: left">VARCHAR(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p>상반기 동안 각 아이스크림 성분 타입과 성분 타입에 대한 아이스크림의 총주문량을 총주문량이 작은 순서대로 조회하는 SQL 문을 작성해주세요. 이때 총주문량을 나타내는 컬럼명은 TOTAL_ORDER로 지정해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>FIRST_HALF</code> 테이블이 다음과 같고</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">SHIPMENT_ID</th>
<th style="text-align: left">FLAVOR</th>
<th>TOTAL_ORDER</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">101</td>
<td style="text-align: left">chocolate</td>
<td>3200</td>
</tr>
<tr>
<td style="text-align: left">102</td>
<td style="text-align: left">vanilla</td>
<td>2800</td>
</tr>
<tr>
<td style="text-align: left">103</td>
<td style="text-align: left">mint_chocolate</td>
<td>1700</td>
</tr>
<tr>
<td style="text-align: left">104</td>
<td style="text-align: left">caramel</td>
<td>2600</td>
</tr>
<tr>
<td style="text-align: left">105</td>
<td style="text-align: left">white_chocolate</td>
<td>3100</td>
</tr>
<tr>
<td style="text-align: left">106</td>
<td style="text-align: left">peach</td>
<td>2450</td>
</tr>
<tr>
<td style="text-align: left">107</td>
<td style="text-align: left">watermelon</td>
<td>2150</td>
</tr>
<tr>
<td style="text-align: left">108</td>
<td style="text-align: left">mango</td>
<td>2900</td>
</tr>
<tr>
<td style="text-align: left">109</td>
<td style="text-align: left">strawberry</td>
<td>3100</td>
</tr>
<tr>
<td style="text-align: left">110</td>
<td style="text-align: left">melon</td>
<td>3150</td>
</tr>
<tr>
<td style="text-align: left">111</td>
<td style="text-align: left">orange</td>
<td>2900</td>
</tr>
<tr>
<td style="text-align: left">112</td>
<td style="text-align: left">pineapple</td>
<td>2900</td>
</tr>
</tbody>
      </table>
<p><code>ICECREAM_INFO</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">FLAVOR</th>
<th style="text-align: left">INGREDIENT_TYPE</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">chocolate</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">vanilla</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">mint_chocolate</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">caramel</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">white_chocolate</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">peach</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">watermelon</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">mango</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">strawberry</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">melon</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">orange</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">pineapple</td>
<td style="text-align: left">fruit_based</td>
</tr>
</tbody>
      </table>
<p>상반기에 아이스크림의 주 성분이 설탕인 아이스크림들에 대한 총주문량을 구하면 3,200 + 2,800 + 1,700 + 2,600 + 3,100 = 13,400입니다.  아이스크림의 주 성분이 과일인 아이스크림들에 대한 총주문량을 구하면 3,100 + 2,450 + 2,150 + 2,900 + 3,150 + 2,900 + 2,900 = 19,550입니다. 따라서 총주문량이 작은 순서대로 조회하는 SQL 문을 실행하면 다음과 같이 나와야 합니다. </p>
<table class="table">
        <thead><tr>
<th style="text-align: left">INGREDIENT_TYPE</th>
<th>TOTAL_ORDER</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">sugar_based</td>
<td>13400</td>
</tr>
<tr>
<td style="text-align: left">fruit_based</td>
<td>19550</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>SUM을 이용해 TOTAL_ORDER 의 값을 집계한다, GROUP BY는 INGREDIENT_TYPE 기준으로</li>
  <li>LEFT JOIN하여 FLAVOR이 같은 것을 찾기</li>
</ol>

<pre><code class="language-RoomSql">SELECT i.INGREDIENT_TYPE,
    SUM(f.TOTAL_ORDER) AS TOTAL_ORDER
FROM FIRST_HALF f 
LEFT JOIN ICECREAM_INFO i
ON i.FLAVOR = f.FLAVOR
GROUP BY i.INGREDIENT_TYPE;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 성분으로 구분한 아이스크림 총 주문량]]></summary></entry></feed>