<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-07T21:14:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LeeJellan</title><subtitle>안녕하세요!🙂 IT,여행,기타 등 기록을 남기기위한 블로그 입니다 !</subtitle><author><name>LEE JAEHYEOK</name></author><entry><title type="html">MySQL Foreign key 설정하기</title><link href="http://localhost:4000/db/2023/04/07/db-mysqlforeign.html" rel="alternate" type="text/html" title="MySQL Foreign key 설정하기" /><published>2023-04-07T00:00:00+09:00</published><updated>2023-04-07T00:00:00+09:00</updated><id>http://localhost:4000/db/2023/04/07/db-mysqlforeign</id><content type="html" xml:base="http://localhost:4000/db/2023/04/07/db-mysqlforeign.html"><![CDATA[<p>MySQL Foreign Key를 설정하는 방법을 적어보려한다. <br />
간단하게 아래와 같은 테이블을 준비했다.</p>

<p>스키마 이름은 sqlpractice로 설정하였다.</p>

<p><img src="https://user-images.githubusercontent.com/95069395/230547251-d9b554a7-85a0-4430-9aa2-5b1f4548b431.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>SQL문은 아래와 같이 작성하면 테이블이 생성되고</p>

<pre><code class="language-roomsql">CREATE TABLE sqlpractice.posts (
    id BIGINT NOT NULL PRIMARY KEY,
    title VARCHAR(255) NOT NULL
);

CREATE TABLE sqlpractice.tag (
    id BIGINT NOT NULL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    type VARCHAR(255) NOT NULL
);

CREATE TABLE sqlpractice.posts_tag (
    id BIGINT NOT NULL PRIMARY KEY,
    posts_id BIGINT NOT NULL,
    tag_id BIGINT NOT NULL
);
</code></pre>

<p><br /></p>

<p>FOREIGN KEY를 설정하기전에 관계를 살펴보자</p>

<p>1 : N : 1 관계의 테이블이고 <br />
POSTS_TAG가 연관관계의 주인이며 POSTS의 PK를 FK로 가지고 있고 <br />
TAG의 PK를 FK로 가지고 있는 상태이다.</p>

<p>FOREIGN KEY 설정 문법은 아래와 같다</p>
<pre><code class="language-roomsql">ALTER TABLE 테이블명 ADD 
FOREIGN KEY (컬럼명) REFERENCES 대상 테이블명 (컬럼명);
</code></pre>

<p><br /></p>

<p>위의 관계도처럼 POSTS_TAG 테이블에 FOREIGN KEY를 설정하려면 아래와 같이 입력하면된다.</p>

<pre><code class="language-roomsql">ALTER TABLE sqlpractice.posts_tag ADD 
FOREIGN KEY (posts_id) REFERENCES sqlpractice.posts(id);

ALTER TABLE sqlpractice.posts_tag ADD 
FOREIGN KEY (tag_id) REFERENCES sqlpractice.tag(id);
</code></pre>

<p><br />
<br />
<br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="DB" /><category term="DB" /><category term="MySQL" /><summary type="html"><![CDATA[MySQL Foreign Key를 설정하는 방법을 적어보려한다. 간단하게 아래와 같은 테이블을 준비했다.]]></summary></entry><entry><title type="html">[Programmers] 재구매가 일어난 상품과 회원 리스트 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/07/sql-duplicationproduct.html" rel="alternate" type="text/html" title="[Programmers] 재구매가 일어난 상품과 회원 리스트 구하기 (MySQL)" /><published>2023-04-07T00:00:00+09:00</published><updated>2023-04-07T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/07/sql-duplicationproduct</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/07/sql-duplicationproduct.html"><![CDATA[<h2 id="-문제--재구매가-일어난-상품과-회원-리스트-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131536">재구매가 일어난 상품과 회원 리스트 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 의류 쇼핑몰의 온라인 상품 판매 정보를 담은 <code>ONLINE_SALE</code> 테이블 입니다. <code>ONLINE_SALE</code> 테이블은 아래와 같은 구조로 되어있으며 <code>ONLINE_SALE_ID</code>, <code>USER_ID</code>, <code>PRODUCT_ID</code>, <code>SALES_AMOUNT</code>, <code>SALES_DATE</code>는 각각 온라인 상품 판매 ID, 회원 ID, 상품 ID, 판매량, 판매일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>ONLINE_SALE_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>USER_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_AMOUNT</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>동일한 날짜, 회원 ID, 상품 ID 조합에 대해서는 하나의 판매 데이터만 존재합니다.</p>

<hr />

<h5>문제</h5>

<p><code>ONLINE_SALE</code> 테이블에서 동일한 회원이 동일한 상품을 재구매한 데이터를 구하여, 재구매한 회원 ID와 재구매한 상품 ID를 출력하는 SQL문을 작성해주세요. 결과는 회원 ID를 기준으로 오름차순 정렬해주시고 회원 ID가 같다면 상품 ID를 기준으로 내림차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>ONLINE_SALE</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>ONLINE_SALE_ID</th>
<th>USER_ID</th>
<th>PRODUCT_ID</th>
<th>SALES_AMOUNT</th>
<th>SALES_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>3</td>
<td>2</td>
<td>2022-02-25</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>4</td>
<td>1</td>
<td>2022-03-01</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>4</td>
<td>2</td>
<td>2022-03-12</td>
</tr>
<tr>
<td>3</td>
<td>1</td>
<td>3</td>
<td>3</td>
<td>2022-03-31</td>
</tr>
<tr>
<td>5</td>
<td>3</td>
<td>5</td>
<td>1</td>
<td>2022-04-03</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
<td>4</td>
<td>1</td>
<td>2022-04-06</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>4</td>
<td>2</td>
<td>2022-05-11</td>
</tr>
</tbody>
      </table>
<p><code>USER_ID</code> 가 1인 유저가 <code>PRODUCT_ID</code> 가 3, 4인 상품들을 재구매하고, <code>USER_ID</code> 가 2인 유저가 <code>PRODUCT_ID</code> 가 4인 상품을 재구매 하였으므로, 다음과 같이 결과가 나와야합니다.</p>
<table class="table">
        <thead><tr>
<th>USER_ID</th>
<th>PRODUCT_ID</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>4</td>
</tr>
<tr>
<td>1</td>
<td>3</td>
</tr>
<tr>
<td>2</td>
<td>4</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>ONLINE_SALE 테이블에서 USER_ID, PRODUCT_ID를 가져온다.</li>
  <li>USER_ID, PRODUCT_ID를 GROUP BY하여 HAVING절로 2이상인 값(재구매한 값)을 찾기</li>
  <li>USER_ID 오름차순 정렬 후 같을 경우 PRODUCT_ID 내림차순 정렬</li>
</ol>

<pre><code class="language-RoomSql">SELECT USER_ID,
    PRODUCT_ID
FROM ONLINE_SALE
GROUP BY USER_ID, PRODUCT_ID
HAVING COUNT(PRODUCT_ID) &gt;= 2
ORDER BY USER_ID ASC, PRODUCT_ID DESC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 재구매가 일어난 상품과 회원 리스트 구하기]]></summary></entry><entry><title type="html">[Programmers] 진료과별 총 예약 횟수 출력하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/06/sql-resevecount.html" rel="alternate" type="text/html" title="[Programmers] 진료과별 총 예약 횟수 출력하기 (MySQL)" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/06/sql-resevecount</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/06/sql-resevecount.html"><![CDATA[<h2 id="-문제--진료과별-총-예약-횟수-출력하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/132202">진료과별 총 예약 횟수 출력하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 종합병원의 진료 예약정보를 담은 <code>APPOINTMENT</code> 테이블 입니다.<br />
<code>APPOINTMENT</code> 테이블은 다음과 같으며 <code>APNT_YMD</code>, <code>APNT_NO</code>, <code>PT_NO</code>, <code>MCDP_CD</code>, <code>MDDR_ID</code>, <code>APNT_CNCL_YN</code>, <code>APNT_CNCL_YMD</code>는 각각 진료예약일시, 진료예약번호, 환자번호, 진료과코드, 의사ID, 예약취소여부, 예약취소날짜를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>APNT_YMD</td>
<td>TIMESTAMP</td>
<td>FALSE</td>
</tr>
<tr>
<td>APNT_NO</td>
<td>NUMBER(5)</td>
<td>FALSE</td>
</tr>
<tr>
<td>PT_NO</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
<tr>
<td>MCDP_CD</td>
<td>VARCHAR(6)</td>
<td>FALSE</td>
</tr>
<tr>
<td>MDDR_ID</td>
<td>VARCHAR(10)</td>
<td>FALSE</td>
</tr>
<tr>
<td>APNT_CNCL_YN</td>
<td>VARCHAR(1)</td>
<td>TRUE</td>
</tr>
<tr>
<td>APNT_CNCL_YMD</td>
<td>DATE</td>
<td>TRUE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>APPOINTMENT</code> 테이블에서 2022년 5월에 예약한 환자 수를 진료과코드 별로 조회하는 SQL문을 작성해주세요. 이때, 컬럼명은 '진료과 코드', '5월예약건수'로 지정해주시고 결과는 진료과별 예약한 환자 수를 기준으로 오름차순 정렬하고, 예약한 환자 수가 같다면 진료과 코드를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p><code>APPOINTMENT</code> 테이블이 다음과 같을 때</p>
<table class="table">
        <thead><tr>
<th>APNT_YMD</th>
<th>APNT_NO</th>
<th>PT_NO</th>
<th>MCDP_CD</th>
<th>MDDR_ID</th>
<th>APNT_CNCL_YN</th>
<th>APNT_CNCL_YMD</th>
</tr>
</thead>
        <tbody><tr>
<td>2022-04-14 09:30:00.000000</td>
<td>47</td>
<td>PT22000064</td>
<td>GS</td>
<td>DR20170123</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-04-15 10:30:00.000000</td>
<td>48</td>
<td>PT22000065</td>
<td>OB</td>
<td>DR20100231</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-15 17:30:00.000000</td>
<td>49</td>
<td>PT22000086</td>
<td>OB</td>
<td>DR20100231</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-18 10:30:00.000000</td>
<td>52</td>
<td>PT22000019</td>
<td>GS</td>
<td>DR20100039</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-19 12:00:00.000000</td>
<td>53</td>
<td>PT22000020</td>
<td>FM</td>
<td>DR20010112</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-22 08:30:00.000000</td>
<td>54</td>
<td>PT22000021</td>
<td>GS</td>
<td>DR20100039</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-04 10:30:00.000000</td>
<td>56</td>
<td>PT22000023</td>
<td>FM</td>
<td>DR20090112</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-14 15:30:00.000000</td>
<td>57</td>
<td>PT22000074</td>
<td>CS</td>
<td>DR20200012</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-24 15:30:00.000000</td>
<td>58</td>
<td>PT22000085</td>
<td>CS</td>
<td>DR20200012</td>
<td>N</td>
<td>NULL</td>
</tr>
<tr>
<td>2022-05-28 10:00:00.000000</td>
<td>60</td>
<td>PT22000092</td>
<td>OS</td>
<td>DR20100031</td>
<td>N</td>
<td>NULL</td>
</tr>
</tbody>
      </table>
<p>SQL을 실행하면 다음과 같이 출력되어야 합니다.</p>
<table class="table">
        <thead><tr>
<th>진료과코드</th>
<th>5월예약건수</th>
</tr>
</thead>
        <tbody><tr>
<td>OB</td>
<td>1</td>
</tr>
<tr>
<td>OS</td>
<td>1</td>
</tr>
<tr>
<td>CS</td>
<td>2</td>
</tr>
<tr>
<td>FM</td>
<td>2</td>
</tr>
<tr>
<td>GS</td>
<td>2</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>COUNT를 이용하여 예약한 건수의 행의 합을 그룹핑시킴</li>
  <li>WHERE LIKE절을 이용해 22년 5월의 예약건수만 출력</li>
  <li><code class="language-plaintext highlighter-rouge">5월의예약건수</code>를 오름차순으로 정렬 = COUNT(a.MCDP_CD) ASC</li>
  <li>3번이 동일할 경우 <code class="language-plaintext highlighter-rouge">진료과코드</code>로 오름차순으로 정렬 = a.MCDP_CD ASC</li>
</ol>

<pre><code class="language-RoomSql">SELECT a.MCDP_CD AS '진료과코드', 
    COUNT(a.MCDP_CD) AS '5월예약건수'
FROM APPOINTMENT a
WHERE a.APNT_YMD LIKE '2022-05%'
GROUP BY a.MCDP_CD
ORDER BY COUNT(a.MCDP_CD) ASC, a.MCDP_CD ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 진료과별 총 예약 횟수 출력하기]]></summary></entry><entry><title type="html">[Programmers] 성분으로 구분한 아이스크림 총 주문량 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/05/sql-icecream.html" rel="alternate" type="text/html" title="[Programmers] 성분으로 구분한 아이스크림 총 주문량 (MySQL)" /><published>2023-04-05T00:00:00+09:00</published><updated>2023-04-05T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/05/sql-icecream</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/05/sql-icecream.html"><![CDATA[<h2 id="-문제--성분으로-구분한-아이스크림-총-주문량">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/133026">성분으로 구분한 아이스크림 총 주문량</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 아이스크림 가게의 상반기 주문 정보를 담은 <code>FIRST_HALF</code> 테이블과 아이스크림 성분에 대한 정보를 담은 <code>ICECREAM_INFO</code> 테이블입니다. <code>FIRST_HALF</code> 테이블 구조는 다음과 같으며, <code>SHIPMENT_ID</code>, <code>FLAVOR</code>, <code>TOTAL_ORDER</code> 는 각각 아이스크림 공장에서 아이스크림 가게까지의 출하 번호, 아이스크림 맛, 상반기 아이스크림 총주문량을 나타냅니다. <code>FIRST_HALF</code> 테이블의 기본 키는 <code>FLAVOR</code>입니다.</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">NAME</th>
<th style="text-align: left">TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">SHIPMENT_ID</td>
<td style="text-align: left">INT(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">FLAVOR</td>
<td style="text-align: left">VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">TOTAL_ORDER</td>
<td style="text-align: left">INT(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p><code>ICECREAM_INFO</code> 테이블 구조는 다음과 같으며, <code>FLAVOR</code>, <code>INGREDITENT_TYPE</code> 은 각각 아이스크림 맛, 아이스크림의 성분 타입을 나타냅니다. <code>INGREDIENT_TYPE</code>에는 아이스크림의 주 성분이 설탕이면 <code>sugar_based</code>라고 입력되고, 아이스크림의 주 성분이 과일이면 <code>fruit_based</code>라고 입력됩니다. <code>ICECREAM_INFO</code>의 기본 키는 <code>FLAVOR</code>입니다. <code>ICECREAM_INFO</code>테이블의 <code>FLAVOR</code>는 <code>FIRST_HALF</code> 테이블의  <code>FLAVOR</code>의 외래 키입니다.</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">NAME</th>
<th style="text-align: left">TYPE</th>
<th>NULLABLE</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">FLAVOR</td>
<td style="text-align: left">VARCHAR(N)</td>
<td>FALSE</td>
</tr>
<tr>
<td style="text-align: left">INGREDIENT_TYPE</td>
<td style="text-align: left">VARCHAR(N)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p>상반기 동안 각 아이스크림 성분 타입과 성분 타입에 대한 아이스크림의 총주문량을 총주문량이 작은 순서대로 조회하는 SQL 문을 작성해주세요. 이때 총주문량을 나타내는 컬럼명은 TOTAL_ORDER로 지정해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>FIRST_HALF</code> 테이블이 다음과 같고</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">SHIPMENT_ID</th>
<th style="text-align: left">FLAVOR</th>
<th>TOTAL_ORDER</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">101</td>
<td style="text-align: left">chocolate</td>
<td>3200</td>
</tr>
<tr>
<td style="text-align: left">102</td>
<td style="text-align: left">vanilla</td>
<td>2800</td>
</tr>
<tr>
<td style="text-align: left">103</td>
<td style="text-align: left">mint_chocolate</td>
<td>1700</td>
</tr>
<tr>
<td style="text-align: left">104</td>
<td style="text-align: left">caramel</td>
<td>2600</td>
</tr>
<tr>
<td style="text-align: left">105</td>
<td style="text-align: left">white_chocolate</td>
<td>3100</td>
</tr>
<tr>
<td style="text-align: left">106</td>
<td style="text-align: left">peach</td>
<td>2450</td>
</tr>
<tr>
<td style="text-align: left">107</td>
<td style="text-align: left">watermelon</td>
<td>2150</td>
</tr>
<tr>
<td style="text-align: left">108</td>
<td style="text-align: left">mango</td>
<td>2900</td>
</tr>
<tr>
<td style="text-align: left">109</td>
<td style="text-align: left">strawberry</td>
<td>3100</td>
</tr>
<tr>
<td style="text-align: left">110</td>
<td style="text-align: left">melon</td>
<td>3150</td>
</tr>
<tr>
<td style="text-align: left">111</td>
<td style="text-align: left">orange</td>
<td>2900</td>
</tr>
<tr>
<td style="text-align: left">112</td>
<td style="text-align: left">pineapple</td>
<td>2900</td>
</tr>
</tbody>
      </table>
<p><code>ICECREAM_INFO</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th style="text-align: left">FLAVOR</th>
<th style="text-align: left">INGREDIENT_TYPE</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">chocolate</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">vanilla</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">mint_chocolate</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">caramel</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">white_chocolate</td>
<td style="text-align: left">sugar_based</td>
</tr>
<tr>
<td style="text-align: left">peach</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">watermelon</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">mango</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">strawberry</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">melon</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">orange</td>
<td style="text-align: left">fruit_based</td>
</tr>
<tr>
<td style="text-align: left">pineapple</td>
<td style="text-align: left">fruit_based</td>
</tr>
</tbody>
      </table>
<p>상반기에 아이스크림의 주 성분이 설탕인 아이스크림들에 대한 총주문량을 구하면 3,200 + 2,800 + 1,700 + 2,600 + 3,100 = 13,400입니다.  아이스크림의 주 성분이 과일인 아이스크림들에 대한 총주문량을 구하면 3,100 + 2,450 + 2,150 + 2,900 + 3,150 + 2,900 + 2,900 = 19,550입니다. 따라서 총주문량이 작은 순서대로 조회하는 SQL 문을 실행하면 다음과 같이 나와야 합니다. </p>
<table class="table">
        <thead><tr>
<th style="text-align: left">INGREDIENT_TYPE</th>
<th>TOTAL_ORDER</th>
</tr>
</thead>
        <tbody><tr>
<td style="text-align: left">sugar_based</td>
<td>13400</td>
</tr>
<tr>
<td style="text-align: left">fruit_based</td>
<td>19550</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>SUM을 이용해 TOTAL_ORDER 의 값을 집계한다, GROUP BY는 INGREDIENT_TYPE 기준으로</li>
  <li>LEFT JOIN하여 FLAVOR이 같은 것을 찾기</li>
</ol>

<pre><code class="language-RoomSql">SELECT i.INGREDIENT_TYPE,
    SUM(f.TOTAL_ORDER) AS TOTAL_ORDER
FROM FIRST_HALF f 
LEFT JOIN ICECREAM_INFO i
ON i.FLAVOR = f.FLAVOR
GROUP BY i.INGREDIENT_TYPE;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 성분으로 구분한 아이스크림 총 주문량]]></summary></entry><entry><title type="html">[Spring] QueryDSL 기본문법 사용하기</title><link href="http://localhost:4000/spring/2023/04/04/spring-querydsladvance.html" rel="alternate" type="text/html" title="[Spring] QueryDSL 기본문법 사용하기" /><published>2023-04-04T00:00:00+09:00</published><updated>2023-04-04T00:00:00+09:00</updated><id>http://localhost:4000/spring/2023/04/04/spring-querydsladvance</id><content type="html" xml:base="http://localhost:4000/spring/2023/04/04/spring-querydsladvance.html"><![CDATA[<h2 id="querydsl">QueryDSL</h2>

<h3 id="테스트-코드">테스트 코드</h3>

<p>이전에 작성했던 <a href="https://mycatlikeschuru.github.io/spring/2023/04/04/spring-querydsl.html">QueryDSL 기초설정 및 JPQL과 비교해보기</a>에서 <br />
이어서 작업을 진행하였다. 동일하게 테스트코드는</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuerydslBasicTestPractice</span> <span class="o">{</span>

   <span class="nd">@Autowired</span>
   <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>

   <span class="nc">JPAQueryFactory</span> <span class="n">queryFactory</span><span class="o">;</span>

   <span class="nd">@PersistenceUnit</span>
   <span class="nc">EntityManagerFactory</span> <span class="n">emf</span><span class="o">;</span>

   <span class="nd">@BeforeEach</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
      <span class="n">queryFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JPAQueryFactory</span><span class="o">(</span><span class="n">em</span><span class="o">);</span>
      <span class="nc">Team</span> <span class="n">teamA</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">);</span>
      <span class="nc">Team</span> <span class="n">teamB</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">(</span><span class="s">"teamB"</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">teamA</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">teamB</span><span class="o">);</span>

      <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member1"</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="n">teamA</span><span class="o">);</span>
      <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member2"</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="n">teamA</span><span class="o">);</span>
      <span class="nc">Member</span> <span class="n">member3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member3"</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="n">teamB</span><span class="o">);</span>
      <span class="nc">Member</span> <span class="n">member4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member4"</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="n">teamB</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member3</span><span class="o">);</span>
      <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member4</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Team 객체 2개와 Member 객체 4개를 만들어서 테스트를 진행했다. <br />
아래의 코드는 위의 @BeforeEach를 통해 만들어진 객체를 기준으로 생각하면된다.</p>

<p><br /></p>

<h3 id="q타입-활용">Q타입 활용</h3>

<p>Q타입 객체를 만들어 사용이 가능하다.<br />
m이라는 이름으로 객체를 생성하여 queryFactorty를 이용한 사용법.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">queryDsl</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">JPAQueryFactory</span> <span class="n">queryFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JPAQueryFactory</span><span class="o">(</span><span class="n">em</span><span class="o">);</span>
        <span class="nc">QMember</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QMember</span><span class="o">(</span><span class="s">"m"</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetchOne</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>위와 같이 사용도 가능하지만 QMember.member를 이용해 QMember 클래스에 <br />
선언되어 있는 것을 이용하는 방법을 주로 사용한다. 여기서 QMember를 static import하여 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">queryDsl</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">JPAQueryFactory</span> <span class="n">queryFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JPAQueryFactory</span><span class="o">(</span><span class="n">em</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="nc">QMember</span><span class="o">.</span><span class="na">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="nc">QMember</span><span class="o">.</span><span class="na">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="nc">QMember</span><span class="o">.</span><span class="na">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetchOne</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>같은 테이블을 JOIN하는 경우에 첫번째와 같이 alias를 변경하여 사용하여 해결이 가능하다. <br />
하지만 그럴 경우가 아니면 일반적으로 static import하여 2번과 같이 사용한다.</p>

<p><br /></p>

<h3 id="검색-조건-쿼리">검색 조건 쿼리</h3>

<p><code class="language-plaintext highlighter-rouge">select</code>, <code class="language-plaintext highlighter-rouge">from</code>을 <br />
<code class="language-plaintext highlighter-rouge">selectFrom</code>으로 합칠 수 있다.</p>

<p>여러가지 검색 조건의 쿼리</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">)</span> <span class="c1">// username = 'member1'</span>
<span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">ne</span><span class="o">(</span><span class="s">"member1"</span><span class="o">)</span> <span class="c1">// username != 'member1'</span>
<span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">).</span><span class="na">not</span> <span class="c1">// username != 'member1'</span>

<span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">isNotNull</span><span class="o">()</span> <span class="c1">// 이름이 is not null</span>

<span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">in</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span><span class="mi">20</span><span class="o">)</span> <span class="c1">// age가 10이거나 20살인 사람</span>
<span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">notIn</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span><span class="mi">20</span><span class="o">)</span> <span class="c1">// age가 10이거나 20살이 아닌사람</span>
<span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="mi">10</span><span class="o">,</span><span class="mi">30</span><span class="o">)</span> <span class="c1">// age가 10~30사이인 사람</span>

<span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">goe</span><span class="o">(</span><span class="mi">30</span><span class="o">)</span> <span class="c1">// age &gt;= 30</span>
<span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">gt</span><span class="o">(</span><span class="mi">30</span><span class="o">)</span> <span class="c1">// age &gt; 30</span>
<span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">loe</span><span class="o">(</span><span class="mi">30</span><span class="o">)</span> <span class="c1">// age &lt;= 30</span>
<span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">lt</span><span class="o">(</span><span class="mi">30</span><span class="o">)</span> <span class="c1">// age &lt; 30</span>

<span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">like</span><span class="o">(</span><span class="s">"member%"</span><span class="o">)</span> <span class="c1">// like 검색</span>
<span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="s">"member"</span><span class="o">)</span> <span class="c1">// like `%member%` 검색</span>
<span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"member"</span><span class="o">)</span> <span class="c1">// like `member%` 검색</span>
</code></pre></div></div>

<p>기본적으로 JPQL에서 지원하는 모든 검색 조건을 제공한다. <br />
이를 이용해서 한번 작성해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">search</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">and</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="mi">10</span><span class="o">)))</span>
                <span class="o">.</span><span class="na">fetchOne</span><span class="o">();</span>
        
        <span class="n">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getAge</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>member의 테이블을 조회하여 <br />
username = ‘member1’ AND age = ‘10’인 행을 조회하는 쿼리이다.</p>

<p>현재 usename,age가 조건에 부합하는 행은 하나가 존재하므로 해당 행의 대한 데이터가 <br />
findMember를 통해 접근이 가능하다.</p>

<p>여기서 <code class="language-plaintext highlighter-rouge">.and()</code>를 이용해 쿼리를 작성했지만 아래와 같이</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">search</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">),</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="mi">10</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetchOne</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getAge</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">,</code>를 입력하여 체인을 걸어주면 기본적으로 <code class="language-plaintext highlighter-rouge">.and()</code>로 인식하게 되어 사용할 수 있다.</p>

<p><br /></p>

<h3 id="결과-조회-fetch">결과 조회 (fetch)</h3>

<ol>
  <li>fetch() : 리스트 조회, 데이터 없으면 빈 리스트 반환</li>
  <li>fetchOne() : 단 건 조회
    <ul>
      <li>결과가 없으면 : null</li>
      <li>결과가 둘 이상이면 : NonUniqueResultException 발생</li>
    </ul>
  </li>
  <li>fetchFirst() : limit(1)을 걸면서 fetchOne()하는 것과 동일 (=limit(1).fetchOne)</li>
  <li>fetchResults() : 페이징 정보 포함, total count 쿼리 추가 실행</li>
  <li>fetchCount() : count 쿼리로 변경해서 count 수 조회</li>
</ol>

<p>결과를 조회하는 문법은 위와 같다. <br />
코드를 통해서 확인해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">resultFetch</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 1. fetch : 리스트 조회</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">fetch</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="c1">// 2. fetchOne : 단 건 조회</span>
        <span class="nc">Member</span> <span class="n">fetchOne</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetchOne</span><span class="o">();</span>

        <span class="c1">// 3. fetchFirst : limit(1).fetchOne()</span>
        <span class="nc">Member</span> <span class="n">fetchFirst</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetchFirst</span><span class="o">();</span>

        <span class="c1">// 4. fetchResults : 페이징 정보 포함</span>
        <span class="nc">QueryResults</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">fetchResults</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetchResults</span><span class="o">();</span>

        <span class="n">fetchResults</span><span class="o">.</span><span class="na">getTotal</span><span class="o">();</span>
        <span class="n">fetchResults</span><span class="o">.</span><span class="na">getLimit</span><span class="o">();</span>
        <span class="n">fetchResults</span><span class="o">.</span><span class="na">getOffset</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">content</span> <span class="o">=</span> <span class="n">fetchResults</span><span class="o">.</span><span class="na">getResults</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>1~3번까지는 많이 사용해보던 방식들이라 이해하기 쉬울 것이다. <br />
여기서 페이징 정보를 받는 <code class="language-plaintext highlighter-rouge">fetchResults</code>를 확인해보자</p>

<p>해당 객체로 <code class="language-plaintext highlighter-rouge">.getTotal()</code>, <code class="language-plaintext highlighter-rouge">.getLimit()</code>, <code class="language-plaintext highlighter-rouge">.getOffset()</code>과 같은 페이징 <br />
정보가 확인이 가능하고 <code class="language-plaintext highlighter-rouge">.getResults()</code>를 통해서 List로 정보만 확인이 가능하다</p>

<p>페이징 정보 깨알상식으로 아래 적어본다.</p>
<ul>
  <li>total : 현재 조회된 모든값의 총 갯수</li>
  <li>limit : 조회할 결과의 개수를 의미</li>
  <li>offset : 조회를 시작할 기준점을 의미</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">fetchResults</code>를 실행하게 될 경우 쿼리가 2번 발생한다.</p>

<pre><code class="language-roomsql">select
      count(member0_.member_id) as col_0_0_ 
  from
      member member0_
</code></pre>
<pre><code class="language-roomsql">select
      member0_.member_id as member_i1_1_,
      member0_.age as age2_1_,
      member0_.team_id as team_id4_1_,
      member0_.username as username3_1_ 
  from
      member member0_
</code></pre>

<p><code class="language-plaintext highlighter-rouge">total</code>을 가져오기위한 쿼리 한개와 <br />
<code class="language-plaintext highlighter-rouge">content</code>를 가져오는 쿼리 한개해서 총2개의 쿼리가 발생한다.</p>

<p><br /></p>

<p>마지막으로 <code class="language-plaintext highlighter-rouge">fetchCount</code>를 살펴보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">resultFetch</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// 5. fetchCount : count 수 조회</span>
        <span class="kt">long</span> <span class="n">total</span> <span class="o">=</span> <span class="n">queryFactory</span>
        <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
        <span class="o">.</span><span class="na">fetchCount</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">fetchResults</code>에서 쿼리가 2번 발생했었는데<br />
<code class="language-plaintext highlighter-rouge">fetchCount</code>를 하게되면 <code class="language-plaintext highlighter-rouge">total</code>값만 한번의 쿼리로 가져오게 된다.</p>

<pre><code class="language-roomsql">select
      count(member0_.member_id) as col_0_0_ 
  from
      member member0_
</code></pre>

<p><br /></p>

<h3 id="정렬-order-by">정렬 (ORDER BY)</h3>

<p>이번에는 정렬을 이용해보자 <br />
<code class="language-plaintext highlighter-rouge">orderBy()</code> 메서드를 통해서 정렬을 사용할 수 있다. <br />
오름차순 = <code class="language-plaintext highlighter-rouge">asc()</code> / 내림차순 = <code class="language-plaintext highlighter-rouge">desc()</code></p>

<p>정렬 조건을 정해보자 <br />
멤버 3명을 추가할 것이다.  <br />
usename이 null인 멤버 하나와, member5~6으로된 멤버 둘 <br />
나이가 100살로 설정하고 해당 나이에서 정렬을 해보자</p>

<ol>
  <li>나이순으로 내림차순</li>
  <li>이름순으로 오름차순</li>
  <li>이름이 null인 경우를 마지막으로 정렬</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="kc">null</span><span class="o">,</span> <span class="mi">100</span><span class="o">));</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member5"</span><span class="o">,</span> <span class="mi">100</span><span class="o">));</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member6"</span><span class="o">,</span> <span class="mi">100</span><span class="o">));</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="mi">100</span><span class="o">))</span>
                <span class="o">.</span><span class="na">orderBy</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">desc</span><span class="o">(),</span> <span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">asc</span><span class="o">().</span><span class="na">nullsLast</span><span class="o">())</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="nc">Member</span> <span class="n">member5</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="nc">Member</span> <span class="n">member6</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="nc">Member</span> <span class="n">memberNull</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">member5</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"member5"</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">member6</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"member6"</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">memberNull</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isNull</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">fetch()</code>로 반환하여 List형태로 3개의 Member 객체를 받을 수 있다. <br />
정렬순서대로 get(0)~get(2)하여 검증을 해보면  <br />
이름순으로 정렬되고 마지막이 null로 찍힌 모습을 확인할 수 있다.</p>

<p><code class="language-plaintext highlighter-rouge">nullsLast()</code>를 하지않게된다면 첫번째가 null인 객체를 받게되어진다.</p>

<p><br /></p>

<h3 id="페이징">페이징</h3>

<p>첫번쨰로 <code class="language-plaintext highlighter-rouge">offset()</code>,<code class="language-plaintext highlighter-rouge">limit()</code>를 이용해 원하는 항목만큼 가져올 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paging1</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orderBy</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">desc</span><span class="o">())</span>
                <span class="o">.</span><span class="na">offset</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
                <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>member1~4까지 객체가 등록되어있고  <br />
username으로 내림차순으로 설정해두었다. <br />
offset이 1이기 때문에 시작지점은 첫번째부터 시작하고 limit가 2이기 때문에 <br />
2개의 데이터만 뽑아서 <code class="language-plaintext highlighter-rouge">fetch()</code>를 하게되면 List형태로 추출하게된다.</p>

<p>Member(id=5, username=member3, age=30) <br />
Member(id=4, username=member2, age=20)</p>

<p>객체를 출력하게되면 이렇게 나오게되어진다.</p>

<p><br /></p>

<p>두번쨰로는 <code class="language-plaintext highlighter-rouge">fetchResults()</code>를 결과로 뽑아내는 방법이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paging2</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">QueryResults</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">queryResults</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orderBy</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">desc</span><span class="o">())</span>
                <span class="o">.</span><span class="na">offset</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
                <span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetchResults</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">queryResults</span><span class="o">.</span><span class="na">getTotal</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">queryResults</span><span class="o">.</span><span class="na">getLimit</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">queryResults</span><span class="o">.</span><span class="na">getOffset</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">queryResults</span><span class="o">.</span><span class="na">getResults</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>위와 동일한 방식이지만 결과를 <code class="language-plaintext highlighter-rouge">fetchResults()</code> 통해서 객체를 받았다.  <br />
<code class="language-plaintext highlighter-rouge">.getTotal()</code>을 이용하면 총 4개의 객체가 나오기 떄문에 = <code class="language-plaintext highlighter-rouge">4</code> <br />
<code class="language-plaintext highlighter-rouge">.getLimit()</code>를 이용하면 2개로 설정하였기에 = <code class="language-plaintext highlighter-rouge">2</code> <br />
(여기서 limit를 설정하지 않았다면, Long타입의 최대값 9223372036854775807L이 표시된다.) <br />
<code class="language-plaintext highlighter-rouge">.getOffset()</code>를 이용하면 1로 설정하였기 때문에 = <code class="language-plaintext highlighter-rouge">1</code> <br />
<code class="language-plaintext highlighter-rouge">.getResults()</code>를 이용하면 최종적으로 반환된 행의 내용들이 표시되기 때문에 = <code class="language-plaintext highlighter-rouge">2</code> 가 되어진다.</p>

<p>실제 출력쿼리를 확인해보면 아래와 같이 확인할 수 있다.</p>

<pre><code class="language-roomsql">select
      member0_.member_id as member_i1_1_,
      member0_.age as age2_1_,
      member0_.team_id as team_id4_1_,
      member0_.username as username3_1_ 
  from
      member member0_ 
  order by
      member0_.username desc limit ? offset ?
</code></pre>
<p>limit, offset 파라미터 바인딩된 모습을 볼 수 있다.</p>

<p><br /></p>

<h3 id="집합-group-by">집합 (GROUP BY)</h3>

<p>SQL GROUP BY와 같은 역할을하는 기능이다.  <br />
SUN(), AVG(), MAX(), MIN(), COUNT() 등 다양한 집계 함수를 지원한다.</p>

<p>첫번쨰 예제를 살펴보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">aggregation</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Tuple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">count</span><span class="o">(),</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">sum</span><span class="o">(),</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">avg</span><span class="o">(),</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">max</span><span class="o">(),</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">min</span><span class="o">()</span>
                <span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="nc">Tuple</span> <span class="n">tuple</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        
        <span class="n">assertThat</span><span class="o">(</span><span class="n">tuple</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">count</span><span class="o">())).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">tuple</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">sum</span><span class="o">())).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">100</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">tuple</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">avg</span><span class="o">())).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">25</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">tuple</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">max</span><span class="o">())).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">40</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">tuple</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">min</span><span class="o">())).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div></div>

<p>집계함수를 이용해 값을 가져왔다. <br />
<code class="language-plaintext highlighter-rouge">List&lt;Tuple&gt; result</code> 사이즈는 <code class="language-plaintext highlighter-rouge">1</code>이다.</p>

<p>현재 총 4개의 Member가 저장되어 있고 나이는 10,20,30,40으로 들어가 있다.  <br />
즉, Count = 4 / sum = 100 / avg = 25 / max = 40 / min = 10 이 나와야한다.</p>

<p><br /></p>

<p>이제 GROUP BY를 이용하여 보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">group</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Tuple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span>
                        <span class="n">team</span><span class="o">.</span><span class="na">name</span><span class="o">,</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">avg</span><span class="o">()</span>
                <span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">team</span><span class="o">,</span> <span class="n">team</span><span class="o">)</span>
                <span class="o">.</span><span class="na">groupBy</span><span class="o">(</span><span class="n">team</span><span class="o">.</span><span class="na">name</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="nc">Tuple</span> <span class="n">teamA</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="nc">Tuple</span> <span class="n">teamB</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">teamA</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">team</span><span class="o">.</span><span class="na">name</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">teamA</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">avg</span><span class="o">())).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">15</span><span class="o">);</span> <span class="c1">// (10+20) / 2</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">teamB</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">team</span><span class="o">.</span><span class="na">name</span><span class="o">)).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"teamB"</span><span class="o">);</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">teamB</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">avg</span><span class="o">())).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">35</span><span class="o">);</span> <span class="c1">// (30+40) / 2</span>
</code></pre></div></div>

<p>team.name을 기준으로 GroupBy를 하였다.  <br />
현재 Team은 2개가 있고, teamA, teamB라는 이름으로 저장되어있다.  <br />
그리고 Member는 4개가 있고, member1, member2가 teamA에 속하고 <br />
member3,member4가 teamB에 속한다. 나이는 첫번째 예제와 같이 10~40까지이다.</p>

<p>join은 아래에서 배우겠지만 member테이블에서 같은 Team의 이름을 조인하여 <br />
테이블을 가져왔고 team.name으로 GroupBy하였기 때문에 총 2개의 행을 가져오게된다. <br />
즉, <code class="language-plaintext highlighter-rouge">List&lt;Tuple&gt; reulst</code>의 값은 2개가 존재하게 된다.</p>

<p>당연하게도 <code class="language-plaintext highlighter-rouge">.having()</code>문법도 사용가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="o">-</span>
     <span class="o">.</span><span class="na">groupBy</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">price</span><span class="o">)</span>
     <span class="o">.</span><span class="na">having</span><span class="o">(</span><span class="n">item</span><span class="o">.</span><span class="na">price</span><span class="o">.</span><span class="na">gt</span><span class="o">(</span><span class="mi">1000</span><span class="o">))</span>
    <span class="o">-</span>
</code></pre></div></div>
<p>아이템 가격이 1000 초과인 것들만 가져오는 문법</p>

<p><br /></p>

<h3 id="join---기본">Join - 기본</h3>

<ul>
  <li>join , leftJoin, rightJoin 등이 있다.</li>
</ul>

<p>Join 하는 방법을 작성해보자</p>

<p><strong>1). 연관관계가 있는 Join</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">join</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">team</span><span class="o">,</span> <span class="n">team</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">team</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
                <span class="o">.</span><span class="na">extracting</span><span class="o">(</span><span class="s">"username"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">containsExactly</span><span class="o">(</span><span class="s">"member1"</span><span class="o">,</span><span class="s">"member2"</span><span class="o">);</span>

    <span class="o">}</span>
</code></pre></div></div>

<p>위와 같이 InnerJoin을 통해서 teamA에 소속된 <br />
Member들을 List로 받아왔다.</p>

<p>JPQL 문법은 아래와 같이 만들어진다.</p>

<pre><code class="language-roomsql">select
     member1 
 from
     Member member1   
 inner join
     member1.team as team 
 where
</code></pre>

<p><br /></p>

<p><strong>2). 연관관계가 없는 Join</strong></p>

<p>연관관계가 없을때 조인하는것을 세타(theta)조인이라고 한다. <br />
관계가 정의되어 있지 않아도 Join하여 사용이 가능하다.</p>

<p>현재 <code class="language-plaintext highlighter-rouge">member</code>의 <code class="language-plaintext highlighter-rouge">username</code>과 <code class="language-plaintext highlighter-rouge">team</code>과는 연관 관계가 정의되어 있지않다.    <br />
username을 강제로 team.name과 같도록 <code class="language-plaintext highlighter-rouge">em.persist</code>하여 테스트해보자.<br />
아래의 예제를 살펴보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">theta_join</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">));</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"teamB"</span><span class="o">));</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">,</span> <span class="n">team</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="n">team</span><span class="o">.</span><span class="na">name</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
                <span class="o">.</span><span class="na">extracting</span><span class="o">(</span><span class="s">"username"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">containsExactly</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">,</span> <span class="s">"teamB"</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>현재 team은 총 2개의 행이 들어가 있고 각각 teamA, teamB라는 name을 가지고 있다.<br />
이제 member에서 연관관계가 없는 username을 통해 Join을 할 경우에는</p>

<p>from절에서 Qmember, QTeam을 두개를 불러온다. <br />
이전에 관계가 있는 join과는 다른 모습을 볼 수 있다.</p>

<p>JPQL은 아래와 같이 생성된다.</p>

<pre><code class="language-roomsql">select
     member1 
 from
     Member member1,
     Team team 
 where
     member1.username = team.name
</code></pre>

<p>실제로 SQL이 나가는 것은</p>

<pre><code class="language-roomsql">select
      member0_.member_id as member_i1_1_,
      member0_.age as age2_1_,
      member0_.team_id as team_id4_1_,
      member0_.username as username3_1_ 
  from
      member member0_ cross 
  join
      team team1_ 
  where
      member0_.username=team1_.name
</code></pre>
<p>위오 ㅏ같이 join이 이루어진 것을 볼 수 있다.</p>

<p><br /></p>

<h3 id="join---on절">Join - on절</h3>

<p>on절을 활용한 조인은 JPA 2.1부터 지원한다.</p>

<ul>
  <li>조인 대상 필터링</li>
  <li>연관관계 없는 엔티티 외부 조인</li>
</ul>

<p>on절과 where절은 모두 결과를 반환하기위한 조건을 걸기위해 사용하는 조건이지만<br />
Join할 대상의 범위가 달라지기도 한다. <br />
Inner Join을 할경우 on, where을 사용해도 동일한 결과를 볼 수 있지만<br />
Left Join을 사용할 경우에는 차이를 볼 수 있다.</p>

<p>on절 = 테이블에 join할 떄 범위를 정해줌  <br />
where = 결과값이 나온것을 가지고 조건을줘서 범위를 정해줌</p>

<p>예제를 살펴보자</p>

<p><strong>1). left join시 on절을 사용하였을 경우</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">join_on_filtering</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Tuple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">member</span><span class="o">,</span> <span class="n">team</span><span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">team</span><span class="o">,</span> <span class="n">team</span><span class="o">)</span>
                <span class="o">.</span><span class="na">on</span><span class="o">(</span><span class="n">team</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">))</span> <span class="c1">// &lt;- on절을 사용</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Tuple</span> <span class="n">tuple</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"tuple = "</span> <span class="o">+</span> <span class="n">tuple</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
<span class="c1">// 출력 결과</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Member</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="n">member1</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">10</span><span class="o">),</span> <span class="nc">Team</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="n">teamA</span><span class="o">)]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Member</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">4</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="n">member2</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">20</span><span class="o">),</span> <span class="nc">Team</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="n">teamA</span><span class="o">)]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Member</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">5</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="n">member3</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">30</span><span class="o">),</span> <span class="kc">null</span><span class="o">]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Member</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">6</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="n">member4</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">40</span><span class="o">),</span> <span class="kc">null</span><span class="o">]</span>    
</code></pre></div></div>

<p>team.naem = ‘teamA’와 같은 것들을 필터링하게 하였다. <br />
Join할때 범위를 정해주기 때문에 4개의 객체 모두 출력되고 <br />
on절로 지정한 teamA와 같은 객체는 표시되고 없는 것들은 null로 반환되었다.</p>

<p><br /></p>

<p><strong>2). left join시 where절을 사용하였을 경우</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">join_on_filtering</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Tuple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">member</span><span class="o">,</span> <span class="n">team</span><span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">leftJoin</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">team</span><span class="o">,</span> <span class="n">team</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">team</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Tuple</span> <span class="n">tuple</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"tuple = "</span> <span class="o">+</span> <span class="n">tuple</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
<span class="c1">// 출력 결과</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Member</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="n">member1</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">10</span><span class="o">),</span> <span class="nc">Team</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="n">teamA</span><span class="o">)]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="nc">Member</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">4</span><span class="o">,</span> <span class="n">username</span><span class="o">=</span><span class="n">member2</span><span class="o">,</span> <span class="n">age</span><span class="o">=</span><span class="mi">20</span><span class="o">),</span> <span class="nc">Team</span><span class="o">(</span><span class="n">id</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">name</span><span class="o">=</span><span class="n">teamA</span><span class="o">)]</span>
</code></pre></div></div>

<p>where절을 사용하였을 경우는 Join을 완료한다음에 범위를 필터링 하기 때문에 <br />
4개의 객체에서 teamA로 되어있는 2개만 표시되는 모습이다.</p>

<p><br /></p>

<h3 id="fetchjoin">fetchJoin</h3>

<p>fetchJoin은 SQL에서 제공하는 기능은 아니다. <br />
SQL Join을 활용해 연관된 Entity를 한번에 조회하는기능이다.<br />
주로 성능 최적화에 사용하는 방법이다. (ex: N+1 문제)</p>

<p>아래에서 차이를 비교해보자.</p>

<p><strong>1). fetchJoin을 사용하지 않을 때</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fetchJoinNo</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>

        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetchOne</span><span class="o">();</span>

        <span class="c1">// 영속성 컨텍스트에 Team이 Load되었는지 확인하는 메서드</span>
        <span class="c1">// Load되었다면 = true, 아니라면 = false</span>
        <span class="kt">boolean</span> <span class="n">loaded</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">getPersistenceUnitUtil</span><span class="o">().</span><span class="na">isLoaded</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getTeam</span><span class="o">());</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">loaded</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"패치 조인 미적용"</span><span class="o">).</span><span class="na">isFalse</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>제대로된 테스트를 위해 우선 영속성 컨텍스트의 내용을 비우고 시작해야한다. (<code class="language-plaintext highlighter-rouge">em.flush()</code>, <code class="language-plaintext highlighter-rouge">em.claer()</code>)  <br />
또한 알아둬야할 것은 Member 클래스 Team FK가 지연로딩(<code class="language-plaintext highlighter-rouge">@ManyToOne(fetch = FetchType.LAZY)</code>)로 설정되어있다.  <br />
즉, Member 객체를 로딩할때 Team 객체는 바로 로딩되어지지 않는다.</p>

<p><code class="language-plaintext highlighter-rouge">EntityManagerFactory</code>를 이용해 로딩되었는지 확인할 수 있다.  <br />
위와 같이 쿼리를 입력하였을 경우 실제로 Team 객체는 로딩되어지지 않고 <br />
<code class="language-plaintext highlighter-rouge">loaded</code>라는 불리언값으로 <code class="language-plaintext highlighter-rouge">false</code>가 나오면 영속성 컨텍스트에 로딩되지 않았다는 뜻이다.</p>

<p>실제 출력된 SQL을 확인해보면</p>
<pre><code class="language-roomsql">select
      member0_.member_id as member_i1_1_,
      member0_.age as age2_1_,
      member0_.team_id as team_id4_1_,
      member0_.username as username3_1_ 
  from
      member member0_ 
  where
      member0_.username=?
</code></pre>
<p>Member 객체만 쿼리가 발생한 것을 알 수 있다. <br />
Team에 대한 쿼리는 찾아 볼 수 없다.</p>

<p>만약 여기서 중간에 <code class="language-plaintext highlighter-rouge">findMember.getTeam.getName()</code>를 코드를 추가하여<br />
실행하게 된다면 LAZY 정책으로 인해 쿼리가 2번 발생한다.</p>

<pre><code class="language-roomsql">// fetchOne(); 진행시
select
      member0_.member_id as member_i1_1_,
      member0_.age as age2_1_,
      member0_.team_id as team_id4_1_,
      member0_.username as username3_1_ 
  from
      member member0_ 
  where
      member0_.username=?

// findMember.getTeam.getName(); 메서드 실행시
select
      team0_.id as id1_2_0_,
      team0_.name as name2_2_0_ 
   from
      team team0_ 
   where
      team0_.id=?
</code></pre>

<p>위처럼 Member 쪽 쿼리와 getTeam() 메서드 실행시 쿼리까지 총 2개의 쿼리가 발생하게된다.    <br />
여기서 우리는 fetchJoin()을 이용해 하나의 쿼리문으로 작성할 수 있다.</p>

<p><br /></p>

<p>2). fetchJoin을 사용할 떄</p>

<p>Member, Team을 Join한후 <code class="language-plaintext highlighter-rouge">.fetchJoin()</code>을 사용하게 된다면 <br />
위에서 쿼리가 2번나오게되는 것을 한방에 나오게 할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">fetchJoinUse</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">em</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">em</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>

        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">team</span><span class="o">,</span> <span class="n">team</span><span class="o">).</span><span class="na">fetchJoin</span><span class="o">()</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetchOne</span><span class="o">();</span>

        <span class="c1">// 영속성 컨텍스트에 Team이 Load되었는지 확인하는 메서드</span>
        <span class="c1">// Load되었다면 = true, 아니라면 = false</span>
        <span class="kt">boolean</span> <span class="n">loaded</span> <span class="o">=</span> <span class="n">emf</span><span class="o">.</span><span class="na">getPersistenceUnitUtil</span><span class="o">().</span><span class="na">isLoaded</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getTeam</span><span class="o">());</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">loaded</span><span class="o">).</span><span class="na">as</span><span class="o">(</span><span class="s">"패치 조인 적용"</span><span class="o">).</span><span class="na">isTrue</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>위와 같이 코드를 변경하고</p>

<p><br /></p>

<p>실제로 쿼리문을 확인해보면</p>

<pre><code class="language-roomsql">select
      member0_.member_id as member_i1_1_0_,
      team1_.id as id1_2_1_,
      member0_.age as age2_1_0_,
      member0_.team_id as team_id4_1_0_,
      member0_.username as username3_1_0_,
      team1_.name as name2_2_1_ 
  from
      member member0_ 
  inner join
      team team1_ 
          on member0_.team_id=team1_.id 
  where
      member0_.username=?
</code></pre>

<p>member, team을 한번에 가져오는 모습을 확인할 수 있다.</p>

<p><br /></p>

<h3 id="서브쿼리-subquery">서브쿼리 (SubQuery)</h3>

<p>서브쿼리는 SQL문 안에 또 다른 SQL문을 말한다.</p>

<p><strong>1). where절에서 서브쿼리 사용</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">subQuery</span><span class="o">()</span> <span class="o">{</span>

        <span class="nc">QMember</span> <span class="n">membeSub</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QMember</span><span class="o">(</span><span class="s">"membeSub"</span><span class="o">);</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span>
                        <span class="nc">JPAExpressions</span>
                                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">membeSub</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">max</span><span class="o">())</span>
                                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">membeSub</span><span class="o">)</span>
                <span class="o">))</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
                <span class="o">.</span><span class="na">extracting</span><span class="o">(</span><span class="s">"age"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">containsExactly</span><span class="o">(</span><span class="mi">40</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>첫번째 쿼리 where절안에 <code class="language-plaintext highlighter-rouge">memberSub</code>라는 Q타입 객체를 만들어 <br />
<code class="language-plaintext highlighter-rouge">JPAExpressions</code>를 통해서 안에 또다른 쿼리문을 작성한 예제이다. <br />
최종 적으로 <code class="language-plaintext highlighter-rouge">where(member.age.eq(40))</code>이라는 값으로 바뀌게 되어지고 <br />
회원의 나이가 40살인 값을 찾아오는 쿼리 예제이다.</p>

<p>실제 SQL문을 확인해보면</p>

<pre><code class="language-roomsql">select
      member0_.member_id as member_i1_1_,
      member0_.age as age2_1_,
      member0_.team_id as team_id4_1_,
      member0_.username as username3_1_ 
  from
      member member0_ 
  where
      member0_.age=(
          select
              max(member1_.age) 
          from
              member member1_
      )
</code></pre>
<p>where 절안에 쿼리가 작성되어 있는 모습을 볼 수 있다.</p>

<p><br /></p>

<p><strong>2). IN절을 이용한 서브쿼리 예제</strong></p>

<p>IN절을 잠깐 얘기하고 가자면 <br />
OR절과 동일한데 코드를 간략하게 줄여준다고 생각하면 된다.</p>

<p>ex) <code class="language-plaintext highlighter-rouge">WHERE age = 20 OR age = 30</code> = <code class="language-plaintext highlighter-rouge">WHERE age IN (20,30)</code></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">subQueryIn</span><span class="o">()</span> <span class="o">{</span>

        <span class="nc">QMember</span> <span class="n">membeSub</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QMember</span><span class="o">(</span><span class="s">"membeSub"</span><span class="o">);</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">selectFrom</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">in</span><span class="o">(</span>
                        <span class="nc">JPAExpressions</span>
                                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">membeSub</span><span class="o">.</span><span class="na">age</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">membeSub</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">membeSub</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">gt</span><span class="o">(</span><span class="mi">10</span><span class="o">))</span>
                <span class="o">))</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
                <span class="o">.</span><span class="na">extracting</span><span class="o">(</span><span class="s">"age"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">containsExactly</span><span class="o">(</span><span class="mi">20</span><span class="o">,</span><span class="mi">30</span><span class="o">,</span><span class="mi">40</span><span class="o">);</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>위와 같은 코드로 보면 나이가 10이상인 멤버들을 서브쿼리에서 가져오며 <br />
in절을 사용했기때문에 메인 쿼리에서 20,30,40과 같은 나이를 가진 <br />
회원을 조회하게되어 총 3개의 행이 출력되게 되어진다.</p>

<p><br /></p>

<p><strong>3). select절에서 사용한 서브쿼리</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">selectQuery</span><span class="o">()</span> <span class="o">{</span>

        <span class="nc">QMember</span> <span class="n">memberSub</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QMember</span><span class="o">(</span><span class="s">"memberSub"</span><span class="o">);</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Tuple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">,</span>
                        <span class="nc">JPAExpressions</span>
                                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">memberSub</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">avg</span><span class="o">())</span>
                                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">memberSub</span><span class="o">)</span>
                <span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Tuple</span> <span class="n">tuple</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"tuple = "</span> <span class="o">+</span> <span class="n">tuple</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
<span class="c1">// 출력 내용  </span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="n">member1</span><span class="o">,</span> <span class="mf">25.0</span><span class="o">]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="n">member2</span><span class="o">,</span> <span class="mf">25.0</span><span class="o">]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="n">member3</span><span class="o">,</span> <span class="mf">25.0</span><span class="o">]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="n">member4</span><span class="o">,</span> <span class="mf">25.0</span><span class="o">]</span>
</code></pre></div></div>

<p>select 구문안에 사용ㅎ란 subQuery 예제이다.  <br />
member 객체의 10,20,30,40이라는 나이가 들어가 있고 평균은 25가 된다. <br />
즉, 출력 내용과 같이 4개의 Tuple이 출력되게 되어진다.</p>

<p><br /></p>

<p>마지막으로 JPA, JPQL 서브쿼리의 한계점으로 from 절의 서브쿼리는 지원하지 않는다. <br />
그러므로 Querydsl도 당연히 지원하지 않는다.</p>

<p><br /></p>

<h3 id="case-문">CASE 문</h3>

<p>SQL에서 사용하는 CASE, WHEN, THEN, ELSE 에 대한 문법이다. <br />
예제를 통해서 살펴보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">basicCase</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span>
                        <span class="n">member</span><span class="o">.</span><span class="na">age</span>
                                <span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="mi">10</span><span class="o">).</span><span class="na">then</span><span class="o">(</span><span class="s">"열살"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="mi">20</span><span class="o">).</span><span class="na">then</span><span class="o">(</span><span class="s">"스무살"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">otherwise</span><span class="o">(</span><span class="s">"기타"</span><span class="o">)</span>
                <span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"s = "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
<span class="c1">// 출력 내용</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">열살</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">스무살</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">기타</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">기타</span>
</code></pre></div></div>
<p>10살일 경우 = 열살로 / 20살일 경우 = 스무살로 <br />
그외일 경우 = 기타로 표시하는 방법이다.</p>

<p><br /></p>

<p>다른 예제를 살펴보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">complexCase</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="k">new</span> <span class="nc">CaseBuilder</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">20</span><span class="o">)).</span><span class="na">then</span><span class="o">(</span><span class="s">"0~20살"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">when</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">between</span><span class="o">(</span><span class="mi">21</span><span class="o">,</span> <span class="mi">30</span><span class="o">)).</span><span class="na">then</span><span class="o">(</span><span class="s">"21~30살"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">otherwise</span><span class="o">(</span><span class="s">"기타"</span><span class="o">)</span>
                <span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"s = "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
</code></pre></div></div>
<p>위와 같이 <code class="language-plaintext highlighter-rouge">new CaseBuilder()</code>를 이용하여 사용할 수도 있다.</p>

<p><br /></p>

<h3 id="상수문자-더하기">상수,문자 더하기</h3>

<p>상수랑 문자더하기에 대한 예제를 알아보자</p>

<p><strong>1). 상수를 넣는법</strong></p>

<p><code class="language-plaintext highlighter-rouge">Expressions</code>라는 인터페이스를 이용해 <code class="language-plaintext highlighter-rouge">.constant</code>메서드를 <br />
이용하면 상수를 넣어줄 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">constant</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Tuple</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">,</span> <span class="nc">Expressions</span><span class="o">.</span><span class="na">constant</span><span class="o">(</span><span class="s">"A"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Tuple</span> <span class="n">tuple</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"tuple = "</span> <span class="o">+</span> <span class="n">tuple</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
<span class="c1">// 출력 내용</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="n">member1</span><span class="o">,</span> <span class="no">A</span><span class="o">]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="n">member2</span><span class="o">,</span> <span class="no">A</span><span class="o">]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="n">member3</span><span class="o">,</span> <span class="no">A</span><span class="o">]</span>
<span class="n">tuple</span> <span class="o">=</span> <span class="o">[</span><span class="n">member4</span><span class="o">,</span> <span class="no">A</span><span class="o">]</span>
</code></pre></div></div>

<p>select에 “A”라는 상수 값을 넣어 출력하였다.  <br />
기존에 4개의 객체를 가지고 있기때문에 4개의 Tuple이 출력된 모습이다.</p>

<p><br /></p>

<p><strong>2). 문자열 붙이는법</strong></p>

<p><code class="language-plaintext highlighter-rouge">.concat</code> 메서드를 활용해 사용이 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">concat</span><span class="o">()</span> <span class="o">{</span>

        <span class="c1">// username_age 와 같은 형태로 만들기</span>
        <span class="c1">// username, age가 타입이 다름</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="s">"_"</span><span class="o">).</span><span class="na">concat</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">age</span><span class="o">.</span><span class="na">stringValue</span><span class="o">()))</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">member</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetch</span><span class="o">();</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"s = "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
    
<span class="c1">// 출력 내용</span>
<span class="n">s</span> <span class="o">=</span> <span class="n">member1_10</span>
</code></pre></div></div>
<p>출력할때 <code class="language-plaintext highlighter-rouge">username_age</code>와 같은 형태로 표시하려한다. ex) <code class="language-plaintext highlighter-rouge">member2_20</code>  <br />
select 구절에서 <code class="language-plaintext highlighter-rouge">.concat("_")</code>을 이용해 언더바를 붙여주었고 <br />
뒤에 한번더 age를 붙여주도록 메서드를 사용하였다. 여기서 age가 username과 타입이 다르기 때문에  <br />
타입을 변환해주는 <code class="language-plaintext highlighter-rouge">.stringValue()</code>를 사용해주어야한다.</p>

<p>최종적으로 쿼리가 나가는 모습을 보면</p>
<pre><code class="language-roomsql">select
      ((member0_.username||?)||cast(member0_.age as character varying)) as col_0_0_ 
  from
      member member0_ 
  where
      member0_.username=?
</code></pre>
<p>와 같이 쿼리가 나가는 모습을 볼 수 있는데 <br />
여기서 확인할 수 있는점은 cast()가 되어 타입을 맞춰주고 있다는 점이다.</p>

<p><br /><br />
<br /></p>

<hr />

<p>여기까지 QueryDsl의 기본 문법들을 알아보았다. <br />
JPQL,SQL 문법을 자세히 알면 어느정도 학습하기 괜찮은 수준인 것 같다.<br />
(하지만 JPQL,SQL 문법을 잘몰라 공부하느라 시간이 꽤 걸렷다…)</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Spring" /><category term="Spring" /><category term="QueryDSL" /><summary type="html"><![CDATA[QueryDSL]]></summary></entry><entry><title type="html">[Programmers] 상품 별 오프라인 매출 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/04/sql-productsum.html" rel="alternate" type="text/html" title="[Programmers] 상품 별 오프라인 매출 구하기 (MySQL)" /><published>2023-04-04T00:00:00+09:00</published><updated>2023-04-04T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/04/sql-productsum</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/04/sql-productsum.html"><![CDATA[<h2 id="-문제--상품-별-오프라인-매출-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/131533">상품 별 오프라인 매출 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 의류 쇼핑몰에서 판매중인 상품들의 상품 정보를 담은 <code>PRODUCT</code> 테이블과 오프라인 상품 판매 정보를 담은 <code>OFFLINE_SALE</code> 테이블 입니다. <code>PRODUCT</code> 테이블은 아래와 같은 구조로 <code>PRODUCT_ID</code>, <code>PRODUCT_CODE</code>, <code>PRICE</code>는 각각 상품 ID, 상품코드, 판매가를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>PRODUCT_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_CODE</td>
<td>VARCHAR(8)</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRICE</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>상품 별로 중복되지 않는 8자리 상품코드 값을 가지며, 앞 2자리는 카테고리 코드를 의미합니다.</p>

<p><code>OFFLINE_SALE</code> 테이블은 아래와 같은 구조로 되어있으며 <code>OFFLINE_SALE_ID</code>, <code>PRODUCT_ID</code>, <code>SALES_AMOUNT</code>, <code>SALES_DATE</code>는 각각 오프라인 상품 판매 ID, 상품 ID, 판매량, 판매일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>OFFLINE_SALE_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>PRODUCT_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_AMOUNT</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>SALES_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>동일한 날짜, 상품 ID 조합에 대해서는 하나의 판매 데이터만 존재합니다.</p>

<hr />

<h5>문제</h5>

<p><code>PRODUCT</code> 테이블과 <code>OFFLINE_SALE</code> 테이블에서 상품코드 별 매출액(판매가 * 판매량) 합계를 출력하는 SQL문을 작성해주세요. 결과는 매출액을 기준으로 내림차순 정렬해주시고 매출액이 같다면 상품코드를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>PRODUCT</code> 테이블이 다음과 같고 </p>
<table class="table">
        <thead><tr>
<th>PRODUCT_ID</th>
<th>PRODUCT_CODE</th>
<th>PRICE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>A1000011</td>
<td>15000</td>
</tr>
<tr>
<td>2</td>
<td>A1000045</td>
<td>8000</td>
</tr>
<tr>
<td>3</td>
<td>C3000002</td>
<td>42000</td>
</tr>
</tbody>
      </table>
<p><code>OFFLINE_SALE</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>OFFLINE_SALE_ID</th>
<th>PRODUCT_ID</th>
<th>SALES_AMOUNT</th>
<th>SALES_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>2</td>
<td>2022-02-21</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>2</td>
<td>2022-03-02</td>
</tr>
<tr>
<td>3</td>
<td>3</td>
<td>3</td>
<td>2022-05-01</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>1</td>
<td>2022-05-24</td>
</tr>
<tr>
<td>5</td>
<td>1</td>
<td>2</td>
<td>2022-07-14</td>
</tr>
<tr>
<td>6</td>
<td>2</td>
<td>1</td>
<td>2022-09-22</td>
</tr>
</tbody>
      </table>
<p>각 상품 별 총 판매량과 판매가는 다음과 같습니다.</p>

<ul>
<li><code>PRODUCT_CODE</code> 가 <code>A1000011</code>인 상품은 총 판매량이 6개, 판매가가 15,000원</li>
<li><code>PRODUCT_CODE</code> 가 <code>A1000045</code>인 상품은 총 판매량이 2개, 판매가가 8,000원</li>
<li><code>PRODUCT_CODE</code> 가 <code>C3000002</code>인 상품은 총 판매량이 3개, 판매가가 42,000원</li>
</ul>

<p>그러므로 각 상품 별 매출액을 계산하고 정렬하면 결과가 다음과 같이 나와야 합니다.</p>
<table class="table">
        <thead><tr>
<th>PRODUCT_CODE</th>
<th>SALES</th>
</tr>
</thead>
        <tbody><tr>
<td>C3000002</td>
<td>126000</td>
</tr>
<tr>
<td>A1000011</td>
<td>90000</td>
</tr>
<tr>
<td>A1000045</td>
<td>16000</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>SUM을 이용해 (가격 * 수량)을 곱한 값 행의 합계를 SALES 컬럼으로 지정한다.</li>
  <li>LEFT JOIN하여 PRODUCT_ID가 같은 것을 찾기</li>
  <li>PRODUCT_CODE를 그룹핑</li>
  <li>최종적으로 SALES 컬럼, SUM되어진 가격*수량 값을 기준으로 내림차순 정렬</li>
  <li>만약 컬럼의 값이 같다면 PRODUCT_CODE를 오름차순하여 정렬</li>
</ol>

<pre><code class="language-RoomSql">SELECT p.PRODUCT_CODE,
    SUM(p.PRICE * o.SALES_AMOUNT) AS SALES
FROM OFFLINE_SALE o
LEFT JOIN PRODUCT p 
ON p.PRODUCT_ID = o.PRODUCT_ID
GROUP BY p.PRODUCT_CODE
ORDER BY SALES DESC, p.PRODUCT_CODE ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 상품 별 오프라인 매출 구하기]]></summary></entry><entry><title type="html">[Spring] QueryDSL 기초설정 및 JPQL과 비교해보기</title><link href="http://localhost:4000/spring/2023/04/04/spring-querydsl.html" rel="alternate" type="text/html" title="[Spring] QueryDSL 기초설정 및 JPQL과 비교해보기" /><published>2023-04-04T00:00:00+09:00</published><updated>2023-04-04T00:00:00+09:00</updated><id>http://localhost:4000/spring/2023/04/04/spring-querydsl</id><content type="html" xml:base="http://localhost:4000/spring/2023/04/04/spring-querydsl.html"><![CDATA[<h2 id="querydsl">QueryDSL</h2>

<h3 id="querydsl-너는-뭐니">QueryDSL 너는 뭐니?🤔</h3>

<p>Query Domain Specific Language의 약자이다.  <br />
JPQL을 Java 코드로 작성할 수 있도록 하는 라이브러리이다.</p>

<p>JPQL과 다르게 사용함으로써 얻을 수 있는 이점은</p>
<ol>
  <li>문자가 아닌 코드로 쿼리를 작성함으로써, 컴파일 시점에 문법 오류를 확인할 수 있다.</li>
  <li>자동 완성 등 IDE의 도움을 받을 수 있다.</li>
  <li>동적인 쿼리 작성이 편하다.</li>
</ol>

<p>*동적쿼리? <br />
파라미터가 어떻게 오는지에 따라 조건이 변경되어지는 쿼리를 말한다.</p>

<p><br /></p>

<h3 id="설정하기">설정하기</h3>

<p><strong>gradle 설정</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">buildscript</span> <span class="o">{</span> <span class="c1">// Spring Boot 2.6 이상일 경우</span>
	<span class="n">ext</span> <span class="o">{</span>
		<span class="n">queryDslVersion</span> <span class="o">=</span> <span class="s">"5.0.0"</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="n">plugins</span> <span class="o">{</span>
	<span class="n">id</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="err">'</span> <span class="n">version</span> <span class="err">'</span><span class="mf">2.7</span><span class="o">.</span><span class="mi">7</span><span class="err">'</span>
	<span class="n">id</span> <span class="err">'</span><span class="n">io</span><span class="o">.</span><span class="na">spring</span><span class="o">.</span><span class="na">dependency</span><span class="o">-</span><span class="n">management</span><span class="err">'</span> <span class="n">version</span> <span class="err">'</span><span class="mf">1.0</span><span class="o">.</span><span class="mi">15</span><span class="o">.</span><span class="na">RELEASE</span><span class="err">'</span>
	<span class="c1">//querydsl 추가</span>
	<span class="n">id</span> <span class="s">"com.ewerk.gradle.plugins.querydsl"</span> <span class="n">version</span> <span class="s">"1.0.10"</span>
	<span class="n">id</span> <span class="err">'</span><span class="n">java</span><span class="err">'</span>
<span class="o">}</span>

<span class="n">group</span> <span class="o">=</span> <span class="err">'</span><span class="n">study</span><span class="err">'</span>
<span class="n">version</span> <span class="o">=</span> <span class="err">'</span><span class="mf">0.0</span><span class="o">.</span><span class="mi">1</span><span class="o">-</span><span class="no">SNAPSHOT</span><span class="err">'</span>
<span class="n">sourceCompatibility</span> <span class="o">=</span> <span class="err">'</span><span class="mi">11</span><span class="err">'</span>

<span class="n">configurations</span> <span class="o">{</span>
	<span class="n">compileOnly</span> <span class="o">{</span>
		<span class="n">extendsFrom</span> <span class="n">annotationProcessor</span>
	<span class="o">}</span>
<span class="o">}</span>

<span class="n">repositories</span> <span class="o">{</span>
	<span class="n">mavenCentral</span><span class="o">()</span>
<span class="o">}</span>

<span class="n">dependencies</span> <span class="o">{</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">data</span><span class="o">-</span><span class="n">jpa</span><span class="err">'</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">web</span><span class="err">'</span>

	<span class="c1">//querydsl 추가</span>
	<span class="n">implementation</span> <span class="s">"com.querydsl:querydsl-jpa:${queryDslVersion}"</span>
	<span class="n">implementation</span> <span class="s">"com.querydsl:querydsl-apt:${queryDslVersion}"</span>

	<span class="c1">// 쿼리를 이쁘게 출력해주는 라이브러리</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">com</span><span class="o">.</span><span class="na">github</span><span class="o">.</span><span class="na">gavlyukovskiy</span><span class="o">:</span><span class="n">p6spy</span><span class="o">-</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="nl">starter:</span><span class="mf">1.5</span><span class="o">.</span><span class="mi">8</span><span class="err">'</span>

	<span class="n">compileOnly</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">:</span><span class="n">lombok</span><span class="err">'</span>
	<span class="n">runtimeOnly</span> <span class="err">'</span><span class="n">com</span><span class="o">.</span><span class="na">h2database</span><span class="o">:</span><span class="n">h2</span><span class="err">'</span>
	<span class="n">annotationProcessor</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">:</span><span class="n">lombok</span><span class="err">'</span>
	<span class="n">testImplementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">test</span><span class="err">'</span>
<span class="o">}</span>

<span class="n">tasks</span><span class="o">.</span><span class="na">named</span><span class="o">(</span><span class="err">'</span><span class="n">test</span><span class="err">'</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">useJUnitPlatform</span><span class="o">()</span>
<span class="o">}</span>

<span class="c1">//querydsl 추가 시작</span>
<span class="n">def</span> <span class="n">querydslDir</span> <span class="o">=</span> <span class="s">"$buildDir/generated/querydsl"</span>

<span class="n">querydsl</span> <span class="o">{</span>
	<span class="n">jpa</span> <span class="o">=</span> <span class="kc">true</span>
	<span class="n">querydslSourcesDir</span> <span class="o">=</span> <span class="n">querydslDir</span>
<span class="o">}</span>
<span class="n">sourceSets</span> <span class="o">{</span>
	<span class="n">main</span><span class="o">.</span><span class="na">java</span><span class="o">.</span><span class="na">srcDir</span> <span class="n">querydslDir</span>
<span class="o">}</span>
<span class="n">compileQuerydsl</span><span class="o">{</span>
	<span class="n">options</span><span class="o">.</span><span class="na">annotationProcessorPath</span> <span class="o">=</span> <span class="n">configurations</span><span class="o">.</span><span class="na">querydsl</span>
<span class="o">}</span>
<span class="n">configurations</span> <span class="o">{</span>
	<span class="n">compileOnly</span> <span class="o">{</span>
		<span class="n">extendsFrom</span> <span class="n">annotationProcessor</span>
	<span class="o">}</span>
	<span class="n">querydsl</span><span class="o">.</span><span class="na">extendsFrom</span> <span class="n">compileClasspath</span>
<span class="o">}</span>
<span class="c1">//querydsl 추가 끝</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Gradle &gt; Tasks &gt; other &gt; compileQuerydsl</code>을 눌러 빌드하면</p>

<p><code class="language-plaintext highlighter-rouge">def querydslDir = "$buildDir/generated/querydsl"</code>에 의해서     <br />
build &gt; generated 패지키에 Q타입 클래스가 생긴다.</p>

<p><br /></p>

<p><strong>❗️ 주의점 ❗️</strong><br />
generated된 파일들은 git에 올리면 안된다. <br />
즉, gitignore처리를 해줘야한다. 보통 build파일을 gitignore하기 때문에 <br />
build 패키지안에 generated 폴더를 넣어주면된다. (gradle에서 설정)</p>

<p><img src="https://user-images.githubusercontent.com/95069395/229707216-aece56b0-bc8c-4619-a4ec-24454e83486d.png" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<h3 id="사용하기">사용하기</h3>

<p>Member, Team을 이용한 예제를 작성해보려한다.</p>

<p><strong>Member.java</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Getter</span> 
<span class="nd">@Setter</span>
<span class="nd">@NoArgsConstructor</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">AccessLevel</span><span class="o">.</span><span class="na">PROTECTED</span><span class="o">)</span>
<span class="nd">@ToString</span><span class="o">(</span><span class="n">of</span> <span class="o">=</span> <span class="o">{</span><span class="s">"id"</span><span class="o">,</span> <span class="s">"username"</span><span class="o">,</span> <span class="s">"age"</span><span class="o">})</span> <span class="c1">// team은 넣을경우 무한루프돔</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>

    <span class="nd">@Id</span> <span class="nd">@GeneratedValue</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"member_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">fetch</span> <span class="o">=</span> <span class="nc">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"team_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Member</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">){</span>
        <span class="k">this</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Member</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">){</span>
        <span class="k">this</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">age</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Member</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">,</span> <span class="nc">Team</span> <span class="n">team</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
        <span class="k">if</span><span class="o">(</span><span class="n">team</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">){</span>
            <span class="n">changeTeam</span><span class="o">(</span><span class="n">team</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changeTeam</span><span class="o">(</span><span class="nc">Team</span> <span class="n">team</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">team</span> <span class="o">=</span> <span class="n">team</span><span class="o">;</span>
        <span class="n">team</span><span class="o">.</span><span class="na">getMembers</span><span class="o">().</span><span class="na">add</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p><strong>Team.java</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Entity</span>
<span class="nd">@Getter</span> 
<span class="nd">@Setter</span>
<span class="nd">@NoArgsConstructor</span><span class="o">(</span><span class="n">access</span> <span class="o">=</span> <span class="nc">AccessLevel</span><span class="o">.</span><span class="na">PROTECTED</span><span class="o">)</span>
<span class="nd">@ToString</span><span class="o">(</span><span class="n">of</span> <span class="o">=</span> <span class="o">{</span><span class="s">"id"</span><span class="o">,</span> <span class="s">"name"</span><span class="o">})</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Team</span> <span class="o">{</span>

    <span class="nd">@Id</span> <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"team"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="nf">Team</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<p>빌드하여 QTeam, QMember 클래스가 생성되었다면 <br />
테스트코드를 통해 JPQL과 Querydsl을 비교해보자</p>

<p><strong>1). JPQL로 작성한 테스트 코드</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuerydslBasicTestPractice</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>

    <span class="nd">@BeforeEach</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Team</span> <span class="n">teamA</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">);</span>
        <span class="nc">Team</span> <span class="n">teamB</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">(</span><span class="s">"teamB"</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">teamA</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">teamB</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member1"</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="n">teamA</span><span class="o">);</span>
        <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member2"</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="n">teamA</span><span class="o">);</span>
        <span class="nc">Member</span> <span class="n">member3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member3"</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="n">teamB</span><span class="o">);</span>
        <span class="nc">Member</span> <span class="n">member4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member4"</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="n">teamB</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member3</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member4</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">startJPQL</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select m from Member m where m.username = :username"</span><span class="o">,</span> <span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"username"</span><span class="o">,</span> <span class="s">"member1"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getSingleResult</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>팀 객체를 2개 만들었다. (teamA, teamB) <br />
그리고 멤버를 4개 만들어 teamA, teamB에 속하도록 하였다.</p>

<p>이중에서 Member의 username이 <code class="language-plaintext highlighter-rouge">member1</code>로 되어있는 테이블을 조회하는 JPQL 문법이다. <br />
파라미터 바인딩을 통해 <code class="language-plaintext highlighter-rouge">:username</code>의 <code class="language-plaintext highlighter-rouge">member1</code>을 넣어 주었다.</p>

<pre><code class="language-roomsql">select
    member0_.member_id as member_i1_1_,
    member0_.age as age2_1_,
    member0_.team_id as team_id4_1_,
    member0_.username as username3_1_ 
from
    member member0_ 
where
    member0_.username=?
</code></pre>
<p>실제로 콘솔창에 출력되어진 쿼리를 보아도 where 절에 ?가 들어간 모습을 볼 수 있다.</p>

<p><br /></p>

<p><strong>2). Querydsl로 작성한 테스트 코드</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SpringBootTest</span>
<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">QuerydslBasicTestPractice</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>

    <span class="nd">@BeforeEach</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">before</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Team</span> <span class="n">teamA</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">(</span><span class="s">"teamA"</span><span class="o">);</span>
        <span class="nc">Team</span> <span class="n">teamB</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Team</span><span class="o">(</span><span class="s">"teamB"</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">teamA</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">teamB</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member1"</span><span class="o">,</span> <span class="mi">10</span><span class="o">,</span> <span class="n">teamA</span><span class="o">);</span>
        <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member2"</span><span class="o">,</span> <span class="mi">20</span><span class="o">,</span> <span class="n">teamA</span><span class="o">);</span>
        <span class="nc">Member</span> <span class="n">member3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member3"</span><span class="o">,</span> <span class="mi">30</span><span class="o">,</span> <span class="n">teamB</span><span class="o">);</span>
        <span class="nc">Member</span> <span class="n">member4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"member4"</span><span class="o">,</span> <span class="mi">40</span><span class="o">,</span> <span class="n">teamB</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member3</span><span class="o">);</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member4</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">queryDsl</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">JPAQueryFactory</span> <span class="n">queryFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JPAQueryFactory</span><span class="o">(</span><span class="n">em</span><span class="o">);</span>
        <span class="nc">QMember</span> <span class="n">m</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">QMember</span><span class="o">(</span><span class="s">"m"</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">queryFactory</span>
                <span class="o">.</span><span class="na">select</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
                <span class="o">.</span><span class="na">from</span><span class="o">(</span><span class="n">m</span><span class="o">)</span>
                <span class="o">.</span><span class="na">where</span><span class="o">(</span><span class="n">m</span><span class="o">.</span><span class="na">username</span><span class="o">.</span><span class="na">eq</span><span class="o">(</span><span class="s">"member1"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">fetchOne</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"member1"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>위와 동일한 요구사항으로 querydsl을 이용하여 작성한 코드이다. <br />
JPAQueryFactory 객체와 Q타입 Member객체를 만들어 작성하였다.</p>

<p>그리고 where절에서 username.eq를 통해 <code class="language-plaintext highlighter-rouge">member1</code>과 같은 항목을 찾고 있다. <br />
여기서 JPQL과 다른점은 파라미터 바인딩을 하지않았지만, 자동으로 파라미터 바인딩을 해준다.</p>

<pre><code class="language-roomsql">select
        member0_.member_id as member_i1_1_,
        member0_.age as age2_1_,
        member0_.team_id as team_id4_1_,
        member0_.username as username3_1_ 
    from
        member member0_ 
    where
        member0_.username=?
</code></pre>
<p>위의 쿼리는 querydsl을 사용하였을 떄 출력되어진 쿼리문인데  <br />
역시 JPQL과 동일하게 파라미터 바인딩이 되어진 모습이다.</p>

<p><br /> <br />
<br /></p>

<p>여기까지가 기본적인 설정과 사용법에 대한 내용이고  <br />
사용해본결과 정말 컴파일시 오류 확인이 정말 용이하고  <br />
<code class="language-plaintext highlighter-rouge">.</code>을 입력해 사용가능한 문법들이 쭉 나오니깐 코드 작성할때 어시스턴스가 <br />
정말 편하게 느껴졌다. 좀 더 사용해보면서 동적쿼리에 얼마나 편하게 작업이가능한지? <br />
여러가지 문법이 무엇이 있는지도 배워보도록 하자 !!</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Spring" /><category term="Spring" /><category term="QueryDSL" /><summary type="html"><![CDATA[QueryDSL]]></summary></entry><entry><title type="html">[Programmers] 조건에 맞는 도서와 저자 리스트 출력하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/03/sql-bookauthor.html" rel="alternate" type="text/html" title="[Programmers] 조건에 맞는 도서와 저자 리스트 출력하기 (MySQL)" /><published>2023-04-03T00:00:00+09:00</published><updated>2023-04-03T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/03/sql-bookauthor</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/03/sql-bookauthor.html"><![CDATA[<h2 id="-문제--조건에-맞는-도서와-저자-리스트-출력하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/144854">조건에 맞는 도서와 저자 리스트 출력하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 한 서점에서 판매중인 도서들의 도서 정보(<code>BOOK</code>) 테이블입니다.</p>

<p><code>BOOK</code> 테이블은 각 도서의 정보를 담은 테이블로 아래와 같은 구조로 되어있습니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
<th>Description</th>
</tr>
</thead>
        <tbody><tr>
<td>BOOK_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
<td>도서 ID</td>
</tr>
<tr>
<td>CATEGORY</td>
<td>VARCHAR(N)</td>
<td>FALSE</td>
<td>카테고리 (경제, 인문, 소설, 생활, 기술)</td>
</tr>
<tr>
<td>AUTHOR_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
<td>저자 ID</td>
</tr>
<tr>
<td>PRICE</td>
<td>INTEGER</td>
<td>FALSE</td>
<td>판매가 (원)</td>
</tr>
<tr>
<td>PUBLISHED_DATE</td>
<td>DATE</td>
<td>FALSE</td>
<td>출판일</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>BOOK</code> 테이블에서 <code>2021년</code>에 출판된 <code>'인문'</code> 카테고리에 속하는 도서 리스트를 찾아서 도서 ID(<code>BOOK_ID</code>), 출판일 (<code>PUBLISHED_DATE</code>)을 출력하는 SQL문을 작성해주세요. <br />
결과는 출판일을 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>BOOK</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>BOOK_ID</th>
<th>CATEGORY</th>
<th>AUTHOR_ID</th>
<th>PRICE</th>
<th>PUBLISHED_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>인문</td>
<td>1</td>
<td>10000</td>
<td>2020-01-01</td>
</tr>
<tr>
<td>2</td>
<td>경제</td>
<td>2</td>
<td>9000</td>
<td>2021-02-05</td>
</tr>
<tr>
<td>3</td>
<td>인문</td>
<td>2</td>
<td>11000</td>
<td>2021-04-11</td>
</tr>
<tr>
<td>4</td>
<td>인문</td>
<td>3</td>
<td>10000</td>
<td>2021-03-15</td>
</tr>
<tr>
<td>5</td>
<td>생활</td>
<td>1</td>
<td>12000</td>
<td>2021-01-10</td>
</tr>
</tbody>
      </table>
<p>조건에 속하는 도서는 도서 ID 가 3, 4인 도서이므로 다음과 같습니다.</p>
<table class="table">
        <thead><tr>
<th>BOOK_ID</th>
<th>PUBLISHED_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>3</td>
<td>2021-04-11</td>
</tr>
<tr>
<td>4</td>
<td>2021-03-15</td>
</tr>
</tbody>
      </table>
<p>그리고 출판일 오름차순으로 정렬하여야 하므로 다음과 같은 결과가 나와야 합니다.</p>
<table class="table">
        <thead><tr>
<th>BOOK_ID</th>
<th>PUBLISHED_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>4</td>
<td>2021-03-15</td>
</tr>
<tr>
<td>3</td>
<td>2021-04-11</td>
</tr>
</tbody>
      </table>
<hr />

<h5>주의사항</h5>

<p><code>PUBLISHED_DATE</code>의 데이트 포맷이 예시와 동일해야 정답처리 됩니다.</p>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>DATE_FORMAT을 이용한 발행시간 형식 변경</li>
  <li>LEFT JOIN으로 AUTHOR_ID가 같을때 JOIN</li>
  <li>카테고리 = ‘경제’인 것들만 찾기</li>
  <li>발행일 기준으로 오름차순</li>
</ol>

<pre><code class="language-RoomSql">SELECT b.BOOK_ID,
    a.AUTHOR_NAME,
    DATE_FORMAT(b.PUBLISHED_DATE,'%Y-%m-%d')
FROM BOOK b 
LEFT JOIN AUTHOR a
ON b.AUTHOR_ID = a.AUTHOR_ID
WHERE b.category = '경제'
ORDER BY b.PUBLISHED_DATE ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 조건에 맞는 도서와 저자 리스트 출력하기]]></summary></entry><entry><title type="html">[Programmers] 자동차 평균 대여 기간 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/01/sql-carrent.html" rel="alternate" type="text/html" title="[Programmers] 자동차 평균 대여 기간 구하기 (MySQL)" /><published>2023-04-01T00:00:00+09:00</published><updated>2023-04-01T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/01/sql-carrent</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/01/sql-carrent.html"><![CDATA[<h2 id="-문제--자동차-평균-대여-기간-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/157342">자동차 평균 대여 기간 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 자동차 대여 회사의 자동차 대여 기록 정보를 담은 <code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블입니다. <code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블은 아래와 같은 구조로 되어있으며, <code>HISTORY_ID</code>, <code>CAR_ID</code>, <code>START_DATE</code>, <code>END_DATE</code> 는 각각 자동차 대여 기록 ID, 자동차 ID, 대여 시작일, 대여 종료일을 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>HISTORY_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>CAR_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>START_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
<tr>
<td>END_DATE</td>
<td>DATE</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<hr />

<h5>문제</h5>

<p><code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블에서 평균 대여 기간이 7일 이상인 자동차들의 자동차 ID와 평균 대여 기간(컬럼명: <code>AVERAGE_DURATION</code>) 리스트를 출력하는 SQL문을 작성해주세요. 평균 대여 기간은 소수점 두번째 자리에서 반올림하고, 결과는 평균 대여 기간을 기준으로 내림차순 정렬해주시고, 평균 대여 기간이 같으면 자동차 ID를 기준으로 내림차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>CAR_RENTAL_COMPANY_RENTAL_HISTORY</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>HISTORY_ID</th>
<th>CAR_ID</th>
<th>START_DATE</th>
<th>END_DATE</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>1</td>
<td>2022-09-27</td>
<td>2022-10-01</td>
</tr>
<tr>
<td>2</td>
<td>1</td>
<td>2022-10-03</td>
<td>2022-11-04</td>
</tr>
<tr>
<td>3</td>
<td>2</td>
<td>2022-09-05</td>
<td>2022-09-05</td>
</tr>
<tr>
<td>4</td>
<td>2</td>
<td>2022-09-08</td>
<td>2022-09-10</td>
</tr>
<tr>
<td>5</td>
<td>3</td>
<td>2022-09-16</td>
<td>2022-10-15</td>
</tr>
<tr>
<td>6</td>
<td>1</td>
<td>2022-11-07</td>
<td>2022-12-06</td>
</tr>
</tbody>
      </table>
<p>자동차 별 평균 대여 기간은</p>

<ul>
<li>자동차 ID가 1인 자동차의 경우, 대여 기간이 각각 5일, 33일, 30일인 기록이 존재하므로 평균 22.7일</li>
<li>자동차 ID가 2인 자동차의 경우, 대여 기간이 각각 1일, 3일인 기록이 존재하므로 평균 2일</li>
<li>자동차 ID가 3인 자동차의 경우, 대여 기간이 30일인 기록만 존재하므로 평균 30일
입니다. 평균 대여 기간이 7일 이상인 자동차는 자동차 ID가 1, 3인 자동차이고, 평균 대여 기간 내림차순 및 자동차 ID를 기준으로 내림차순 정렬하면 다음과 같이 나와야 합니다.</li>
</ul>
<table class="table">
        <thead><tr>
<th>CAR_ID</th>
<th>AVERAGE_DURATION</th>
</tr>
</thead>
        <tbody><tr>
<td>3</td>
<td>30.0</td>
</tr>
<tr>
<td>1</td>
<td>22.7</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>ROUND를 이용해 소수점 두번쨰 자리에서 반올림</li>
  <li>DATEDIFF를 이용한 날짜의 차이를 계산</li>
  <li>AVG를 이용한 평균 계산</li>
  <li>GROUP BY를 이용한 집계</li>
</ol>

<pre><code class="language-RoomSql">SELECT c.CAR_ID,
    ROUND(AVG(DATEDIFF(c.END_DATE, c.START_DATE)+1),1)
    AS AVERAGE_DURATION
    FROM CAR_RENTAL_COMPANY_RENTAL_HISTORY c
GROUP BY CAR_ID
HAVING AVERAGE_DURATION &gt;= '7'
ORDER BY AVERAGE_DURATION DESC, CAR_ID DESC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 자동차 평균 대여 기간 구하기]]></summary></entry><entry><title type="html">[Programmers] 자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기 (MySQL)</title><link href="http://localhost:4000/sql/2023/04/01/sql-cartype.html" rel="alternate" type="text/html" title="[Programmers] 자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기 (MySQL)" /><published>2023-04-01T00:00:00+09:00</published><updated>2023-04-01T00:00:00+09:00</updated><id>http://localhost:4000/sql/2023/04/01/sql-cartype</id><content type="html" xml:base="http://localhost:4000/sql/2023/04/01/sql-cartype.html"><![CDATA[<h2 id="-문제--자동차-종류-별-특정-옵션이-포함된-자동차-수-구하기">📌 문제 : <a href="https://school.programmers.co.kr/learn/courses/30/lessons/151137">자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기</a></h2>

<h3 id="-문제-설명">📖 문제 설명</h3>

<p>다음은 어느 자동차 대여 회사에서 대여중인 자동차들의 정보를 담은 <code>CAR_RENTAL_COMPANY_CAR</code> 테이블입니다. <code>CAR_RENTAL_COMPANY_CAR</code> 테이블은 아래와 같은 구조로 되어있으며, <code>CAR_ID</code>, <code>CAR_TYPE</code>, <code>DAILY_FEE</code>, <code>OPTIONS</code> 는 각각 자동차 ID, 자동차 종류, 일일 대여 요금(원), 자동차 옵션 리스트를 나타냅니다.</p>
<table class="table">
        <thead><tr>
<th>Column name</th>
<th>Type</th>
<th>Nullable</th>
</tr>
</thead>
        <tbody><tr>
<td>CAR_ID</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>CAR_TYPE</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
<tr>
<td>DAILY_FEE</td>
<td>INTEGER</td>
<td>FALSE</td>
</tr>
<tr>
<td>OPTIONS</td>
<td>VARCHAR(255)</td>
<td>FALSE</td>
</tr>
</tbody>
      </table>
<p>자동차 종류는 '세단', 'SUV', '승합차', '트럭', '리무진' 이 있습니다. 자동차 옵션 리스트는 콤마(',')로 구분된 키워드 리스트(옵션 리스트 값 예시: '열선시트', '스마트키', '주차감지센서')로 되어있으며, 키워드 종류는 '주차감지센서', '스마트키', '네비게이션', '통풍시트', '열선시트', '후방카메라', '가죽시트' 가 있습니다.</p>

<hr />

<h5>문제</h5>

<p><code>CAR_RENTAL_COMPANY_CAR</code> 테이블에서 '통풍시트', '열선시트', '가죽시트' 중 하나 이상의 옵션이 포함된 자동차가 자동차 종류 별로 몇 대인지 출력하는 SQL문을 작성해주세요. 이때 자동차 수에 대한 컬럼명은 <code>CARS</code>로 지정하고, 결과는 자동차 종류를 기준으로 오름차순 정렬해주세요.</p>

<hr />

<h5>예시</h5>

<p>예를 들어 <code>CAR_RENTAL_COMPANY_CAR</code> 테이블이 다음과 같다면</p>
<table class="table">
        <thead><tr>
<th>CAR_ID</th>
<th>CAR_TYPE</th>
<th>DAILY_FEE</th>
<th>OPTIONS</th>
</tr>
</thead>
        <tbody><tr>
<td>1</td>
<td>세단</td>
<td>16000</td>
<td>가죽시트,열선시트,후방카메라</td>
</tr>
<tr>
<td>2</td>
<td>SUV</td>
<td>14000</td>
<td>스마트키,네비게이션,열선시트</td>
</tr>
<tr>
<td>3</td>
<td>SUV</td>
<td>22000</td>
<td>주차감지센서,후방카메라</td>
</tr>
<tr>
<td>4</td>
<td>트럭</td>
<td>35000</td>
<td>주차감지센서,네비게이션,열선시트</td>
</tr>
<tr>
<td>5</td>
<td>SUV</td>
<td>16000</td>
<td>가죽시트,네비게이션,열선시트,후방카메라,주차감지센서</td>
</tr>
</tbody>
      </table>
<p>'통풍시트', '열선시트', '가죽시트' 중 하나 이상의 옵션이 포함된 자동차는 자동차 ID가 1, 2, 4, 5인 자동차이고, 자동차 종류 별로 몇 대인지 구하고 자동차 종류를 기준으로 오름차순 정렬하면 다음과 같은 결과가 나와야 합니다.</p>
<table class="table">
        <thead><tr>
<th>CAR_TYPE</th>
<th>CARS</th>
</tr>
</thead>
        <tbody><tr>
<td>SUV</td>
<td>2</td>
</tr>
<tr>
<td>세단</td>
<td>1</td>
</tr>
<tr>
<td>트럭</td>
<td>1</td>
</tr>
</tbody>
      </table>

<blockquote>
  <p>출처: 프로그래머스 코딩 테스트 연습, https://programmers.co.kr/learn/challenges</p>
</blockquote>

<hr />

<h2 id="-문제-풀이">🗝 문제 풀이</h2>

<ol>
  <li>COUNT를 이용한 CAR_TYPE 수량 집계</li>
  <li>WHERE절을 이용한 특정 조건 찾기</li>
  <li>GROUP BY를 이용한 집계</li>
</ol>

<pre><code class="language-RoomSql">SELECT CAR_TYPE,
    COUNT(CAR_TYPE) AS CARS
FROM CAR_RENTAL_COMPANY_CAR
WHERE OPTIONS LIKE '%통풍시트%' OR
    OPTIONS LIKE '%열선시트%' OR
    OPTIONS LIKE '%가죽시트%'
GROUP BY CAR_TYPE
ORDER BY CAR_TYPE ASC;
</code></pre>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="SQL" /><category term="SQL" /><category term="Programmers" /><summary type="html"><![CDATA[📌 문제 : 자동차 종류 별 특정 옵션이 포함된 자동차 수 구하기]]></summary></entry></feed>