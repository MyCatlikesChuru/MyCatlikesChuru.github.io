<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-27T16:26:27+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LeeJellan</title><subtitle>안녕하세요!🙂 IT,여행,기타 등 기록을 남기기위한 블로그 입니다 !</subtitle><author><name>LEE JAEHYEOK</name></author><entry><title type="html">TIL) Spring JDBC 기반 액세스 계층 1</title><link href="http://localhost:4000/til/2022/10/27/til.html" rel="alternate" type="text/html" title="TIL) Spring JDBC 기반 액세스 계층 1" /><published>2022-10-27T00:00:00+09:00</published><updated>2022-10-27T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/27/til</id><content type="html" xml:base="http://localhost:4000/til/2022/10/27/til.html"><![CDATA[<p>한주 한주가 정말 빠르게 지나간다.<br />
생각보다 공부를 많이한 것 같지만 복습하면서 뒤돌아보면<br />
그렇게 많은 양을 공부한 것도 아니다.</p>

<p>얼른 지식을 익히고 프로젝트를 해보고 싶다 ㅠㅠ<br />
그날을 위해서 열심히 지식 축척을 !!</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmSXU951Um_58x0b3_0a2GfPEYsLXEs-jRIv8ABUveSo7Iw5c_T-fB_Qq0joTmnrxVKOQF2vwPY=w1512-h753" align="left" /></p>

<p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<hr />

<h2 id="spring-jdbc-기반-액세스-계층">Spring JDBC 기반 액세스 계층</h2>

<h3 id="jdbc">JDBC</h3>

<p>JDBC는 Java Database Connectivity 약자로<br />
Java 레벨에서 데이터를 데이터베이스에 저장 및 업데이트 하거나<br />
데이터베이스에 저장된 데이터를 Java 레벨에서 사용할 수 있도록<br />
Java에서 제공해주는 표준 사양 이다.</p>

<p>JDBC의 API를 우리가 직접 사용할 일은 없다고한다.<br />
후에 Spring Data JDBC,JPA 같은 기술로 로직을 구현할 것이고<br />
위와 같은 기술이 내부적으로는 JDBC를 이용하기 때문에<br />
동작 흐름정도 파악하려고 이번 챕터를 배운다고 생각하면 될 것 같다.</p>

<h3 id="jdbc-동작-흐름">JDBC 동작 흐름</h3>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmSdBYjY4b6XPdkagpwC70Pqeh7vCehwy-RxI8ijRSwEJfSex_hSMNp9kqyn8Ecs__d_A4XcBU0=w1920-h921" align="left" width="500px" /></p>

<p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>JDBC API를 사용하기 위해서는<br />
JDBC 드라이브를 먼저 로딩한 후에 데이터베이스와 연결한다.</p>

<p>드라이버는 그림과 같이 데이터베이스와 통신을 담당하는 인터페이스다.<br />
여러 데이터베이스 회사에 맞게 드라이버를 구현해서 제공해준다.</p>

<p><br /></p>

<h3 id="data-access-기술-유형">Data Access 기술 유형</h3>

<p>Spring에서 사용할 수 있는 대표적인 액세스 기술에는<br />
mybatis, Spring JDBC, Spring Data JDBC, JPA, Spring Data JPA 등이 있다고한다.<br />
어디선가 한번씩 들어본적있는 이름들이다..</p>

<p>과거에는 SQL 쿼리문을 직접 포함하고 있는 방식을 많이 사용했다고한다.<br />
하지만 현재 Java 진영에서는 SQL중심이 아니라 <strong>객체중심의 기술</strong>로<br />
지속적으로 이전하고 있는 추세라고한다.  즉, SQL중심의 학습보다는 현재<br />
많이 사용하고 있는 추세의 객체중심의 기술을 학습하는 방향이 좋을 것 같다.</p>

<p><strong>객체중심 기술?</strong><br />
SQL 쿼리문을 직접 다루기보단, 객체를 SQL 쿼리문으로 변환해주고<br />
접근하는 방법을 말한다고 한다. 이러한 데이터 액세스 기술을<br />
기술을 ORM(Object Relational Mapping)라고 한다.<br />
이후에 우리가 배울 JPA가 Java에서 대표적인 ORM 기술이라고한다.</p>

<h3 id="spring-data-jdbc">Spring Data JDBC</h3>

<p>JPA의 기술적인 난이도에 비해 심플하다.<br />
우선 Spring data JDBC를 이용하기 위해서는</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
</code></pre></div></div>

<p>이전에 우리가 의존 라이브러리 추가했던 것 처럼<br />
build.gradle 의존 라이브러리 코드를 추가해줘야 된다.</p>

<p><br /></p>

<p>데이터 베이스는 인메모리를 이용하는 DB H2를 사용하여 실습해보자</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>runtimeOnly 'com.h2database:h2'
</code></pre></div></div>
<p>동일하게 build.gradle에 h2를 사용가능하게<br />
의존성 라이브러리를 추가해주자</p>

<p>스프링 부트를 실행시키면 콘솔에 아래와 같이 노출되는 것을 볼 수 있는데</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>H2 console available at '/h2-console'. Database available at 'jdbc:h2:mem:48abebe3-424c-4a03-a74b-8d1ff2ebc750'
</code></pre></div></div>
<p>이말은, /h2-consle 주소로 접속후 연결하기 위한<br />
JDBC URL: jdbc:h2:mem:48abebe3-424c-4a03-a74b-8d1ff2ebc750 를<br />
입력하라는 의미이다.</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmRZqftCtzQKEaQYKgtzjp9fZAuex8V7dMaxWx4cCGm2lyPXTDljumo3m-BK-BaD9qgz7kZ9Q4s=w1920-h921" align="left" width="500px" /></p>

<p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
<br /><br /><br /><br /><br /><br /><br /></p>

<p>위와 같이 입력하면 H2 DB에 접속이 가능하다.<br />
여기서 JDBC URL은 부트실행시킬시 랜덤으로 변경되므로 간편하게 이용하기위해선</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">h2</span><span class="pi">:</span>
    <span class="na">console</span><span class="pi">:</span>
      <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s">/h2 (1)</span> <span class="c1">#Context path 변경</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:h2:mem:test</span> <span class="c1">#(2) #JDBC URL 변경</span>
</code></pre></div></div>
<p>resources -&gt; application.yml에서 위와 같이 설정을하면<br />
주소를 h2, JDBC URL을 간단하게 입력해<br />
접속이 가능하므로 참고하자!<br />
(application.properties를 application.yml로 이름을 바꾸면 사용가능)</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmQBCkbEd80Pbqc1LNcCwAqu6urror_D1lOoRgCqj5Eq7UEgpjduEBaq9Jx1XifABSU5eWY7kIg=w1920-h921" align="left" width="500px" /></p>

<p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
<br /><br /><br /></p>

<p>접속에 성공할 경우 위와 같은 화면으로 들어와진다.<br />
(왼쪽의 테이블은 현재 만들어둔 것이라 생성되어 있지만 처음엔 없음)</p>

<p>여기까지가 build.gradle에 사용할 라이브러리들을 의존주입해주었고<br />
application.yml 파일에 사용할 DB를 연동했다.<br />
이제 우리가 Spring Data JDBC 사용하기 위해선 다음과 같은 순서를 진행해야한다.</p>

<p><br /></p>

<p>1). .sql 파일에 필요한 Table Script를 작성한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE TABLE IF NOT EXISTS BABO (
    BABO_ID bigint NOT NULL AUTO_INCREMENT,
    MESSAGE varchar(100) NOT NULL,
    PRIMARY KEY (BABO_ID)
);
</code></pre></div></div>
<p>resources 경로에서 -&gt; 새로 만들기 -&gt; 파일 -&gt; 이름.sql <br />
로 입력하면 .sql 파일이 생길 것이다.</p>

<p>그리고 파일 내용에는 테이블을 생성하고 안에 BABO_ID라는 <br />
Primary key를 만들고  MESSAGE라는 column도 생성하는 쿼리문을<br />
작성한 파일을 넣어두면 된다.</p>

<p>2). 작성한 sql파일을 읽어서 테이블을 생성할 수 있도록 application.yml파일에 초기화 설정을 추가한다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">h2</span><span class="pi">:</span>
    <span class="na">console</span><span class="pi">:</span>
      <span class="na">enabled</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s">/h2</span>     
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:h2:mem:test</span>    
  <span class="na">sql</span><span class="pi">:</span>
    <span class="na">init</span><span class="pi">:</span>
      <span class="na">schema-locations</span><span class="pi">:</span> <span class="s">classpath*:schema.sql</span> <span class="c1"># 경로 추가</span>
</code></pre></div></div>
<p>이제 우리가 만든 sql파일의 경로를 설정해주는 방법인데.<br />
파일이름을 schema.sql이라고 지정했고 해당 파일을<br />
위의 코드 처럼 경로를 지정했다.<br />
예를들어 패키지 구조를 만든다면  루트 디렉토리 위치를 적어 주면된다.<br />
ex) db라는 폴더안에 파일있을 경우 = classpath*:db/schema.sql</p>

<p>이렇게 위와 같이 두 가지 준비를 해주고<br />
애플리케이션 실행시, h2 DB에 우리가 작성한<br />
sql 구문대로 테이블이 자동으로 생성이된다.</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmQiNzJHU9VaYPm33r-cPauTJm_nL3OsrQbCKTRWufcWP5grpuUIlwe76hRUcyzxILSR53g764I=w1920-h921" align="left" width="500px" /></p>

<p><br /><br /><br /><br /></p>

<p>이렇게 H2 DB에 들어가서 확인해보면 우리가 만든<br />
테이블의 이름대로 Column들이 생성되는  것을 볼 수 있다.</p>

<p>여기서 이제 우리는 레코드값(행값)을 여태까지 배운 방법을 통해서<br />
DB에 저장을 해줄 수 있다.</p>

<p><strong>맨처음에 JDBC는 자바레벨에서 데이터베이스에 데이터를 업데이트하거나<br />
반대로 받을 수 있다고 맨처음에 얘기를 했습니다.</strong></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
</code></pre></div></div>
<p>맨처음에 의존라이브러리를 우리가 추가했었는데<br />
이 라이브러리 안에 기능중 CrudRepository라는 클래스로<br />
데이터베이스에 접근이 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.data.repository.CrudRepository</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MessageRepository</span> <span class="kd">extends</span> <span class="nc">CrudRepository</span><span class="o">&lt;</span><span class="nc">Babo</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{}</span>
</code></pre></div></div>
<p>인터페이스로 Repository를 만들고 CrudRepository를 상속해준 다음에<br />
&lt;클래스, PrimaryKey 타입&gt;을 입력해주면 우리는 다형성에 의해<br />
CrudRepository에 있는 기능들을 사용할 수 있게 되어진다.</p>

<p><em>(CrudRepository를 사용하기위해서 위에 import가 필요하며<br />
import가 되려면 의존라이브러리를 추가해야한다 !!)</em></p>

<p>위에 코드로 이제 우리는 infterface MessageRepository를 사용해<br />
Service 클래스에서 Overriding하여 사용하면<br />
데이터가 H2 DB에 저장이되는 아주 신비로운 일을 겪을 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MessageRepository</span> <span class="n">messageRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MessageService</span><span class="o">(</span><span class="nc">MessageRepository</span> <span class="n">messageRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">messageRepository</span> <span class="o">=</span> <span class="n">messageRepository</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Babo</span> <span class="nf">createMessage</span><span class="o">(</span><span class="nc">Babo</span> <span class="n">message</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">messageRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>스프링 컨테이너를 통한 의존성 주입 후<br />
해당 객체의 .save(); 메서드를 구현하면<br />
Entity의 맞는 데이터가 들어왔을 때, 데이터가 맵핑되어 자동으로<br />
DB에 저장되게 되어진다.</p>

<hr />
<p>이렇게 오늘은 JDBC에 내용을 알아 보았고<br />
그 중에서도 Spring data JDBC를 사용해보았다.<br />
앞으로도 많은 DB접근 기술을 접할 텐데<br />
설렘반 걱정반인 느낌이다..</p>

<p>최대한 많은 기술을 배울수 있도록 구글링해보면서<br />
공부해볼 생각이다</p>

<p>오늘 공부는 여기서 끝!!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 불고기, 라면, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[한주 한주가 정말 빠르게 지나간다. 생각보다 공부를 많이한 것 같지만 복습하면서 뒤돌아보면 그렇게 많은 양을 공부한 것도 아니다.]]></summary></entry><entry><title type="html">TIL) Spring Exception 2</title><link href="http://localhost:4000/til/2022/10/26/til.html" rel="alternate" type="text/html" title="TIL) Spring Exception 2" /><published>2022-10-26T00:00:00+09:00</published><updated>2022-10-26T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/26/til</id><content type="html" xml:base="http://localhost:4000/til/2022/10/26/til.html"><![CDATA[<p>요즘 스프링 공부하는게 너무 재밌다.</p>

<p>처음에 이해가 가지않았을 때는 이게 뭔가 싶기도하고,,<br />
학습의지가 떨어졌는데 어느 순간 깨달음을 얻고 나서는<br />
다음 학습이 기대되고 얼른 더 다른걸 해보고 싶다.</p>

<p>어제는 클라이언트에서 받은 데이터를 예외처리하는<br />
여러가지 방법을 알아보았다.</p>

<p>오늘은 예외 던지기에 대해 공부해 보는 날이다.</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmSQnaE21aVigm3UisbtYcpIDvy2dUTKPe9eBRofjjG5-ECCzS8FRO0Md_pXQkLTbl23ajRuf_s=w1920-h921" align="left" width="400px" /></p>

<p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<hr />

<p><br /></p>

<p>어제는 @Vaild, @Vaildated 유효설 실패에 대한<br />
예외처리를 하는 프로그램을 공부 했다.<br />
오늘은 다른 예외들의 예외처리하는 프로그램을 공부해 보자.</p>

<p><strong>1). 예외처리를 매개변수로 받기</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExceptionHandler</span>
<span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">NOT_FOUND</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">ErrorResponse</span> <span class="nf">handleResourceNotFoundException</span><span class="o">(</span><span class="nc">RuntimeException</span> <span class="n">error</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>@ExceptionHandler로 에러를 감지하게 해주고<br />
에러가 감지되었는데 RuntimeException에러가 발생하면<br />
RuntimeException 클래스로 객체를 받아서<br />
에러의 정보들을 객체를 통해 확인할 수 있다.</p>

<p>여기서 getMessage(); 메서드는<br />
<strong>Throwalbe</strong>의 메서드를 <strong>상속</strong>받아 사용하고 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">throw</span> <span class="k">new</span> <span class="nc">RuntimeException</span><span class="o">(</span><span class="s">"Not found"</span><span class="o">);</span>
</code></pre></div></div>

<p>만약 다른 메서드에서 위와 같이 강제로 RuntimeException을 발생시키고<br />
Message로 “Not found”라고 적어두었을 경우.<br />
생성자로 RuntimeException의 String 값을 넣을 경우<br />
최상위 클래스인 Throwable의 message가 저장되게된다.</p>

<p>해당 메서드가 실행 되면, @ExceptionHandler에 의해<br />
RuntimeException 객체가 매개변수를 통해 전달된다.</p>

<p>문제점은 위의 예외상황은 RuntimeException만 작성했을 뿐<br />
의도적으로 발생 시킬 예외 상황이 더 있을 수 있다.<br />
그리고 예외 의도가 명확하지 않다는 점.</p>

<p><br /></p>

<p><strong>2). 개선된 예외 상황 처리</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">ExceptionCode</span> <span class="o">{</span>
    <span class="no">MEMBER_NOT_FOUND</span><span class="o">(</span><span class="mi">404</span><span class="o">,</span> <span class="s">"Member Not Found"</span><span class="o">);</span>
    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">status</span><span class="o">;</span>

    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>

    <span class="nc">ExceptionCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">status</span><span class="o">,</span> <span class="nc">String</span> <span class="n">message</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BusinessLogicException</span> <span class="kd">extends</span> <span class="nc">RuntimeException</span> <span class="o">{</span>
    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="nc">ExceptionCode</span> <span class="n">exceptionCode</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span> <span class="n">exceptionCode</span><span class="o">){</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">exceptionCode</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="k">this</span><span class="o">.</span><span class="na">exceptionCode</span> <span class="o">=</span> <span class="n">exceptionCode</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExceptionHandler</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">handleResourceNotFoundException</span><span class="o">(</span><span class="nc">BusinessLogicException</span> <span class="n">e</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getExceptionCode</span><span class="o">().</span><span class="na">getStatus</span><span class="o">());</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getExceptionCode</span><span class="o">().</span><span class="na">getStatus</span><span class="o">()));</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위에 클래스를 3가지로 나누어서<br />
BusinessLogicException 클래스를 통해<br />
객체를 받는 방법이다.</p>

<p>먼저 enum 클래스를 통해서<br />
사용할 생성자의 데이터를 맵핑해주고</p>

<p>BusinessLogicException 클래스를 만들어<br />
RuntimeException을 상속해 spuer(); 생성자를 통해<br />
Throawble까지 메세지를 올려주고, 객체를 저장하게 작성했다.<br />
해당 객체는 @Getter를 이용해 가져올 수 있고<br />
그 객체를 통해서 Enum의 Status값과 Message를 가져오는 모습이다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">throw</span> <span class="k">new</span> <span class="nc">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">MEMBER_NOT_FOUND</span><span class="o">);</span>
</code></pre></div></div>

<p>최종적으로 예외를 강제로 위와 같이<br />
MEMBER_NOT_FOUND로 던졌을 경우</p>

<p>BusinessLogicException 클래스와 ExceptionCode 클래스를<br />
이용해 객체츨 만들고 예외처리로 흐름을 넘겨<br />
우리가 커스터 마이징한 값을 출력하는 것 까지 보았다.</p>

<p>그럼 우리가 이제 이 기반으로<br />
응답하는 객체를 새로 정리해서 보낸다든지?<br />
커스터마이징이 가능하게 되는 것이다.</p>

<p>중요한 점은 에러가 강제로 발생 되었을 경우<br />
우리가 흐름을 가져와 제어할 수있다는 점을 얻어간 것 같다.</p>

<p><br /></p>

<p>어제 공부했던거와 더불어 다시 정리해보자면</p>
<ol>
  <li>
    <p>MethodArgumentNotValidException<br />
-&gt;@Vaild 유효성 검증 실패한 예외잡기</p>
  </li>
  <li>
    <p>ConstraintViolationException <br />
-&gt;@Vaildated 유효성 검증 실패한 예외잡기</p>
  </li>
  <li>
    <p>HttpRequestMethodNotSupportedException<br />
-&gt; 해당 핸들러 메서드에 정의된 메서드와 호출한 메서드가 잘못되었을때 예외잡기</p>
  </li>
  <li>
    <p>NullPointerException : NullPoint 예외처리 발생한 것 잡기</p>
  </li>
  <li>
    <p>RuntimeException 클래스를 상속받아 클래스를 만들어<br />
제어흐름을 가져올 수 있음.</p>
  </li>
</ol>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 라면, 불고기, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[요즘 스프링 공부하는게 너무 재밌다.]]></summary></entry><entry><title type="html">TIL) Spring Exception 1</title><link href="http://localhost:4000/til/2022/10/25/til.html" rel="alternate" type="text/html" title="TIL) Spring Exception 1" /><published>2022-10-25T00:00:00+09:00</published><updated>2022-10-25T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/25/til</id><content type="html" xml:base="http://localhost:4000/til/2022/10/25/til.html"><![CDATA[<p>매일 매일 다짐하지만<br />
잠자는 수면패턴 바꾸는건 쉽지가 않은 것 같다 ㅎ..</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmR0ojECPgvr59qNqcpS6o9lEXTD-ON7Y-v4gZAV7K5p1nohAe7rImugv-030uzKwua0HVAn6Sk=w3024-h1728" align="left" /><br />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<hr />

<p>어제까지 Spring Service 계층에 대해 공부했다.<br />
오늘은 Spring Exception에 대해 공부하는 날이다.<br />
총 2일로 잡혀있고, 2일이 잡혀있다는 것에 약간 어떤 내용이 있을지<br />
벌써 겁이나기 시작한다 ㅠㅠ..</p>

<p>그래도 차근차근 학습해보자</p>

<h2 id="spring-exception">Spring Exception</h2>

<p>클라이언트가 전달 받는 Response Body는<br />
애플리케이션에서 예외가 발생했을 때, 내부적으로 Spring에서<br />
에러 응답 메세지를 전송해준다.<br />
<em>ex) Postman API 요청시, 400 Bad Requset</em></p>

<p>하지만 이렇게 보내주면 Response Body의 내용만으로<br />
요청 데이터 중에서 어떤 항목이 유효성 검증에 실패했는지 알수가 없다.</p>

<p>이제 클라이언트쪽에 에러메세지를 더 구체적으로 해줄 수 있는<br />
방법에 대해 공부해보자</p>

<h3 id="exceptionhandler">@ExceptionHandler</h3>

<p>Controller 레벨에서 하는 예외처리다.</p>

<p>예를 들어 Controller 부분에서 Handler 매서드를 <br />
POST 이용해 Json 값을 받아온다고 가정하였을 경우<br />
이전에 학습한 @Vaild를 이용해 유효성검증을 할 수 있다.</p>

<p>만약에 핸드폰번호 값을 받아오는 유효성검증에 ‘-‘가 없거나 숫자가 아닐떄<br />
등 유효성 실패 조건을 걸어놓고 해당하는 값이 통과되지 못할 때<br />
기존에는 Postman에 400, Bad Request만 발생하였지만</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmSMqRKzD80yxkbX7I4jYRK0K0_5STWS73tt53lDVFwNAZSh62xKMthXdt_aHKCYJIcj9bWH1GY=w3024-h1728" align="left" /></p>

<p><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>위와 같이 어떻게 유효성 검증이 실패되었는지<br />
List 형태로 여러가지 정보들을 확인해 볼 수 있는 메서드가<br />
@ExceptionHandler 라고 생각해보면 될 것 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExceptionHandler</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">handleException</span><span class="o">(</span><span class="nc">MethodArgumentNotValidException</span> <span class="n">e</span><span class="o">){</span>
    <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FieldError</span><span class="o">&gt;</span> <span class="n">fieldErrors</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getBindingResult</span><span class="o">().</span><span class="na">getFieldErrors</span><span class="o">();</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="n">fieldErrors</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 코드는 ExceptionHandler 애노테이션을 이용하는 방법이다.<br />
Controller 클래스 아래에 @ExceptionHandler를 사용할<br />
메서드를 만들어주고, MethodArgumentNotVaildException이라는 클래스로<br />
예외에 대한 객체를 받을 수 있다.</p>

<p>이제 객체를 이용해 원하는 데이터들만 호출해<br />
(.getBindingResult().getFieldErrors() 등등..)<br />
ResponseEntity에 상태를 담아서 돌려보내주면</p>

<p>똑같이 Bad Request를 응답 받아도<br />
JSON 객체로 어떤 정보들이 담겨져있는지 친절하게 확인이 가능하다는 점!</p>

<p><br /></p>

<h4 id="-데이터-구조는-"><span style="color:#0066CC"> 데이터 구조는? </span></h4>

<p>그럼 전달 받은 객체의 내용을 자세히 보자면</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">FieldError</span><span class="o">&gt;</span> <span class="n">fieldErrors</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getBindingResult</span><span class="o">().</span><span class="na">getFieldErrors</span><span class="o">();</span>  
</code></pre></div></div>

<p>를 통해서 값을 가져온다. fieldErrors를 Json으로 변환하면<br />
아래와 같이 모습이 나오게된다. (이메일형식과 전화번호 형식이 틀렸다고 가정)</p>

<pre><code class="language-Json">[
    {
        "codes": [
            "Pattern.memberPostDto.phone",
            "Pattern.phone",
            "Pattern.java.lang.String",
            "Pattern"
        ],
        "arguments": [
            {
                "codes": [
                    "memberPostDto.phone",
                    "phone"
                ],
                "arguments": null,
                "defaultMessage": "phone",
                "code": "phone"
            },
            [],
            {
                "arguments": null,
                "defaultMessage": "^010-\\d{3,4}-\\d{4}$",
                "codes": [
                    "^010-\\d{3,4}-\\d{4}$"
                ]
            }
        ],
        "defaultMessage": "휴대폰 번호는 010으로 시작하는 11자리 숫자와 '-'로 구성되어야 합니다.",
        "objectName": "memberPostDto",
        "field": "phone",
        "rejectedValue": "010-12345678",
        "bindingFailure": false,
        "code": "Pattern"
    },
    {
        "codes": [
            "Email.memberPostDto.email",
            "Email.email",
            "Email.java.lang.String",
            "Email"
        ],
        "arguments": [
            {
                "codes": [
                    "memberPostDto.email",
                    "email"
                ],
                "arguments": null,
                "defaultMessage": "email",
                "code": "email"
            },
            [],
            {
                "arguments": null,
                "defaultMessage": ".*",
                "codes": [
                    ".*"
                ]
            }
        ],
        "defaultMessage": "올바른 형식의 이메일 주소여야 합니다",
        "objectName": "memberPostDto",
        "field": "email",
        "rejectedValue": "dhfif718",
        "bindingFailure": false,
        "code": "Email"
    }
]
</code></pre>
<p>구조를 자세히 보면 어렵지 않다.<br />
유효성 검증이 틀린 부분마다 List&lt;&gt;에 정보가 add가 되어진다.<br />
크게 나누자면 아래와 같이</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">"codes"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="err">,</span><span class="w">
</span><span class="nl">"arguments"</span><span class="p">:</span><span class="w"> </span><span class="p">[]</span><span class="err">,</span><span class="w">
</span><span class="nl">"defaultMessage"</span><span class="p">:</span><span class="w"> </span><span class="s2">"올바른 형식의 이메일 주소여야 합니다"</span><span class="err">,</span><span class="w">
</span><span class="nl">"objectName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"memberPostDto"</span><span class="err">,</span><span class="w">
</span><span class="nl">"field"</span><span class="p">:</span><span class="w"> </span><span class="s2">"email"</span><span class="err">,</span><span class="w">
</span><span class="nl">"rejectedValue"</span><span class="p">:</span><span class="w"> </span><span class="s2">"dhfif718"</span><span class="err">,</span><span class="w">
</span><span class="nl">"bindingFailure"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="err">,</span><span class="w">
</span><span class="nl">"code"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Email"</span><span class="w">
</span></code></pre></div></div>
<p>8개의 큰 항목으로 분리되고 그 안에서<br />
codes, arguments를 깊이탐색을 통해서 다른 정보도<br />
접근이 가능하다.</p>

<p><br /></p>

<h4 id="-원하는-데이터만-"><span style="color:#0066CC"> 원하는 데이터만? </span></h4>

<p>위의 데이터 구조로만 보았을 때 List로 작성했기 때문에<br />
데이터 접근이 가능하여, 원하는 데이터만 출력이 가능하다.</p>

<p>만약에 field, rejectedValue, reason이란 값만 가져온다고 가정하고<br />
코드를 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ErrorResponse</span> <span class="o">{</span>
    <span class="c1">// AllArgsConstructor 덕분에 생성자가 자동으로 생기면 의존성 주입도됨</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FieldError</span><span class="o">&gt;</span> <span class="n">fieldErrors</span><span class="o">;</span>

    <span class="nd">@Getter</span>
    <span class="nd">@AllArgsConstructor</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">FieldError</span><span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">field</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">Object</span> <span class="n">rejectedValue</span><span class="o">;</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">reason</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExceptionHandler</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">handleException</span><span class="o">(</span><span class="nc">MethodArgumentNotValidException</span> <span class="n">e</span><span class="o">){</span>
    <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FieldError</span><span class="o">&gt;</span> <span class="n">fieldErrors</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getBindingResult</span><span class="o">().</span><span class="na">getFieldErrors</span><span class="o">();</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ErrorResponse</span><span class="o">.</span><span class="na">FieldError</span><span class="o">&gt;</span> <span class="n">errors</span> <span class="o">=</span> <span class="n">fieldErrors</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="n">error</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">error</span><span class="o">))</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">error</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">ErrorResponse</span><span class="o">.</span><span class="na">FieldError</span><span class="o">(</span>
                    <span class="n">error</span><span class="o">.</span><span class="na">getField</span><span class="o">(),</span>
                    <span class="n">error</span><span class="o">.</span><span class="na">getRejectedValue</span><span class="o">(),</span>
                    <span class="n">error</span><span class="o">.</span><span class="na">getDefaultMessage</span><span class="o">()</span>
            <span class="o">))</span>
            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="n">errors</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>편의상 Class 부분과 POST 핸들러 메서드는 생략했다.<br />
이전과 동일하게 fieldErrors라는 객체를 만들고<br />
그 객체를 stream을 이용해 원하는 목록의 데이터를 get하여<br />
생성자로 ErrorResponse.FieldError();을 통해 객체를 만들어준다<br />
그렇게 만들어진 객체를 List안에 넣어 반환해주고</p>

<p>Postman에서 API 요청 시<br />
아래와 같이 우리가 원하는 데이터만 List화하여<br />
Json 객체로 반환하는 모습을 볼 수 있다.</p>

<pre><code class="language-Json">[
    {
        "field": "phone",
        "rejectedValue": "010-12345678",
        "reason": "휴대폰 번호는 010으로 시작하는 11자리 숫자와 '-'로 구성되어야 합니다."
    },
    {
        "field": "email",
        "rejectedValue": "dhfif718naver.com",
        "reason": "올바른 형식의 이메일 주소여야 합니다"
    }
]
</code></pre>

<p>이렇게 ExceptionHandler를 사용하여<br />
유효성 검증에 통과하지 못하면, 우리가 원하는대로<br />
커스터마이징하여 클라이언트측에 데이터를 보낼 수 있게된다.</p>

<p>하지만 이 메서드의 큰 단점이 존재한다.</p>

<p><strong>1. MethodArgumentNotValidException 클래스의 예외 말고 다른 예외를 처리할때?</strong><br />
-&gt; 그에 해당하는 에러 핸들러 메서드를 또 만들어줘야함..</p>

<p><strong>2. Controller 클래스가 2개이상 일경우</strong><br />
-&gt; 위에서 했던 메서드들을 각 Controller 클래스마다 똑같이 만들어야함. (중복발생 !!)</p>

<p><br /></p>

<h3 id="restcontrolleradvice">@RestControllerAdvice</h3>
<p>ExceptionHandler와 같이 사용하게 될 경우<br />
위에서 학습했던 단점을 해결해주기위한 애노테이션이다 !</p>

<p>이전에는 우리가 Controller에 직접<br />
ExecptionHandler를 작성해주었지만..</p>

<p>별도의 클래스를 하나 만들고 @RestControllerAdvice를<br />
클래스 애노테이션을 달아주게된다면<br />
REST API 요청시 Vaild 검증실패할 경우 해당 클래스의<br />
ExceptionHandler에 잡혀 구현된 동작을 실행하게 되는 것이다.</p>

<p><em>!! SSR 방식에서는 주로 @InitBinder, @ModelAttribute를 사용한다고한다.<br />
우리는 CSR 방식을 사용하기때문에 @ExceptionHandler 사용.</em></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestControllerAdvice</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GlobalExceptionAdvice</span> <span class="o">{</span>

    <span class="nd">@ExceptionHandler</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">handleMethodArgumentNotValidException</span><span class="o">(</span><span class="nc">MethodArgumentNotValidException</span> <span class="n">e</span><span class="o">){</span>

        <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">FieldError</span><span class="o">&gt;</span> <span class="n">fieldErrors</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">getBindingResult</span><span class="o">().</span><span class="na">getFieldErrors</span><span class="o">();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ErrorResponse</span><span class="o">.</span><span class="na">FieldError</span><span class="o">&gt;</span> <span class="n">errors</span> <span class="o">=</span> <span class="n">fieldErrors</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">error</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">ErrorResponse</span><span class="o">.</span><span class="na">FieldError</span><span class="o">(</span>
                        <span class="n">error</span><span class="o">.</span><span class="na">getField</span><span class="o">(),</span>
                        <span class="n">error</span><span class="o">.</span><span class="na">getRejectedValue</span><span class="o">(),</span>
                        <span class="n">error</span><span class="o">.</span><span class="na">getDefaultMessage</span><span class="o">()</span>
                <span class="o">))</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>

        <span class="c1">//최종 객체 Json + 응답상태 반환하기</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="k">new</span> <span class="nc">ErrorResponse</span><span class="o">(</span><span class="n">errors</span><span class="o">),</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>이전에 Controller에 있었던 구현 메서드를<br />
새로 만든 GlobalExceptionAdivce라는 클래스로 옮기고<br />
@RestControllerAdvice를 달아준 모습이다.</p>

<p>위에서 학습했던 것과 동일하게<br />
원하는 데이터만 뽑아 Json 객체로 돌려주게 하였다</p>

<p>지금은 간단하게<br />
MethodArgumentNotValidException를 통해서<br />
FieldErrors만 가져오도록 프로그램을 하였는데</p>

<p>ConstraintViolationException를 통해서<br />
ConstraintViolationErrors도 가져와야하는 프로그램을<br />
작성해야한다.</p>

<p><br /></p>

<h2 id="-한줄-정리-"><span style="color:#0066CC"> 한줄 정리 </span></h2>
<p>@Vaild 예외처리 - MethodArgumentNotValidException<br />
@Vaildated 예외처리 - ConstraintViolationException</p>

<hr />

<p>별도의 클래스생성과 애노테이션 하나로 이렇게<br />
프로그램이 간단해지고 보기 편해질줄이야..</p>

<p>정말 먼저 개발을 시작하고 이러한 개념을 정착시킨<br />
선배 개발자분들이 존경스럽다</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 불고기 덮밥, 스팸, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[매일 매일 다짐하지만 잠자는 수면패턴 바꾸는건 쉽지가 않은 것 같다 ㅎ..]]></summary></entry><entry><title type="html">구글 드라이브로 이미지 url 적용하기</title><link href="http://localhost:4000/it/2022/10/25/it-etc-imageurl.html" rel="alternate" type="text/html" title="구글 드라이브로 이미지 url 적용하기" /><published>2022-10-25T00:00:00+09:00</published><updated>2022-10-25T00:00:00+09:00</updated><id>http://localhost:4000/it/2022/10/25/it-etc-imageurl</id><content type="html" xml:base="http://localhost:4000/it/2022/10/25/it-etc-imageurl.html"><![CDATA[<h1 id="이미지-url-적용하기">이미지 url 적용하기</h1>
<p>네이버 블로그나 Tistory 등…<br />
타 플랫폼의 블로그를 작성하시는 분들은 사진을 통해서<br />
올리기 때문에 해당 플랫폼이 알아서 관리를 해준다.</p>

<p>하지만… 나와 같이 GitHub Page를 사용한다거나<br />
개인 블로그를 운영중인 분들은<br />
이미지를 올리기 위해 다른 방법을 찾아야한다.</p>

<ol>
  <li>GitHub에 사진을 같이 올리고 , 경로로 사진표시<br />
-&gt; 해당 방법은 GitHub 저장소가 초과하면 애매해진다..</li>
  <li>이미지를 url로 변경 시켜 관리하기<br />
-&gt; 이미지를 url로 변경시키고 저장을 유지시켜주는 안전한 플랫폼이 필요</li>
</ol>

<p>이렇게 떠올리게되어 나는 <strong>2번</strong>을 선택하게 되었고</p>

<p>처음에는 다른 사람들이 올려놓은 <a href="https://ifh.cc/">iFH 이미지 호스팅</a>과 같은<br />
홈페이지를 이용해 정리를 하였었는데 ….</p>

<p>불현듯 현재는 이 사이트에서 내사진을 저장해 관리하고 있는데<br />
이 사이트의 서비스를 종료한다던가? 사라지게된다면<br />
내가 여태까지 저장해놓은 모든 사진들은 허공속으로 가버리는 것이다..</p>

<p><br /></p>

<h3 id="안전하게-저장하는-방법은-"><span style="color:#0066CC">안전하게 저장하는 방법은 ?</span></h3>

<p>다른 변경 호스팅 페이지를 이용하면 위에서 말했던 문제가 생길 수도 있기 때문에<br />
비교적으로 안전한 <strong>“구글 드라이브를 통해 이미지 url 바꾸는 방법</strong>을 설명하려한다.</p>

<p><strong>1). 내가 변경하고자하는 이미지를 구글드라이브에 넣는다.</strong><br />
-&gt; 넣은 이미지 파일을 마우스 오른쪽 클릭 !<br />
-&gt; 필자는 스크린샷 2022-10~~ 뭐시기로된 프로그램 캡처사진을 넣었다.</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmQVcLiSu-ykhVbtab_etZPl1pHZEPtUPerbz_EIPeek-aTWiCg0enyE5L2b7We-d3nOX4bJC_o=w3024-h1728" align="left" /></p>

<p><strong>2). 링크가 있는 모든 사용자로 바꿔준다.</strong><br />
-&gt; 바꾼후 완료 클릭<br />
-&gt; 링크 복사를 한다.</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmRWQGDSjQWsBm5kM9hE4Iulyr7vj2dHkp2XFx-LXxMuJbTHffLKx-B79RdD7llp3yh8fiIZ9LU=w3024-h1728" align="left" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p><strong>3). 내가 작성중인 블로그에 해당 링크를 붙여넣는다.</strong><br />
-&gt; 보통 GitHub page를 작성하는 분들은 MarkDown 언어로 포스팅을 하기에</p>

<div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">![</span><span class="nv">example image</span><span class="p">](</span><span class="sx">링크주소</span><span class="p">)</span>
</code></pre></div></div>
<p>와 같은 방법으로 주소를 넣어 이미지를 넣거나</p>

<p>크기 조절이나 정령을 하고 싶으신 분들은</p>

<div class="language-html highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">&lt;img</span> <span class="na">src=</span><span class="s">"링크주소"</span> <span class="na">align=</span><span class="s">"left"</span><span class="nt">&gt;</span>
</code></pre></div></div>
<p>html 문법으로 링크 주소를 넣어 작성하여 이미지를 넣어도 무방하다.</p>

<p><br /></p>

<h3 id="파일이-로딩되지-않아요-"><span style="color:#0066CC">파일이 로딩되지 않아요 !</span></h3>

<p>여기서 만약 위에 1),2)번을 따라했지만 아래와 같이 사진 이미지가<br />
보이지 않고 파일로 나올경우?</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmTFm2_anq_vjKEzlpnDEC5kFnBj5i_vYGIALa0GC8bH4NstmFC88WmthnmEf-glizCiNxdObFA=w3024-h1728" align="left" /></p>

<p><br /><br /><br /><br /><br /><br /></p>

<p>이렇게 이미지를 사용하지 못하는 경우는<br />
아래와 같은 방법으로 사진 주소를 다시 검색 할 수 있다.</p>

<p><br /></p>

<p>먼저 아까 위에서 복사했던 주소를<br />
Google Chrome 브라우저에서 <strong>새탭</strong>으로 열어주면<br />
아래와 같이 구글드라이브로 연동된 사진이 나오게 될 것이다.</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmQY7wKQYjWRwh8o6PanbsXgp_0EbT97NG5HgCB1bLfSPI0ljEjzN6uT_BQfnsukgdH81SCmJ7E=w3024-h1728" align="left" /></p>

<p><br /></p>

<p>위에 사진이 나왔다면 아래의 순서대로 진행하면 된다.</p>

<ol>
  <li>브라우저에 사진이 나온다.</li>
  <li>
    <p>크롬 브라우저 개발자 도구를 연다<br />
-&gt; 경로 : 크롬 브라우저 상단 우측 <strong>⫶</strong> 로된 버튼 클릭 -&gt; 도구 더보기 -&gt; 개발자 도구<br />
<strong>tip) 맥북 단축키 : ⌥ + ⌘ + i<br />
tip) 윈도우 단축키 : F12</strong></p>
  </li>
  <li>개발자 도구에서 <strong>찾기 기능</strong>(맥북:⌘+F, 윈도우:Ctrl+F)를 연다.</li>
  <li>찾기 기능이 열리면 위 사진과 같이 중간에 타이핑을 할 수 있는 창이 생긴다.<br />
<strong>img</strong> 라고 <strong>입력</strong> 엔터를 눌러 위치를 찾는다.</li>
  <li>엔터를 누르다보면 위에 사진과 같이 url 주소가 나온다.<br />
-&gt; 해당 주소에 마우스를 가져다대면 사진에 하늘색으로 표시가됨</li>
  <li>해당 주소를 복사해서 사용하면 된다!</li>
</ol>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmQau70WaZx0XThiMXSN914-WF8Y-TVNlWxtTuLmQWoXqyTii9qeT4G6COxAN1CXH-PL4eHE0Lg=w3024-h1728" align="left" /></p>

<p><br /></p>

<p>위의 내용을 따라하면 된다. 따라하면서 위에 사진과 동일하게 <br />
주소를 찾아주면 그 주소가 이미지 url 주소이다.</p>

<p>그 주소를 가지고 이제 블로그나 내가 사용하려는 곳에<br />
이용하면 되는 것이다!!</p>

<p><br /></p>

<h3 id="폴더를-공유로-설정-"><span style="color:#0066CC">폴더를 공유로 설정 !</span></h3>

<p>참고로 해당하는 사진마다 일일히 공유를 눌러줄 수는 없으니까<br />
내가 관리하려는 폴더에 위에서 공유를 하면 하위 데이터는<br />
전부 공유로 바뀌게된다.</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmRzYYtAjIhzT6vvIjHZ-tIrBxLgSBHbHCqwqwrUIuA4MchYwWltF7PFaz0ROvRlBCXXEvOCadA=w3024-h1728" align="left" /></p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmQK6pfkh96AtgcxVx4TR0g7yWopx7nBubGMiNLL7BtjHnPKAVOTyw8ROJreFSNHeF7ilHIKSIk=w3024-h1728" align="left" /></p>

<p><br /></p>

<p>이렇게 내가 블로그에 작성하려는 이미지를<br />
폴더 별로 잘 모아놓았다가<br />
전체를 공유로 바꾸든, 일부분만 바꾸든 적용해서<br />
그 이미지를 개발자도구를 통해 주소로 꺼낼 수 있다.</p>

<hr />

<p><br /></p>

<p>이상 구글 드라이브를 통해<br />
이미지를 url로 가져올 수 있는 방법을 설명 드렸다.</p>

<p>사실 추후에 이렇게 사용하는 부분을 막을지? 아닐지는 잘 모르겠다.<br />
하지만 구글이라는 대형 플랫폼을 통해서 관리를 한는 측면.<br />
그리고 아이클라우드나, 구글드라이브같이 우리가 널리 사용하는<br />
서비스이기 때문에  데이터가 날라갈 걱정을 할 필요는 없으니</p>

<p>조금 안심된 블로그 이미지를 사용할 수 있을 듯한? 기분이다 !!</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="IT" /><category term="IT" /><category term="이미지 url" /><category term="구글 드라이브" /><summary type="html"><![CDATA[이미지 url 적용하기 네이버 블로그나 Tistory 등… 타 플랫폼의 블로그를 작성하시는 분들은 사진을 통해서 올리기 때문에 해당 플랫폼이 알아서 관리를 해준다.]]></summary></entry><entry><title type="html">TIL) Spring MVC Serivce 계층</title><link href="http://localhost:4000/til/2022/10/24/til.html" rel="alternate" type="text/html" title="TIL) Spring MVC Serivce 계층" /><published>2022-10-24T00:00:00+09:00</published><updated>2022-10-24T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/24/til</id><content type="html" xml:base="http://localhost:4000/til/2022/10/24/til.html"><![CDATA[<p>주말이 지나고 월요일이 왔다.</p>

<p><img src="https://ifh.cc/g/Sl0oOY.gif" align="left" width="250px" height="300px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>주말동안 정규식 복습과 블로그 개설 준비를했다.<br />
오늘 부터는 GitHub Page로 만든 블로그로 포스팅을 할려고한다.<br />
하려고하려고 했는데, 드디어 개설할 수 있어서<br />
포스팅하는 맛이 날 것 같다 ㅎㅎ</p>

<hr />

<h2 id="service">Service</h2>

<p>저번주에 API 계층에 대해서 공부 했었다.<br />
Controller의 핸들러 메서드를 통해서<br />
클라이언트의 요청을 어떻게 전달 받을 수 있는지?까지 파악해보았고</p>

<p>이번 시간부터는 Service 계층을 공부해볼 시간이다.</p>
<ol>
  <li>DI를 사용해 API 계층과 Service 계층을 연동하기</li>
  <li>API 계층의 DTO클래스와 Service 계층의 Entity 클래스를 매핑하기</li>
</ol>

<p>Service 클래스는 애플리케이션에 있어<br />
도메인 업무 영역을 구현하는 비지니스 로직과 관련이 있다.</p>

<p><br /></p>

<h3 id="lombok">lombok</h3>
<p>시작에 앞서 <strong>lombok</strong>에서 지원하는 어노테이션<br />
5가지정도 간단하게 알아보자</p>

<p>1). @NoArgsConstructor : 파라미터가 없는 기본 생성자로 만들어줌</p>

<p>2). @RequiredArgsConstructor : final, @NonNull로 붙은 멤버 변수를 파라미터로 가지는 생성자를 생성해줌 <br />
   -&gt; 생성자를 만들어주기때문에 생성자가 하나일경우 자동으로 @Autowired가 된다.</p>

<p>3). @AllArgsConstructor :해당 애노테이션이 붙은 클레스에 추가된 모든 멤버 변수를 파라미터로 가지는 생성자를 생성해줌</p>

<p>4). @Getter : 멤버 변수의 Getter 메서드를 만들어줌</p>

<p>5).@Setter : 멤버 변수의 Setter 메서드를 만들어줌</p>

<p>말로 들으면 어려우니 코드로 확인해보자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">memberId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 코드가 lombok 어노테이션을 적용한 코드이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">memberId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">long</span> <span class="nf">getMemberId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">memberId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">email</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMemberId</span><span class="o">(</span><span class="kd">final</span> <span class="kt">long</span> <span class="n">memberId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberId</span> <span class="o">=</span> <span class="n">memberId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setEmail</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="c1">//NoArgsConstructor 애노테이션으로 만들어진 생성자</span>
    <span class="kd">public</span> <span class="nf">Member</span><span class="o">()</span> <span class="o">{</span>
    <span class="o">}</span>
    <span class="c1">//AllArgsConstructor 애노테이션으로 만들어진 생성자</span>
    <span class="kd">public</span> <span class="nf">Member</span><span class="o">(</span><span class="kd">final</span> <span class="kt">long</span> <span class="n">memberId</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberId</span> <span class="o">=</span> <span class="n">memberId</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phone</span> <span class="o">=</span> <span class="n">phone</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>해당 lombok 어노테이션을 build하면 위와 같이 코드가<br />
자동으로 생성되서 빌드되게 되어진다.</p>

<p>말그대로 우리가 코드를 직접 다 입력하지않아도<br />
lomobk의 기능을 이용하면 어노테이션 하나로<br />
어떤기능이 있는지 쉽게 유추가 가능하고 코드도 간결해진다.</p>

<h3 id="service-계층---api-계층--dto---entity-맵핑">Service 계층 - API 계층 / DTO - Entity 맵핑</h3>

<p>저번주에 공부했던 API 계층의 데이터를 받기위해<br />
핸들러 메서드를 통해 JSON 객체 값을 DTO로 받아오는 것 까지 공부를 했었다.<br />
이제 이렇게 받아온 데이터를 Service 계층과 어떻게<br />
연동 시키고 코드를 작성해야 유연한지 공부해보자.</p>

<p>우선 기본로직을 작성해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Coffee</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">korName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">engName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Entity 클래스인 Coffee 클래스이다.<br />
lombok을 이용해 Getter,Setter 메서드를 사용할 수 있게 해주고<br />
생성자는 매개변수가 없는 생성자 1개 (NoArgsConstructor)<br />
매개변수가 4개인 생성자 1개 (AllArgsConstructor)<br />
해서 총 2개의 생성자가 만들어졌다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeePostDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">korName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">engName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>그리고 API 계층에서 보내줄 데이터<br />
3개를 멤버변수로 만들었다.</p>

<p><br /></p>

<p>역할과 기능을 나누기위해서<br />
Controller에는 API 데이터를 가져오고 반환해주는 역할만 두고<br />
Service 클래스를 만들어 비지니스로직을 만들고<br />
Mapper를 이용해 Dto와 Entity클래스를 매핑하여 연동해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeeService</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">Coffee</span> <span class="nf">createCoffee</span><span class="o">(</span><span class="nc">Coffee</span> <span class="n">coffee</span><span class="o">){</span>
        
        <span class="c1">// coffee 객체는 추후 DB연결후 리턴받는 걸로 변경 필요.</span>
        <span class="nc">Coffee</span> <span class="n">toss</span> <span class="o">=</span> <span class="n">coffee</span><span class="o">;</span>

        <span class="k">return</span> <span class="n">toss</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>우선 Service 클래스를 Bean으로 등록해놓고<br />
의존성 주입을 통행 createCoffee(); 메서드를<br />
다른 클래스에서 사용할 수 있게 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeeController</span> <span class="o">{</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CoffeeService</span> <span class="n">coffeeService</span><span class="o">;</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CoffeeMapper</span> <span class="n">coffeeMapper</span><span class="o">;</span>
   
   <span class="nd">@Autowired</span> <span class="c1">// 의존성 주입, 생성자가 1개라 생략가능함</span>
   <span class="kd">public</span> <span class="nf">CoffeeController</span><span class="o">(</span><span class="nc">CoffeeService</span> <span class="n">coffeeService</span><span class="o">,</span> <span class="nc">CoffeeMapper</span> <span class="n">coffeeMapper</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">coffeeService</span> <span class="o">=</span> <span class="n">coffeeService</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">coffeeMapper</span> <span class="o">=</span> <span class="n">coffeeMapper</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="nd">@PostMapping</span>
   <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">postCoffee</span><span class="o">(</span><span class="nd">@Valid</span> <span class="nd">@RequestBody</span> <span class="nc">CoffeePostDto</span> <span class="n">coffeePostDto</span><span class="o">)</span> <span class="o">{</span>

      <span class="nc">Coffee</span> <span class="n">coffee</span> <span class="o">=</span> <span class="n">coffeeMapper</span><span class="o">.</span><span class="na">coffeePostDtoToCoffee</span><span class="o">(</span><span class="n">coffeePostDto</span><span class="o">);</span> <span class="c1">// DTO &lt;-&gt; Entity 변환</span>
      <span class="nc">Coffee</span> <span class="n">response</span> <span class="o">=</span> <span class="n">coffeeService</span><span class="o">.</span><span class="na">createCoffee</span><span class="o">(</span><span class="n">coffee</span><span class="o">);</span> <span class="c1">// Coffee 생성</span>

      <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span><span class="n">coffeeMapper</span><span class="o">.</span><span class="na">coffeeToCoffeeResponseDto</span><span class="o">(</span><span class="n">response</span><span class="o">),</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Controller 클래스에서는 CoffeeService,CoffeeMapper 를 의존성 주입해놓고<br />
Mapper 클래스인 coffeeMapper를 만들어 coffeePostDto를 &lt;-&gt; entity의 맵핑을 시켜주는<br />
방법으로 프로그램을 작성했다. 최종적으로 맵핑시켜 받은 객체를<br />
Service로직의 createCoffee로 객체를 만들어 반환받은 Coffee 클래스 참조 변수를<br />
coffeeToCoffeeResponseDto라는 맵퍼를 이용해 Json 객체를 통해 반환해주는 모습이다.</p>

<p><br /></p>

<p>이제 @Mapper라는 어노테이션을 이용해<br />
추상화 시켜 Mapper 클래스를 작성해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">mapstruct</span><span class="o">:</span><span class="nl">mapstruct:</span><span class="mf">1.4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="na">Final</span><span class="err">'</span>
<span class="n">annotationProcessor</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">mapstruct</span><span class="o">:</span><span class="n">mapstruct</span><span class="o">-</span><span class="nl">processor:</span><span class="mf">1.4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="na">Final</span><span class="err">'</span>
</code></pre></div></div>
<p>우선 gradle dependencies에 위의 코드를 추가해줘야 Mapper를 사용가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span><span class="o">(</span><span class="n">componentModel</span> <span class="o">=</span> <span class="s">"spring"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CoffeeMapper</span> <span class="o">{</span>
    <span class="nc">Coffee</span> <span class="nf">coffeePostDtoToCoffee</span><span class="o">(</span><span class="nc">CoffeePostDto</span> <span class="n">coffeePostDto</span><span class="o">);</span>
    <span class="nc">CoffeeResponseDto</span> <span class="nf">coffeeToCoffeeResponseDto</span><span class="o">(</span><span class="nc">Coffee</span> <span class="n">coffee</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>이렇게 인터페이스를 통해 메서드를 추상화 시켜놓으면<br />
Mapper 클래스가 자동으로 빌드과정에서 구현체를 만들어준다.<br />
해당 구현체의 내용은 첫줄부터 보자면</p>

<p>Coffee coffeePostDtoToCoffee(CoffeePostDto coffeePostDto);<br />
coffeePostDto로 전달된 객체를 Coffee 타입의 변수로 값을 넣어준다.<br />
넣을때는 생성자와 Setter로 넣어준다. 말그대로 @Mapper하나를<br />
달아놓음으로서 자동으로 코드가 주입되는 것이다.<br />
실제로 빌드해놓은 코드를 보면 아래와 같이 나온다.</p>

<p><strong>&lt;@Mapper를 통해 자동으로 Build된 코드&gt;</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Coffee</span> <span class="nf">coffeePostDtoToCoffee</span><span class="o">(</span><span class="nc">CoffeePostDto</span> <span class="n">coffeePostDtoo</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">coffeePostDtoo</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="nc">Coffee</span> <span class="n">coffee</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Coffee</span><span class="o">();</span>
      <span class="n">coffee</span><span class="o">.</span><span class="na">setKorName</span><span class="o">(</span><span class="n">coffeePostDtoo</span><span class="o">.</span><span class="na">getKorName</span><span class="o">());</span>
      <span class="n">coffee</span><span class="o">.</span><span class="na">setEngName</span><span class="o">(</span><span class="n">coffeePostDtoo</span><span class="o">.</span><span class="na">getEngName</span><span class="o">());</span>
      <span class="n">coffee</span><span class="o">.</span><span class="na">setPrice</span><span class="o">(</span><span class="n">coffeePostDtoo</span><span class="o">.</span><span class="na">getPrice</span><span class="o">());</span>
      <span class="k">return</span> <span class="n">coffee</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>다른 부분들은 생략하고 coffeePostDto 부분만 보면<br />
위처럼 coffeePostDto를 매개변수로 전달해<br />
참조변수에 값이 있으면, Coffee 객체를 생성자를 통해 새로만들어<br />
setter로 필드변수에 값을 넣어주는 모습이다.</p>

<p>실제로 Coffee 클래스에는 @NoArgsConstructor가 있기 때문에<br />
매개변수가 없는 생성자를 통해 객체가 만들어지고<br />
@Sette가 있기에 필드변수에 값을 넣어 줄 수 있게되어진다.<br />
실제로 @Setter를 지우게되면 다른 방법으로 값을 넣을 방법을 찾는다.</p>

<p><strong>&lt;Coffee 클래스의 @Setter를 지운고 @Mapper를 통해 자동으로 Build한 코드 &gt;</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Coffee</span> <span class="nf">coffeePostDtoToCoffee</span><span class="o">(</span><span class="nc">CoffeePostDto</span> <span class="n">coffeePostDtoo</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">if</span> <span class="o">(</span><span class="n">coffeePostDtoo</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
  <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="nc">Coffee</span> <span class="n">coffee</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Coffee</span><span class="o">();</span>
      <span class="k">return</span> <span class="n">coffee</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>@Setter를 지웠을 경우에 위처럼 빌드과정에서 Mapper를 통해<br />
값을 전달해주는 코드가 달라지게된다. 이렇게 되면<br />
Setter가 없기때문에 객체만 만들어져서 전달될 뿐 Dto로 전달된 값이<br />
새로운 객체로 저장되어지지 않으니 주의해야한다.</p>

<p><br /></p>

<p>마지막으로 응답을할 때 전달해준 Dto를 만들었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeeResponseDto</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">korName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">engName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>해당 클래스도 생성자와, Getter,Setter를 만들어주고<br />
Controller에서 return하여 값을 응답할 때<br />
Coffee객체를 CoffeeMapper로 맵핑하여 다시 리턴하게될 수 있게<br />
만들어준 클래스이다.</p>

<p><br /></p>

<p>이렇게 오늘 프로그램해본 내용을 정리해보자면</p>

<ol>
  <li>@Mapper 기능을 통해 핸들러메서드로 받은 값 DTO를 -&gt; Entity 객체생성 및 값을 맵핑함<br />
ex) coffeePostDto -&gt; Coffee 필드변수의 값을 저장.</li>
  <li>coffeeMapper 클래스를 통해 반환 받은 객체를 저장</li>
  <li>2번에서 반환받은 Coffee객체를 Service 로직의 활용</li>
  <li>Service 로직에서 반환 받은 객체를 coffeeMapper로 전달</li>
  <li>전달받은 coffeeMapper에서 응답에 해당하는 객체를 ResponEntity 객체와 함께 반환<br />
하여 Json 객체로 클라이언트에 전달</li>
</ol>

<hr />

<p>오늘은 이렇게 @Mapper 기능을 이용해<br />
자동으로 맵핑해주고 사용한는 방법을 배워 보았고<br />
아직까지 어색하긴하지만 대략적으로 어떻게<br />
전달되고 묶여지는지 감이 잡히기 시작하고 있다.</p>

<p>아직 DataBase가 연결이안되 이해가 안가는 부분이 사실 있지만<br />
차근차근 Step by Step으로 알아가보자</p>

<p>오늘공부는 여기서 끝!!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 간짜장, 공기밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[주말이 지나고 월요일이 왔다.]]></summary></entry><entry><title type="html">Jekyll GitHub Page 댓글, 파비콘 꾸미기</title><link href="http://localhost:4000/jekyll/2022/10/22/it-jekyll-comment&favicon.html" rel="alternate" type="text/html" title="Jekyll GitHub Page 댓글, 파비콘 꾸미기" /><published>2022-10-22T00:00:00+09:00</published><updated>2022-10-22T00:00:00+09:00</updated><id>http://localhost:4000/jekyll/2022/10/22/it-jekyll-comment&amp;favicon</id><content type="html" xml:base="http://localhost:4000/jekyll/2022/10/22/it-jekyll-comment&amp;favicon.html"><![CDATA[<h1 id="jekyll-테마-적용">Jekyll 테마 적용</h1>

<p><br /></p>

<p><img src="https://jekyllrb.com/img/octojekyll.png" alt="example image" /></p>

<p><br /></p>

<p>오늘은 Github Page를 통해 첫번째로 하는 포스팅이다.<br />
MarkDown 문법도 어색하고 모든게 서툴지만 천천히 블로그 개설 준비를 하려한다.</p>

<p>Jekyll 이란?<br />
텍스트 변환 엔진으로, 마크업 언어로 작성하면 미리 정의해놓은 규칙에따라 정적 웹사이트를 만들어준다.<br />
우리가 직접 테마를 만들 수도 있지만,, 아직 초보 개발자인 나한테 모든게 어렵게 느껴진다.<br />
그 첫걸음을 하기위해 우선 다른 개발자분들이 만들어 놓은 테마를 이용할 생각이다.</p>

<p>나는 그중에서 yat이라는 테마를 사용하기로 했다.<br />
( <a href="https://jekyll-themes.com/jekyll-theme-yat/">Jekyll yat 테마 사이트</a>, <a href="https://github.com/jeffreytse/jekyll-theme-yat">Jekyll yat 테마 제작자 github</a> )</p>

<p>현재 내가 사용하고 있는 블로그의 테마다.<br />
Jekyll관련 셋업이랑 테마를 Git Page에 적용하는 방법<br />
로컬 환경에서 작업하는법 등은 다른글을 통해 작성해 보겠다.</p>

<p><br /></p>

<h3 id="jekyll-yat-테마-utterances-댓글-기능-추가">Jekyll yat 테마 Utterances 댓글 기능 추가</h3>

<p><img src="https://ifh.cc/g/BpXV1h.png" alt="example image" /><br />
위와 같은 댓글 기능을 추가하는 방법이다.</p>

<p>위에서 다운 받은 yat 테마는 기본적으로 댓글 기능이 따로 있지는 않는다.<br />
하지만 개발자가 여러가지 기능을 사용할 수 있게 미리 개발을 해두어서 우리는<br />
그 기능을 지원하는 것만 설정하면 댓글을 사용할 수 있다.</p>

<p>Disqus comments, Gitment comments, Utterances comments<br />
이렇게 3가지 댓글 기능을 지원해주고 있고, 이중에서 나는 Utterances 코맨트<br />
기능을 사용하려한다. 아래를 쭉 따라해보자</p>

<p><br /></p>

<p><img src="https://ifh.cc/g/YV9G0L.png" alt="example image" /><br />
GitHub에 Repository를 하나 생성해야한다.<br />
이름은 아무렇게나 지어도 상관없다. 중요한점은 public로 만들어야한다.</p>

<p><br /></p>

<p><img src="https://ifh.cc/g/C0C4x3.png" alt="example image" /><br />
Repository를 만들었으면, Quick Setup화면이 보여질 텐데<br />
<span style="color:#0066CC"><strong>‘creating a new file’</strong></span>을 클릭 !</p>

<p><br /></p>

<p><img src="https://ifh.cc/g/nskSGt.png" alt="example image" /><br />
클릭을 하면 위와같은 화면을넘어오는데<br />
빨간색 박스의 내용을 그대로 입력해준다.<br />
origins의 주소에는 내가 댓글 기능을 추가할 blog를 추가하면된다.<br />
나는 내 Github Page를 추가 !</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>{
  "origins": ["https://mycatlikeschuru.github.io"]
}
</code></pre></div></div>

<p><br /></p>

<p><img src="https://ifh.cc/g/HHFBBK.png" alt="example image" /><br />
<a href="https://github.com/apps/utterances">utterances</a> 사이트를 접속해 install을 눌러 주면<br />
위와 같은 화면이 나오게되는데 Only select repositories에서<br />
아까 위에서 만들었던 Repository CommentTest를 선택해주고<br />
Rquest를 눌러 주면 완료. 이 이후에 따로 페이지가 발생하게 되는데<br />
무시해도 상관 없다.</p>

<p><br /></p>

<p><img src="https://ifh.cc/g/Cbkygc.png" alt="example image" /><br />
나는 IntelliJ를 통해서 MarkDown을 작성 중이고<br />
대부분 VScode를 이용해서 작성하는 것 같다.<br />
여하튼,, 작성 툴을 이용해 _config.yml 설정파일에서</p>

<p>utterances 항목을 찾아주면된다.<br />
아마 처음에 테마를 받으면 # 으로 주석처리가 되어있을 것이다.<br />
주석 처리를 풀어준 다음에. 오른쪽의 네모박스와 같이 입력해주면 되는데<br />
여기서 repo -&gt; 이부분만 아까 우리가 만들어준 repository로 적용하면<br />
<span style="color:#F04965">(<em>주의: utterances 밑에 repo,issue_term 등등,, 맨앞을 공백으로 해야 적용됨</em>)</span></p>

<p><br /></p>

<p><img src="https://ifh.cc/g/M2V3ps.png" alt="example image" /><br />
그렇게되면 이렇게 ! GitHub처럼 댓글을 사용할 수 있는<br />
기능이 이렇게 똭! 하고 사용이 가능합니다~<br />
주로 우리가 올리는 글 위주가 IT관련이라 GitHub로그인이 필요한<br />
utterances를 통해서 댓글 기능을 추가해보았다~</p>

<p>참고로 disqus도 적용해 보았는데 별다른 오류 없이 잘동작되었었다.</p>

<p><br /></p>

<h3 id="jekyll-yat-파비콘-추가">Jekyll yat 파비콘 추가</h3>

<p><img src="https://ifh.cc/g/pgWVFk.jpg" alt="example image" /><br />
파비콘(favicon)은 우리가 웹사이트에서 보면</p>

<p><img src="https://ifh.cc/g/xAF0Qj.png" align="left" />
<br /></p>

<p>위와 같이 웹사이트 홈페이지의 이름과 같이 나오는 사진이다.</p>

<p>yat 테마는 favicon을 적용하면 우리 블로그 왼쪽 위에<br />
프로필 사진 마냥 귀엽게 표시도되고 웹 TAB에서도 파비콘 아이콘이<br />
적용되는 모습을 볼 수 있다.</p>

<p><br /></p>

<p><img src="https://ifh.cc/g/L2lDHM.png" alt="example image" /><br />
파비콘 적용 방법은 정말 매우 간단하다.<br />
_config.yml 파일에서 favicon: ““이라고 되어있는 부분에<br />
자원 경로를 넣어주면된다. 나와 같은 경우는 assets의 images 폴더에<br />
내 파비콘 사진을 두었고 그 경로를 오른쪽과 같이 지정해서<br />
파비콘이 정상적으로 적용된 모습을 확인 할 수 있었다.</p>

<hr />

<p>오늘은 Jekyll 테마 중 yat이라는 테마를 커스터 마이징하는<br />
글을 올려 보았다. 기존에 Tistory를 이용할 때는<br />
그냥 이미지와 글,코드 올리는 것들이 간단했는데<br />
아무래도 Markdown언어로 작성하다보니 확실히 시간소요가 더 되는 것 같다.<br />
그래도 앞으로 사용하다보면 빨라질거라 생각하며 첫 포스팅을 마친다. 😃</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Jekyll" /><category term="Jekyll" /><category term="yat" /><category term="테마적용" /><category term="GitHub Pages" /><summary type="html"><![CDATA[Jekyll 테마 적용]]></summary></entry><entry><title type="html">TIL) Spring DTO</title><link href="http://localhost:4000/til/2022/10/21/til.html" rel="alternate" type="text/html" title="TIL) Spring DTO" /><published>2022-10-21T00:00:00+09:00</published><updated>2022-10-21T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/21/til</id><content type="html" xml:base="http://localhost:4000/til/2022/10/21/til.html"><![CDATA[<p>section 3가 시간한 첫번째 금요일</p>

<p><img src="https://ifh.cc/g/lfoBC7.gif" align="left" width="350px" height="250px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>나태해지는 요일이랄까..?<br />
주말에 공부는할건데 금요일이되면 그냥 설렌다<br />
오늘은 예전부터 미뤄왔던 Github IO 블로그를 꾸미고있다…<br />
아직 너무나 생소해 조금 시간이 걸릴 것 같다.<br />
IT기술 블로그와 옛날부터 해온 여행블로그를 전부 옮기고 싶다.</p>

<hr />

<p>오늘은 DTO에 대해서 공부했다.<br />
유효성 검증과 같이 공부한걸 적어보려한다.</p>

<h3 id="dto"><strong>DTO</strong></h3>
<p>Data Transfer Object의 약자로 <br />
애플리케이션 아키텍처 패턴의 하나이다.</p>

<pre><code class="language-Java">@PostMapping
public ResponseEntity postMember(@RequestParam("age") int age,
                                 @RequestParam("name") String name,
                                 @RequestParam("sex") String sex) {
     .
     .
     .
	return ..
 }
</code></pre>

<p>간단하게 위의 내용을 살펴보자<br />
어제 배웠던 것을 생각해보면 우리는 @PostMapping을 통해<br />
@RequestParam의 키로 값을 가져온다.<br />
즉 POST 로 자원 요청시 키와 Value값을 보내게 되는데<br />
그 값으로 우리가 사용할 수 있고, 서버에 저장도 하는 것이다.<br />
현재는 3가지(나이,이름,성별)에 대해서 받아오지만<br />
나중에 학교,전화번호 등등 여러가지 데이터가 많이 추가된다고 가정하면<br />
Controller 클래스의 너무나 많은 RequsetParam을 사용해야한다.<br />
그래서 나오게 된 것이 DTO 기술이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">postMember</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">MemberDto</span> <span class="n">memberDto</span><span class="o">)</span> <span class="o">{</span>
     <span class="o">.</span>
     <span class="o">.</span>
     <span class="o">.</span>
    <span class="k">return</span> <span class="o">..</span>
<span class="o">}</span>
</code></pre></div></div>

<p>우선 위에서 사용한 @RequsetParam -&gt; @RequestBody로 변경한다.<br />
그리고 MemberDto라는 클래스를 만들어 매개변수로 받아준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberDto</span> <span class="o">{</span>
 
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nc">Name</span><span class="o">;</span>
   
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">sex</span><span class="o">;</span>
    
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 될 경우에. 클라이언트 측에서 Json 형식으로 URI와 함께 요청을 한다면<br />
Json의 있는 키값들이 MemberDto의 필드변수에 할당되어진다.</p>

<p>*로컬환경에서 Postman으로 요청한다고 가정<br />
POST http://localhost:8080/api/member<br />
raw Json</p>

<p>{<br />
“age” : 22,<br />
“Name” : “Lee”,<br />
“sex” : “male”<br />
}</p>

<p>실제로 Json 형식으로 요청시 MemberDto 클래스의<br />
age, Name, sex의 값이 22, Lee, male 이렇게<br />
들어가는 것을 확인 할 수 있다.<br />
확인 하는 방법은 getter를 메서드를 이용해 확인이 가능하다</p>

<p><br /></p>

<p><strong>유효성 검증</strong><br />
그렇다면? 위의 Json객체로 보낼때 데이터를 이상하게 보내거나<br />
안보내면 어떻게 되는 것인가?<br />
예를들어 아래와 같이 입력했다고 가정하자<br />
String타입의 sex를 입력하지 않고 요청을 보냈을 경우</p>

<p><strong>case 1) String 타입을 안넣었을 경우</strong></p>

<p>{<br />
“age” : “22”,<br />
“Name” : “Lee”<br />
}</p>

<p>age = 22<br />
Name = Lee<br />
sex = null<br />
이렇게 값이 매칭된다. 즉, String타입은 값이 없을 때 null로 받는다</p>

<p><strong>case 2) int 타입을 안넣었을 경우</strong></p>

<p>{<br />
“name”: “Lee”,<br />
“sex”: “male”<br />
}</p>

<p>age = 0<br />
Name = Lee<br />
sex = male<br />
이렇게 결과값이 나왔다. int타입은 0으로 받는 것 같다.</p>

<p><strong>case 3) Integer 타입을 안넣었을 경우</strong><br />
만약에 위에 처럼 Json 객체 요청시<br />
age가 private Integer age; 라고 가정하였을 경우에는<br />
500번 Internal Server Error가 발생하고<br />
Spring 애플리케이션에서는 NullPointerException이 발생한다<br />
무언가 타입에 따라 값이 있어도되고 없어도되는 무언가가 있는 것 같은데</p>

<p>원시자료형과 참조자료형의 차이인지… <br />
조금더 심도있는 공부가 필요해보인다..<br />
우선은 위에 요청이 들어왔을때 기준으로 한번 가볍게 알아보았고<br />
이제 유효성 검증을 통해 원하는 데이터가 들어오지 않을 경우<br />
코드를 실행시키지 않을 수 있다.</p>

<p>1). 우선 위에 예제 코드에서 @Vaild를 Dto 매개변수 앞에 달아주고</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">postMember</span><span class="o">(</span><span class="nd">@Vaild</span> <span class="nd">@RequestBody</span> <span class="nc">MemberDto</span> <span class="n">memberDto</span><span class="o">)</span> <span class="o">{</span>
     <span class="o">.</span>
     <span class="o">.</span>
     <span class="o">.</span>
    <span class="k">return</span> <span class="o">..</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
2). Dto 클래스의 원하는 유효성 검증 애노테이션으로 조건을 설정한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberDto</span> <span class="o">{</span>
    <span class="nd">@Min</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span>
    <span class="nd">@Max</span><span class="o">(</span><span class="mi">50000</span><span class="o">)</span> <span class="c1">// 100~50000사이에만 price 유혀성 검사 통과</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
    
    <span class="nd">@Pattern</span><span class="o">(</span><span class="n">regexp</span> <span class="o">=</span> <span class="s">"^([A-Za-z])(\\s?[A-Za-z])*$"</span><span class="o">,</span>
            <span class="n">message</span> <span class="o">=</span> <span class="s">"글자사이의 공백이 1개가 초과하거나 ,알파벳이 아닌 글자가 들어왔습니다"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="nc">Name</span><span class="o">;</span>
    
    <span class="nd">@NotBlank</span> <span class="c1">// 공백만으로 구성되있지 않아야한다.</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">sex</span><span class="o">;</span>
    
<span class="o">}</span>
</code></pre></div></div>
<p>@Vaild<br />
-&gt; 유효성 검증을 적용해주는 애노테이션<br />
DTO 앞에 @Vaild를 붙여 클래스를 유효성 검증해줌 만약 유효성검증에 실패하면 요청은 거부(reject)된다.</p>

<p>implementation ‘org.springframework.boot:spring-boot-starter-validation’<br />
-&gt; 그레이들 의존성주입</p>

<p>@Validated<br />
-&gt; @Vaild와 같이 유효성 검증하도록 해줌. 하지만 위치가 서로다름<br />
-&gt; @Valid는 DTO 필드에서 검사하는데, @Valdated는 맵핑 매서드 매개변수에다 쓴다<br />
ex) @PatchMapping(“/{coffee-id}”) public ResponseEntity patchCoffee(@PathVariable(“coffee-id”)</p>

<p>@Min(1) long coffeeId) -&gt; @Min을 사용하는 예제.</p>

<p><em>문자열관련</em><br />
-&gt; @NotBlank : null, 공백, 스페이스 값 모두 허용하지 않음<br />
-&gt; @NotSpace : 공백을 허용하지 않음<br />
-&gt; @NotNull : null을 허용하지 않음<br />
-&gt; @Null : Null만 가능<br />
-&gt; @Size(min=1, max=3) : 문자열의 최소 길이, 최대 길이 제한</p>

<p><em>숫자를 다룰때</em><br />
-&gt; @Min(1) : 값이 최소 1이상이어야하는 유효성 검사 통과<br />
-&gt; @Max(500) : 값이 최대 500이하로 값이 와야 유효성 검사 통과<br />
-&gt; @Range(min=1, max=500) : 범위안에 값이 오면 유효성 검사 통과<br />
-&gt; @Positive : 양수만 허용<br />
-&gt; @PositiveOrZero : 양수와 0만 허용<br />
-&gt; @Negative : 음수만 허용<br />
-&gt; @NegativeOrZero : 음수와 0만 허용</p>

<p><em>정규식 관련</em><br />
-&gt;@Email: 이메일 정보가 비어있는지 검증<br />
-&gt;@Pattern: 특정 패턴을 정규식으로 표현 (@Pattern(regex = “^010-\\d{3,4}-\\d{4}$”)</p>

<hr />

<p>오늘은 DTO의 쓰임새와<br />
유효성 검증에 대한 프로그램을 간단하게 알아보았다.<br />
그 중에서도 특히 Pattern의 정규식관련된 부분은<br />
앞으로 지속적인 학습이 필요해보인다. 아직은 생소해서<br />
어떻게 검사가되는지 각 해당하는 특수문자의 내용을 이해할 수 있도록<br />
주말에 공부해보려한다</p>

<p>오늘 공부는 끝!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 오징어 덮밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[section 3가 시간한 첫번째 금요일]]></summary></entry><entry><title type="html">TIL) Spring MVC Controller 계층</title><link href="http://localhost:4000/til/2022/10/20/til.html" rel="alternate" type="text/html" title="TIL) Spring MVC Controller 계층" /><published>2022-10-20T00:00:00+09:00</published><updated>2022-10-20T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/20/til</id><content type="html" xml:base="http://localhost:4000/til/2022/10/20/til.html"><![CDATA[<p>오랜만에 깊은 숙면을 했다.</p>

<p><img src="https://ifh.cc/g/j3W1OJ.jpg" align="left" width="300px" height="300px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>섹션2가 끝나고 섹션3이 시작되는 날이다.<br />
드디어 Spring에 대한 여러 공부들이 이루어질 것 같다.<br />
Spring MVC에 대해 주로 공부할 것 같다<br />
오늘도 열심히 달려보자 !</p>

<hr />

<h2 id="spring-mvc"><strong>Spring MVC</strong></h2>

<p>Spring Web MVC를 줄요서 Spring MVC라고 부른다.<br />
MVC는 Model, View, Controller의 약자들이고<br />
클라이언트의 요청을 편리하게 처리해주는 프레임워크들이다.<br />
우리가 이제부터 만들게 될 샘플 애플리케이션은<br />
Spring MVC가 제공해주는 기능을 이용해서 만들기 때문에 중요한 시간이라고 볼 수 있다.</p>

<p><strong>Model</strong> : 작업의 처리 결과 데이터<br />
<strong>View</strong> : Model 데이터를 이용해 웹브라우저 같은 클라이언트 애플리케이션의<br />
화면의 보여지는 리소스를 제공하는 역할</p>

<p><strong>Controller</strong> : 클라이언트 측의 요청을 직접적으로 전달 받는 엔드포인트로써<br />
Model과 View의 중간에서 상호작용을 해주는 역할</p>

<p><img src="https://ifh.cc/g/z1godo.jpg" alt="example image" /></p>

<p>아래는 이전에 공부했던 계층형 아키텍처이다.<br />
여기서 API계층을 Spring MVC 기반의 코드로 구현해보자</p>

<p><img src="https://ifh.cc/g/WcnZXw.jpg" alt="example image" /></p>

<p><strong>패키지 구조</strong></p>

<p>1).기능 기반 패키지 구조<br />
   -. 하나의 기능을 완성하기 위한 계층별 클래스들을 모아놓는 구조</p>

<p><img src="https://ifh.cc/g/fvyThO.png" align="left" width="300px" height="200px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>2). 계층 기반 패키지 구조<br />
   -. 패키지를 하나의 계층으로 보고 클래스들을 계층별로 묶어서 관리하는 구조</p>

<p><img src="https://ifh.cc/g/HXg2bo.png" alt="example image" /></p>

<p>Controller 관련 부분을 배워보자<br />
현재 Postman을 통해 API를 요청중이다.</p>

<p><img src="https://ifh.cc/g/X2Ql9J.jpg" alt="example image" /></p>

<p>status : 404<br />
Not Found 에러가 리턴되었는데<br />
클라이언트의 요청을 처리할 핸들러 메서드가 아지 없기 때문이다.<br />
간단하게 여러 애노테이션을 알아보고 사용해보자</p>

<p><strong>핸들러 메서드(Handler Method)</strong><br />
@RestController<br />
-&gt; 클래스에 추가함으로써 해당 클래스를 REST API의 리소스를 <br />
처리하기 위한 API 엔드포인트로 동작하게 해준다</p>

<p>@RequestMapping<br />
-&gt; Controller 클래스 레벨에 추가하여 클래스 전체에 사용되는 공통 Base URL을 설정할 수 있다.<br />
-&gt; 방식을 명시하지 않을 경우, GET,POST사용</p>

<p>@GetMapping<br />
-&gt; 조회 맵핑<br />
-&gt; {} 동적으로 바뀌는 값이되어짐</p>

<p>@PostMapping<br />
-&gt; 쓰기 맵핑<br />
-&gt; {} 동적으로 바뀌는 값이되어짐</p>

<p>@PathVariable<br />
-&gt; 클라이언트 요청 URI에 패턴 형식으로 지정된 변수값을 파라미터로 전달받는다<br />
-&gt; GetMapping의 괄호안에 문자열과 동일해야한다.<br />
만약 다를경우 MissingPathVaribleException을 발생한다.</p>

<p>@RequestParam<br />
-&gt; 주로 클라이언트 쪽에서 전송하는 요청 데이터를 쿼리 파라미터(Query Parmeter 또는 Query String), <br />
폼 데이터(form-data), x-www-form-urlencoded 형식으로 전송하면 <br />
이를 서버 쪽에서 전달 받을 때 사용하는 애너테이션입니다.</p>

<p><strong>ResponseEntity</strong></p>

<p>ResponseEntity 타입의 객체로 map과 HTTP상태를 보냄<br />
-&gt; Map&lt;String,String&gt; map = new HashMap&lt;&gt;(); 데이터를 담은 map<br />
-&gt; HTTP상태, CREATE, OK 등등…<br />
-&gt; Handler Method를 통해 ReponseEntity객체를 반환하면 ResponseBody로 전달됨</p>

<p>HttpStatus<br />
Eunm<HttpStatus>로 구성되어져있음.  
HTTP 상태를 나타내는 여러 상수들이 있음  
물론 더 있지만 우선 오늘 사용해본것들 위주로 예제프로그램을 작성해보자  
기존에 값이 저장되어있는 Map에 데이터를 수정하는 프로그램이다.</HttpStatus></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v1/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="kt">long</span> <span class="n">memberId</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"memberId"</span><span class="o">,</span> <span class="n">memberId</span><span class="o">);</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"email"</span><span class="o">,</span> <span class="s">"dhfif718@naver.com"</span><span class="o">);</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="s">"이재혁"</span><span class="o">);</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"phone"</span><span class="o">,</span> <span class="s">"010-1111-5555"</span><span class="o">);</span>
        <span class="n">members</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">memberId</span><span class="o">,</span> <span class="n">member1</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/phone/{memberId}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">changeCoffees</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"memberId"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">memberId</span><span class="o">,</span>
                                        <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">"phone"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>

        <span class="c1">//저장되어있는 객체 조회</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">chagnePhoneNumber</span> <span class="o">=</span> <span class="n">members</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--&gt;Phone 번호 변경 로직 실행됨"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"변경전 : "</span> <span class="o">+</span> <span class="n">members</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">memberId</span><span class="o">));</span>

        <span class="c1">//해당 members 맵에 회원 id가 없을 경우 BAD_REQUSET 반환</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">members</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">memberId</span><span class="o">)</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"해당 memberId에 데이터가 존재하지 않습니다"</span><span class="o">);</span>
            <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">BAD_REQUEST</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">//핸드폰 번호 변경 로직</span>
        <span class="c1">//얕은 복사로 같은 객체를 변경하는 것이기 때문에 members.put을 따로 해줄 필요는 없다.</span>
        <span class="n">chagnePhoneNumber</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"phone"</span><span class="o">,</span> <span class="n">phone</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"변경후 : "</span> <span class="o">+</span> <span class="n">chagnePhoneNumber</span><span class="o">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="n">chagnePhoneNumber</span><span class="o">,</span> <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>POST에 해당하는 핸들러 메서드를 만들었다.<br />
Postman을 통해 요청을 보냈더니<br />
ResponseEntity를 통해 객체와 상태를 리턴해주었다.</p>

<p><br /></p>

<p><img src="https://ifh.cc/g/GgtVZa.jpg" alt="example image" /></p>

<p>API 요청시 인텔리제이의 System.out 프린트로 출력된 로그</p>

<p>–&gt;Phone 번호 변경 로직 실행됨<br />
변경전 : {phone=010-1111-5555, name=이재혁, email=dhfif718@naver.com, memberId=1}<br />
변경후 : {phone=010-1111-6777, name=이재혁, email=dhfif718@naver.com, memberId=1}</p>

<hr />

<p>오늘은 정리가 조금 부실하다…<br />
실습하기 바쁘기도했고, 오늘 저녁에<br />
백엔드 현업개발자 친구를 만나 여러가지 얘기도나누고<br />
공부방향이 잘되고있는 건지 등<br />
여러 잡담을 나누다보니 집에 11시에 도착해버렸다…<br />
부랴부랴 오늘 학습한 내용을 정리하는데,, 머릿속이 텅…<br />
비어버려서 내일학습에 지장이 생기면안될 것 같아.<br />
우선 간단하게만 정리하고 마무리해보려한다.<br />
주말을 이용해 인프런강의와 오늘 배운 여러지식들을 다시 공부해봐야겠다.</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 오징어 덮밥, 계란 부침</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[오랜만에 깊은 숙면을 했다.]]></summary></entry><entry><title type="html">TIL) 두달차 회고</title><link href="http://localhost:4000/til/2022/10/19/til.html" rel="alternate" type="text/html" title="TIL) 두달차 회고" /><published>2022-10-19T00:00:00+09:00</published><updated>2022-10-19T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/19/til</id><content type="html" xml:base="http://localhost:4000/til/2022/10/19/til.html"><![CDATA[<p>학습의 학습 또 학습..<br />
매일매일 새로운 것들이 머릿속을 가득채우고있다.</p>

<p>그래서 그런지 시간이 엄청 빨리가는 느낌이다.<br />
<img src="https://ifh.cc/g/9pvkkd.gif" align="left" width="350px" height="200px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>늘 생각한다 개발을 좀더 일찍 시작할껄..하는<br />
아쉬움이 조금씩 남아있다.<br />
한편으론 지금이라도 시작해서 다행인 것 같기도하고..</p>

<p>코드스테이츠 부트캠프를 시작한지<br />
벌써 두달이나 지났다.<br />
학습에 불만족스러운 부분은 없는 것 같다.<br />
방치형이라든가 콘텐츠가 불친절하다든가.. 여러 얘기들이 있지만</p>

<p>내가 가지고온 기준은 부트캠프를 통해서<br />
학습의 방향을 정하고, 내 스스로 학습의지를 높일 수 있도록 하려는 목표가 강했기 때문에<br />
지금 학습법에 상당한 만족감을 느끼고 있다.</p>

<hr />

<h2 id="회고"><strong>회고</strong></h2>

<h4 id="두달차의-나는"><strong>두달차의 나는?</strong></h4>

<p>첫달차에는 아무래도 Java라는 언어에 대해 친숙하지 않다보니까<br />
Java 문법과 기초적인 컴퓨터 CS지식에 대해 공부했다면</p>

<p>두달차에는 하루에한번씩 알고리즘 풀이를 통한<br />
언어의 친숙함과 문제해결 능력을 길르고<br />
알고리즘의 관한 살짝 깊은내용들 (재귀,자료구조,Greedy, 순열 … 등)에 대한<br />
문제 풀이와 공부 그리고 본격적으로 세달차에 다루게될 Spring에 대한<br />
아주 기초적인 지식과 찍먹을 해보았다.</p>

<p>그래도 지속적인 학습을 통해<br />
어느정도 Java문법 사용에 있어서는 익숙해진 것 같다.<br />
하지만 알고리즘은 당혹 그 자체였다.</p>

<p><img src="https://ifh.cc/g/GNSW2H.jpg" align="left" width="300px" height="250px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>마치 위가 안보이는 벽을 두드리는 심정이었다.</p>

<p>재귀, 탐욕알고리즘, 가지각색의 탐색 알고리즘…<br />
이 것들은 내 머리를 쥐어짜는 것도 모잘라 너무 혼란스럽게 했다.<br />
이런 혼란스러움 마음을 가지고 스프링 기초 학습을 진행하니<br />
집중도도 떨어지고 어려운 벽에 부딪히니 약간의 그로기상태가 온 것 같다.<br />
내가 궁극적을 원하는 목표를 달리기위해 다시 재정비를 해보려고 한다.</p>

<p><br /></p>

<h4 id="재정비"><strong>재정비</strong></h4>

<p>내가 부트캠프를 시작했던 가장 큰 목표는 사실 ‘취업’이라고 말할 수 있다.
근데 그 이전에 취업을 하기위한 조건?을 만들기위해<br />
코드스테이츠 백엔드 코스에 합류한 것이고, 그 조건을 만들기위해선<br />
절대적으론 프로그래밍 실력을 향상시키는 것에 있다고 생각한다.</p>

<p>즉 내가 원하는 목표를 도달하기위해선<br />
컴퓨터에 대한 이해와 프로그래밍 실력을 늘리는 것이다.<br />
내가 학습에 집중하고 문제풀이에 유연해질 수 있도록 재정비하는<br />
시간을 가지는게 중요한 것 같다.</p>

<p>내가 이루고자하는 ‘프로그램을 잘하는 것’은 사실상 신입인 내게<br />
무리한 요구이며, 그렇게 되는것도 터무니없는 요청이다.<br />
나는 취업이라는 전략에 맞게 그에 해당하는 실력을 우선적으로 만들고<br />
계속발전해나가야한다는 필요성을 느꼈다.<br />
그렇게 하기위해선 현재 하루 공부 템포를 조절하는 것, 마인드 관리하는 것<br />
등 효과적인 공부 방법을 강구해볼 필요가 있는 것 같다.</p>

<p>지금 나의 공부 계획중 가져가는 것과 문제되는 것을 파악해 정리해보자</p>

<p><br /></p>

<h4 id="keep--problem"><strong>Keep , Problem</strong></h4>

<p>첫달차에서 정한 나만의 룰 4가지가 있었다.</p>
<ol>
  <li>매일매일 Commit 하기</li>
  <li>알고리즘 하루 1회 풀기</li>
  <li>블로그 TIL 포스팅하기</li>
  <li>운동 꾸준히나가기</li>
</ol>

<p>학습량이 늘어남에따라 위에 4가지를 전부 지키기에는 시간적 정신적<br />
부담감이 강하다는걸 느끼고 있었다.<br />
2달간 매일 실천하면서 가장 압박이 심했던 것은 알고리즘이다.<br />
알고리즘 학습 스프링 학습을 하는데 물론 하루만에 이해가 안될 뿐더러<br />
공부하다보면 어느새 10시가 넘어버린다..</p>

<p>그 상황에서 백준알고리즘을 풀고 운동을나가거나, 포스팅까지 하려고하면<br />
새벽이 넘어야만 잠을 청할 수 있다. 이렇게 몇일 반복되다보니<br />
압박감을 느끼게되었고, 개선할 필요가 있다고 느꼈다.</p>

<ol>
  <li>
    <p>하루에 한번씩 Commit하기<br />
-&gt; 크게 압박을 느끼는 것은 없고, 내가 공부한 내용을 커밋하는 것이기때문에<br />
계속 유지해서 할 생각이다.</p>
  </li>
  <li>
    <p>알고리즘 하루 1회 풀기<br />
-&gt; 학습량에 따라 조절이 필요할 것 같다.<br />
목표는 1개를 푸는것으로 두는것으로하고, 반드시 지키려는 압박은 버리려고한다.<br />
그날 학습에 대한 이해가 충분하다고 판단되어질때 알고리즘 공부를 하려한다.<br />
하지만 스프링 학습이 어느정도 이루어지고 프로젝트 진행할때 라든가<br />
4개월차 이후에는 필수적으로 알고리즘을 깊이 공부하는 시간을 주기적으로 가져야할 것 같다고<br />
판단되고 그렇게 할 생각이다.</p>
  </li>
  <li>
    <p>블로그 TIL 포스팅하기<br />
-&gt; 포스팅에 대한 시간 투자는 많이 하는편이긴한데, 정리하면서 내가 배운 것들을 점검하고<br />
글로만 보던 것을 예제로 만들고 적으려고하니 더블체크도 하는 좋은 순기능 같아<br />
계속 유지할 생각이다.</p>
  </li>
  <li>
    <p>운동 꾸준히나가기<br />
-&gt; 운동을 1시간 정도 나갔다가 돌아와서 공부를 하고있는데<br />
최근에 알고리즘,스프링 학습하면서 그 시간도 아깝다는 생각이 들었다.<br />
목적은 리프레쉬하거나 머리를 식히고 공부의 집중도를 늘리기위한 목적이었는데<br />
그 목적을 이루어지지 않는 느낌이라 그시간 동안 공부에 집중할 수 있는 대채제를<br />
찾는게 좋을 것 같다. 휴식을 취하면 확실히 공부의욕이 생겨서<br />
당분간은 30분 휴식후 공부를 다시시작하는 방식으로 변경하려한다.</p>
  </li>
</ol>

<p><br /></p>

<p>당분간 학습루틴을 이렇게 변경 해보았다.<br />
1,3번은 하루에 한번씩 필수<br />
2,4번은 학습량에 따른 선택적 실행<br />
어떻게 보면 게을러진 것 같은 생각이들어 4가지를 다 무조건 지키려고했지만<br />
좋은 학습은 온전히 내가 집중하는 것에서 부터 발휘되는 것 같아서<br />
조금은 변경적용해 너프하게 압박을 덜 느끼면서 공부해보려한다.</p>

<p>학습에 가장 큰 방해 요소들도 존재한다.<br />
<img src="https://ifh.cc/g/6oZ6XV.jpg" align="left" width="450px" height="250px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>대부분 비슷하다고 생각이든다ㅎㅎ….<br />
의지박약일까? 작심삼일일까… 나란사람은 왜이렇게 나태할까 ㅋㅋㅋㅋ<br />
유튜브를 한번보면 머리 텅빈채로 보다보니 계속 보게되고<br />
수업 집중도가 확 떨어지는걸 느낄 수 있었다.</p>

<p>그래서 수업중에는 왠만하면 핸드폰을 키지 않는다.<br />
그 순간 해야될 것들은 전부 이해하기전까지는 딴짓을 안하려고 노력중이다.</p>

<p>가장 좋은 해결책은 Java 프로그램을 하는 것 자체를<br />
게임과 같은 기분으로 하는게 모든 집중요소를 해결할 수 있는 비책인 것 같다.<br />
한동안 알고리즘 간단한 문제풀때는 그런느낌이 들었었다…<br />
너무 재밌어서 쉴때도 문제 하나씩풀고 유튜브보다가도 옆에 노트북놓고 풀고..<br />
하지만 벽을느끼고 사그라들었지만…</p>

<p><br /></p>

<h4 id="그래도-해야지-"><strong>그래도 해야지 !</strong></h4>

<p>내가 선택한길이고 정말 잘하고 싶기도하고<br />
앞으로 프로그램을하면서 밥벌어먹고 싶기 때문에<br />
이왕 발을 담궜으니 최대한 노력할 수 있는 만큼해보고<br />
다른 유혹에 빠지지 않고 집중해서 공부해보자!!</p>

<p>마지막으로 정리해보자면</p>
<ol>
  <li>
    <p>학습에 집중하기
-&gt; 학습에 대한 압박, 기타 유흥거리에 대한 유혹 등을 이겨내고<br />
온전히 배우고 있는 것을 흡수해 적용할 수 있게 집중하기.</p>
  </li>
  <li>
    <p>프로그램 실력 늘리기<br />
-&gt; 알고리즘 공부 열심히하기 , 단 현재 학습단계에선 조절이 필요. <br />
이렇게 우선순위를 정해 공부할 수 있도록 방향을 조정해봐야겠다!</p>
  </li>
</ol>

<p><br /></p>

<p>2개월째 공부를하고 있고<br />
4개월을 더 공부해야한다. 터무니없이 부족한 시간인 것도 맞고<br />
내가 열심히 공부해 수료를 마치더라도 취업에 성공할 수 있을지도 불확실하다</p>

<p><img src="https://ifh.cc/g/0v9YZK.jpg" align="left" width="280px" height="300px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>그래도 한번 크게먹은 마음인 만큼<br />
도전에 대한 후회는 남지 않도록 회고를 쓰면서<br />
다시한번 마음을 다잡아본다.</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[학습의 학습 또 학습.. 매일매일 새로운 것들이 머릿속을 가득채우고있다.]]></summary></entry><entry><title type="html">TIL) Spring AOP 2</title><link href="http://localhost:4000/til/2022/10/18/til.html" rel="alternate" type="text/html" title="TIL) Spring AOP 2" /><published>2022-10-18T00:00:00+09:00</published><updated>2022-10-18T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/10/18/til</id><content type="html" xml:base="http://localhost:4000/til/2022/10/18/til.html"><![CDATA[<p>올해 처음으로 늦잠을 자 지각을 해버렸다..</p>

<p><img src="https://ifh.cc/g/VL0aYH.gif" align="left" width="350px" height="250px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>해야할 일이 있거나 약속이 있으면 무조건<br />
늦잠을 안자고 번뜩일어나는데<br />
오늘은 알람소리를 못들었다…..<br />
수면패턴이 조금 바뀌어서 그런가 싶기도하고</p>

<p>구내염도 난 것 보면<br />
스트레스관리와 수면관리좀 해야할 것 같다.</p>

<hr />

<p>어제는 AOP의 간단한 용어들과\<br />
Advice의 타입별 사용방법을 알아보았었다.<br />
오늘은 Pointcut 표현식과 JoinPoint 특징과</p>

<p>자바코드로 예제를 직접짜보고 Spring 적용 변경해보는<br />
실습을 혼자만들어서 해보자!</p>

<p><br /></p>

<h3 id="pointcut-표현식"><strong>Pointcut 표현식</strong></h3>

<p>Pointcut은 어제 알아보았듯이<br />
우리가 JoinPoint에서 어느 부분을 쓸지 정해주는 부분이다<br />
AspectJ 이용해 우리는 표현식을 사용할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.*</span><span class="o">;</span>
</code></pre></div></div>

<p>어제 보았던 예제를 보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(* com.aop.section2aopcalculate..*(..))"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">AroundLog</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span><span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--&gt; Aspect 실행 : "</span> <span class="o">+</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
    <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--&gt; Aspect 종료 : "</span> <span class="o">+</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">getSignature</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Adivce 타입은 @Around이고</p>

<p>Pointcut 부분은 (“execution(* com.aop.section2aopcalculate..*(..))”)에<br />
해당한다. 첫번째는 <strong>‘포인트컷 지시자(PCD)’</strong> 이고 뒤에는 내 패키지내 경로이다.</p>

<p>execution : 포인트컷 지시자<br />
com.aop.section2aopcalculate..*(..) : 패키지 경로, 클래스 메서드 명</p>

<p>주로 execution을 가장 많이 사용한다.</p>

<table>
  <thead>
    <tr>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>execution</td>
      <td>메서드 실행 JoinPoint를 매칭한다.</td>
    </tr>
    <tr>
      <td>within</td>
      <td>특정 타입 내의 JoinPotin를 매칭한다.</td>
    </tr>
    <tr>
      <td>args</td>
      <td>인자가 주어진 타입의 인스턴스인 JoinPoint</td>
    </tr>
    <tr>
      <td>this</td>
      <td>Spring Bean을 대상으로 하는 JoinPoint</td>
    </tr>
    <tr>
      <td>target</td>
      <td>Target 객체를 대상으로 하는 JoinPoint</td>
    </tr>
    <tr>
      <td>bean</td>
      <td>Spring 전용 PCD이고 Bean의 이름으로 Pointcut을 지정한다.</td>
    </tr>
  </tbody>
</table>

<p>**&amp;&amp;, || , ! 같은 표현식**을 사용해 결합할 수 도 있다.<br />
어제 예제를 가져와서 아래와 같은 경로에 있다고 가정하자.<br />
<img src="https://ifh.cc/g/oD90th.png" align="left" width="650px" height="300px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>NewCalculate라는 클래스는<br />
com.aop.section2aopcalculate.calculate 패키지 안에 경로가 지정되어있다.</p>

<p>예를 들어 하나의 클래스의 메서드만 동작시키고 싶을 경우 (우린 add메서드를 가정하자)<br />
아래와 가은 방식으로 표현할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span><span class="s">"execution(* com.aop.section2aopcalculate.calculate.NewCalculate.add(..))"</span><span class="o">)</span>
</code></pre></div></div>

<p>여기서 결합식을 사용해 우리가 add메서드와 sub메서드를 둘다 실행시킬 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">(</span><span class="s">"execution(* com.aop.section2aopcalculate.calculate.NewCalculate.add(..)) || execution(* com.aop.section2aopcalculate.calculate.NewCalculate.sub(..))"</span><span class="o">)</span>
</code></pre></div></div>

<p>|| 표현식으로 결합식을 사용하면 add,sub 메서드가 둘다 지정되어<br />
실행되는 모습을 볼 수 있다.</p>

<p><br /></p>

<h3 id="joinpoint"><strong>JoinPoint</strong></h3>

<p>JoinPoint는 우리가 포인트컷으로 지정한 곳이고<br />
추상적인 개념으로 AOP를 적용할 수 있는 지점을 의미한다.</p>

<ol>
  <li>Advice가 적용될 수 있는 위치, 메소드 실행, 생성자 호출, 필드값 접근 같은 프로그램 실행 중 지점을 나타낸다.</li>
  <li>AspectJ를 사용해서 컴파일 시점과 클래스 로딩 시점에 적용하는AOP는 바이트코드를 실제 조작하기 때문에 해당 기능을 모든 지점에 다 적용할 수 있다.</li>
  <li>프록시 방식을 사용하는 Spring AOP는 메서드 실행 지점에만 AOP 적용이 가능하다.</li>
  <li>프록시는 메서드 오러라이딩 개념으로 동작한다.</li>
  <li>프록시를 사용하는 Spring AOP의 JoinPoint는 메서드 실행으로 제한된다.</li>
</ol>

<p><em><strong>JoinPoint 인터페이스 기능</strong></em><br />
.getArgs() : 전달된 인자를 배열로 반환한다.<br />
.getThis() : AOP 프록시 객체를 반환한다.<br />
.getTarget() : AOP가 적용된 대상 객체를 반환한다. (비지니스 메소드를 포함하는 객체반환)<br />
.toString() : 방법에 대한 유용한 설명을 인쇄한다.<br />
.getSignature() : 메서드에 대한 설명을 반환한다. <br />
-&gt; getSignature().getName() : 호출한 메서드의 이름을 반환한다. (String)<br />
-&gt; getSignature().toLongString() : 호출한 메서드의 리턴타입, 이름, 매개변수를 패키지 경로까지 포함해서 반환한다. (String)<br />
-&gt; getSignature().toShoryString() : 호출한 메서드 시그니처를 축약한 문자열로 반환한다. (String)</p>

<p><em><strong>ProceedingJoinPoint 인터페이스 기능</strong></em><br />
.proceed() : 다음 어드바이스나 타겟을 호출한다.</p>

<p><br /></p>

<h3 id="java-코드로-aop-작성해보기"><strong>Java 코드로 AOP 작성해보기</strong></h3>
<p>조금 더 AOP에 대해 심도있게 이해해보기 위해서<br />
셀프과제를 만들었다.</p>

<ol>
  <li>Java 코드로 AOP를 작성해보는 시간을 가져보았다.</li>
  <li>공통 관심 사항을 메서드 실행 시간 측정으로 두었고</li>
  <li>핵심 로직은 점수 합산과 평균을 구하는 것으로 지정했다.</li>
  <li>메서드 실행시 AOP가 동작하는지 확인</li>
</ol>

<p><img src="https://ifh.cc/g/t3Ym8R.png" align="left" width="300" height="150px" />
<br /><br /><br /><br /><br /><br /><br /></p>

<p>총 4개의 Class를 만들어 테스트를 해보았다.</p>

<p><strong>&lt;Exam.interface / 메서드 인터페이스 추상화&gt;</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Exam</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">total</span><span class="o">();</span>
    <span class="kt">float</span> <span class="nf">avg</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Score.class에서 구현하게 추상화를 해둔 Interface<br />
가장 큰 이유는 아래에 Aop.class에서<br />
Proxy.newProxyInstance의 매개변수로 인터페이스를 사용해야하기 때문</p>

<p><strong>&lt;Score.class / 핵심 로직(합산,평균)&gt;</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Score</span> <span class="kd">implements</span> <span class="nc">Exam</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">kor</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">eng</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">math</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">com</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Score</span><span class="o">(</span><span class="kt">int</span> <span class="n">kor</span><span class="o">,</span> <span class="kt">int</span> <span class="n">eng</span><span class="o">,</span> <span class="kt">int</span> <span class="n">math</span><span class="o">,</span> <span class="kt">int</span> <span class="n">com</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">kor</span> <span class="o">=</span> <span class="n">kor</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">eng</span> <span class="o">=</span> <span class="n">eng</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">math</span> <span class="o">=</span> <span class="n">math</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">com</span> <span class="o">=</span> <span class="n">com</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">total</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--&gt; total method 시작"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">kor</span><span class="o">+</span><span class="n">eng</span><span class="o">+</span><span class="n">math</span><span class="o">+</span><span class="n">com</span><span class="o">;</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">float</span> <span class="nf">avg</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--&gt; avg method 시작"</span><span class="o">);</span>
        <span class="kt">float</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">kor</span><span class="o">+</span><span class="n">eng</span><span class="o">+</span><span class="n">math</span><span class="o">+</span><span class="n">com</span><span class="o">)</span> <span class="o">/</span> <span class="mf">4.0f</span><span class="o">;</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Lombok @Getter,@Setter를 사용하여<br />
Getter,Setter의 긴 코드를 생략했습니다.</p>

<p>메서드 시간측정을 위해 중간 중간에 Thread.sleep();을<br />
이용해 메서드의 머무는 시간을 늘려주었습니다.</p>

<p>각각메서드의 시작을 알리는 코멘트를 프린트하였고<br />
메서드 실행 결과값을 출력하였습니다.</p>

<p><strong>&lt;Aop.class / 공통관심사 코드&gt;</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.lang.reflect.InvocationHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.Method</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.lang.reflect.Proxy</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Aop</span> <span class="o">{</span>
        <span class="c1">// Proxy를 이용한 AOP 구현 방법</span>
        <span class="kd">public</span> <span class="nc">Exam</span> <span class="nf">aopApply</span><span class="o">(</span><span class="nc">Exam</span> <span class="n">exam</span><span class="o">){</span>
            <span class="nc">Exam</span> <span class="n">proxy</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Exam</span><span class="o">)</span> <span class="nc">Proxy</span><span class="o">.</span><span class="na">newProxyInstance</span><span class="o">(</span><span class="nc">Score</span><span class="o">.</span><span class="na">class</span><span class="o">.</span><span class="na">getClassLoader</span><span class="o">(),</span>
                    <span class="k">new</span> <span class="nc">Class</span><span class="o">[]{</span><span class="nc">Exam</span><span class="o">.</span><span class="na">class</span><span class="o">},</span>
                    <span class="k">new</span> <span class="nf">InvocationHandler</span><span class="o">()</span> <span class="o">{</span>
                        <span class="nd">@Override</span>
                        <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">invoke</span><span class="o">(</span><span class="nc">Object</span> <span class="n">proxy</span><span class="o">,</span> <span class="nc">Method</span> <span class="n">method</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
                            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"START: "</span> <span class="o">+</span> <span class="mi">0</span>  <span class="o">+</span> <span class="s">"ms"</span> <span class="o">+</span> <span class="s">" / "</span> <span class="o">+</span><span class="n">getClass</span><span class="o">());</span>

                            <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
                            <span class="nc">Object</span> <span class="n">result</span> <span class="o">=</span> <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">exam</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
                            <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

                            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"END: "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">"ms"</span> <span class="o">+</span> <span class="s">" / "</span> <span class="o">+</span><span class="n">getClass</span><span class="o">());</span>
                            <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
                        <span class="o">}</span>
                    <span class="o">});</span>
            <span class="k">return</span> <span class="n">proxy</span><span class="o">;</span>
        <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>동적 프록시(Dynamic Proxy)</strong>를 사용하여 코드를 작성했다.<br />
동적프록시는 런타임 시점에 프록시 클래스를 만들어주는 방식이다.<br />
사용하는 이유는 프록시 타겟코드의 수정없이 접근 제어 , 부가기능을 추가하려고 사용한다.<br />
즉, 우리가 AOP를 사용하는 목적과 부합한다!!!<br />
Proxy.newProxyInstance() 메서드로 Proxy를 생성하는데 3개의 파라미터를 가진다.</p>

<ul>
  <li>loader : 프록시 클래스를 정의하는 클래스 로더</li>
  <li>interfaces : 프록시 클래스가 구현하는 인터페이스 리스트</li>
  <li>h : 메서드 호출을 처리하는 핸들러</li>
</ul>

<ol>
  <li>프록시 클래스를 지정 : Score.class.getClassLoader()</li>
  <li>프록시 클래스가 구현하는 인터페이스를 지정 : new Class[]{Exam.class}</li>
  <li>메서드 호출을 처리하는 핸들러 구현 : new InvocationHandler(){}<br />
.invoke 메서드를 Override 하여 구현하기</li>
</ol>

<p>시작과 끝을 알리는 코멘트를 추가했으며<br />
메서드 호출 전후로 시간을 측정하여 차액을 표시하게 해두었다.</p>

<p><strong>&lt;Application.class / 클라이언트 요청부분&gt;</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Aop</span> <span class="n">aop</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Aop</span><span class="o">();</span>
        <span class="nc">Exam</span> <span class="n">exam</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Score</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span><span class="mi">80</span><span class="o">,</span><span class="mi">80</span><span class="o">,</span><span class="mi">90</span><span class="o">);</span>
        <span class="nc">Exam</span> <span class="n">proxy</span> <span class="o">=</span> <span class="n">aop</span><span class="o">.</span><span class="na">aopApply</span><span class="o">(</span><span class="n">exam</span><span class="o">);</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"======================="</span><span class="o">);</span>
        <span class="n">proxy</span><span class="o">.</span><span class="na">total</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"======================="</span><span class="o">);</span>
        <span class="n">proxy</span><span class="o">.</span><span class="na">avg</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"======================="</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/* 출력
=======================
START: 0ms / class com.AopExample.Aop_Example.aopSpring.TimeTraceAop
--&gt; total method 시작
350
END: 1049ms / class com.AopExample.Aop_Example.aopSpring.TimeTraceAop
=======================
START: 0ms / class com.AopExample.Aop_Example.aopSpring.TimeTraceAop
--&gt; avg method 시작
87.5
END: 2004ms / class com.AopExample.Aop_Example.aopSpring.TimeTraceAop
=======================
*/</span>
</code></pre></div></div>

<p>전부 구현을 완료했으니 동작을 해보자!<br />
Application을 main메서드를 만들어 동작시킬 수 있게 해주었다.<br />
먼저 각각 점수를 입력하기위해 Exam타입의 Score객체를 만들었다.</p>

<p>만듣 객체는 Aop클래스의 aopApply 매개변수로 객체가 전달되어<br />
해당 객체로 반환받은 Exam타입의 proxy 참조변수를 이용하여<br />
.total(), .avg()를 호출 할 수 있다.</p>

<p>출력 결과를 보면 알 수 있듯이 main 메서드에서<br />
proxy.total() , proxy.avg()를 실행시켰는데<br />
사이에 우리가 측정하고자하는 공통관심 코드가 적용된 것을 볼 수 있다.</p>

<p>여기서 중요한점 !!<br />
우리는 Score.class의 있는 코드를 전혀 수정하지 않아도<br />
공통관심코드가 핵심코드 사이에 햄버거마냥<br />
딱 끼워져서 동작하는 모습을 볼 수 있다는 점!! ★★</p>

<p>우리가 수백개의 메서드를 추가하여도 공통관심코드를 통해<br />
메서드가 호출되기때문에 AOP가 잘 적용되어졌다고 볼 수 있을 것 같다.</p>

<h3 id="spring을-이용해-aop-작성해보기"><strong>Spring을 이용해 AOP 작성해보기</strong></h3>

<p>조건은 위에서 작성한 것과 동일하다 이번에는 인터페이스를 이용하지 않고<br />
Score의 내용을 분리한다음에 Spring의 @Aspect를 이용하여<br />
위와 동일하게 동작하게 만들어보려한다.</p>

<p><img src="https://ifh.cc/g/9PGsAz.png" align="left" width="400px" height="200px" />
<br /><br /><br /><br /><br /><br /><br /><br /><br /></p>

<p>총 4개의 클래스로 구성했고<br />
패키지명은 위와 같이 경로를 지정했으니 아래코드에서 헷갈리지말자!<br />
코드로 내용을 확인해보자.</p>

<p><strong>&lt;Score.class / 점수 관리 객체&gt;</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Score</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">kor</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">eng</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">math</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">com</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Score</span><span class="o">(</span><span class="kt">int</span> <span class="n">kor</span><span class="o">,</span> <span class="kt">int</span> <span class="n">eng</span><span class="o">,</span> <span class="kt">int</span> <span class="n">math</span><span class="o">,</span> <span class="kt">int</span> <span class="n">com</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">kor</span> <span class="o">=</span> <span class="n">kor</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">eng</span> <span class="o">=</span> <span class="n">eng</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">math</span> <span class="o">=</span> <span class="n">math</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">com</span> <span class="o">=</span> <span class="n">com</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위와 동일하게 Lombok을 이용해<br />
Getter,Setter를 만들고 후에 클라이언트에서 객체를 만들어<br />
점수를 넣고 테스트하려고 만든 클래스이다.</p>

<p><strong>&lt;NewlecService / 핵심 로직(합산,평균)&gt;</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NewlecService</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">total</span><span class="o">(</span><span class="nc">Score</span> <span class="n">score</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--&gt; total method 시작"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">score</span><span class="o">.</span><span class="na">getKor</span><span class="o">()</span>
                <span class="o">+</span><span class="n">score</span><span class="o">.</span><span class="na">getEng</span><span class="o">()</span>
                <span class="o">+</span><span class="n">score</span><span class="o">.</span><span class="na">getMath</span><span class="o">()</span>
                <span class="o">+</span><span class="n">score</span><span class="o">.</span><span class="na">getCom</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">1000</span><span class="o">);</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">float</span> <span class="nf">avg</span><span class="o">(</span><span class="nc">Score</span> <span class="n">score</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"--&gt; avg method 시작"</span><span class="o">);</span>
        <span class="kt">float</span> <span class="n">result</span> <span class="o">=</span> <span class="o">(</span><span class="n">score</span><span class="o">.</span><span class="na">getKor</span><span class="o">()</span>
                <span class="o">+</span><span class="n">score</span><span class="o">.</span><span class="na">getEng</span><span class="o">()</span>
                <span class="o">+</span><span class="n">score</span><span class="o">.</span><span class="na">getMath</span><span class="o">()</span>
                <span class="o">+</span><span class="n">score</span><span class="o">.</span><span class="na">getCom</span><span class="o">())</span> <span class="o">/</span> <span class="mf">4.0f</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">2000</span><span class="o">);</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Java 코드로 작성한 Score.class와 동일한 부분이다.<br />
메서드 실행시 코멘트로 알려주고 쓰레드 딜레이를 넣어<br />
메서드 실행 시간을 늘려주었다.<br />
@Service를 이용해 Bean에 등록해 스프링 컨테이너가 관리한다.</p>

<p><strong>&lt;TimeTraceAop.class / 공통 관심 코드&gt;</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Around</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Aspect</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Aspect</span> <span class="c1">// AOP</span>
<span class="nd">@Component</span> <span class="c1">// Bean 등록</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimeTraceAop</span> <span class="o">{</span>

    <span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(* com.AopExample.Aop_Example..*(..))"</span><span class="o">)</span>
     <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span><span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"START: "</span> <span class="o">+</span> <span class="mi">0</span>  <span class="o">+</span> <span class="s">"ms"</span> <span class="o">+</span> <span class="s">" / "</span> <span class="o">+</span><span class="n">getClass</span><span class="o">());</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="o">}</span><span class="k">finally</span> <span class="o">{</span>

            <span class="kt">long</span> <span class="n">end</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"END: "</span> <span class="o">+</span> <span class="o">(</span><span class="n">end</span><span class="o">-</span><span class="n">start</span><span class="o">)</span> <span class="o">+</span> <span class="s">"ms"</span> <span class="o">+</span> <span class="s">" / "</span> <span class="o">+</span> <span class="n">getClass</span><span class="o">());</span>
        <span class="o">}</span>
     <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>동일하게 시간을 측정하는 공통관심 클래스이다.<br />
@Aspect 어노테이션으로 AOP 사용을 알려주고<br />
@Component로 Bean을 등록했다.</p>

<p>@Around Adive타입을 이용해 메서드를 만들었고<br />
Pointcut은 Aop_Example 패키지 전체를 메서드로 지정했다.<br />
joinPoint.proceed();를 이용해 메서드를 호출하고 있고<br />
위 아래에 시간을 측정하는 코드를 두었다.</p>

<p><strong>&lt;AopExampleApplication.class / 스프링 부트실행, 클라이언트코드&gt;</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.AopExample.Aop_Example.aopSpring.NewlecService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.AopExample.Aop_Example.aopSpring.Score</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.SpringApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.autoconfigure.SpringBootApplication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.ApplicationContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.AnnotationConfigApplicationContext</span><span class="o">;</span>

<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AopExampleApplication</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">AopExampleApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
      <span class="nc">ApplicationContext</span> <span class="n">applicationContext</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AnnotationConfigApplicationContext</span><span class="o">(</span><span class="nc">AopExampleApplication</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
      <span class="nc">NewlecService</span> <span class="n">newlecService</span> <span class="o">=</span> <span class="n">applicationContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="s">"newlecService"</span><span class="o">,</span> <span class="nc">NewlecService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

      <span class="nc">Score</span> <span class="n">myScore</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Score</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span><span class="mi">80</span><span class="o">,</span><span class="mi">80</span><span class="o">,</span><span class="mi">90</span><span class="o">);</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"======================="</span><span class="o">);</span>
      <span class="n">newlecService</span><span class="o">.</span><span class="na">total</span><span class="o">(</span><span class="n">myScore</span><span class="o">);</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"======================="</span><span class="o">);</span>
      <span class="n">newlecService</span><span class="o">.</span><span class="na">avg</span><span class="o">(</span><span class="n">myScore</span><span class="o">);</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"======================="</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
<span class="cm">/* 출력
=======================
START: 0ms / class com.AopExample.Aop_Example.aopSpring.TimeTraceAop
--&gt; total method 시작
350
END: 1029ms / class com.AopExample.Aop_Example.aopSpring.TimeTraceAop
=======================
START: 0ms / class com.AopExample.Aop_Example.aopSpring.TimeTraceAop
--&gt; avg method 시작
87.5
END: 2006ms / class com.AopExample.Aop_Example.aopSpring.TimeTraceAop
=======================
*/</span>
</code></pre></div></div>

<p>스프링 부트 실행 클래스 아래에 클라이언트 요청 코드도 같이두었다.<br />
Java코드로 작성한 것과 다른점은 Java코드에선 proxy 객체를 이용했고<br />
Spring은 스프링컨테이너(ApplicationContext)에서<br />
.getBean으로 객체를 가져와 컨테이너에 있는 객체로 메서드를 호출했다.</p>

<p>현재 스프링 컨테이너에 등록된 Bean은<br />
com.AopExample.Aop_Example.AopExampleApplication$$EnhancerBySpringCGLIB$$62eea1e6@236ab296<br />
com.AopExample.Aop_Example.aopSpring.NewlecService@5c84624f<br />
com.AopExample.Aop_Example.aopSpring.TimeTraceAop@63034ed1<br />
이렇게 3개로 확인해볼 수 있다.</p>

<p>AopExampleApplication은 뒤에 EnhancerBy~~이렇게 붙여져있는데<br />
스프링에 빈을 등록할때 바이트 코드를 조작한 객체가 스프링 컨테이너에 등록되기 때문이다.<br />
AOP 기술과 싱글톤 보장의 이유기도하다.<br />
@Configuration도 동일한 기능을 제공해주고<br />
@SpringBootApplication을 사용하였기때문에 내부에<br />
@SpringBootConfiguration이 있기 때문에 위와 같이 바이트 코드가 조작된 객체로 보이는 것이다.</p>

<hr />

<p>오늘은 이렇게 Pointcut 표현식과 JoinPoint에 대해 간단히 알아봤고<br />
Java로 작성한 AOP기술을 이용한 예제와<br />
Spring으로 작성한 AOP기술을 이용한 예제<br />
이렇게 2개를 비교해서 알아보았다.<br />
동일한 동작을 하는 코드로 작성하였고<br />
이렇게 두개를 비교하면서 프로그램을 타이핑해보니<br />
조금더 이해가 쏙쏙되는 느낌이다.</p>

<p>오늘 공부는 여기서 끝!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 제육볶음, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[올해 처음으로 늦잠을 자 지각을 해버렸다..]]></summary></entry></feed>