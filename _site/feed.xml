<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-12-01T22:34:09+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LeeJellan</title><subtitle>안녕하세요!🙂 IT,여행,기타 등 기록을 남기기위한 블로그 입니다 !</subtitle><author><name>LEE JAEHYEOK</name></author><entry><title type="html">TIL) Spring WebFlux 구현하기</title><link href="http://localhost:4000/til/2022/12/01/til.html" rel="alternate" type="text/html" title="TIL) Spring WebFlux 구현하기" /><published>2022-12-01T00:00:00+09:00</published><updated>2022-12-01T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/12/01/til</id><content type="html" xml:base="http://localhost:4000/til/2022/12/01/til.html"><![CDATA[<p>12월이 시작되었다 !<br />
올해도 이렇게 시간이 빨리가는 구나<br />
점점 더빨리가는 시간이 조금 야속하다.</p>

<p>그래도 내가 당장할 수 있는 일에<br />
늘 집중할 수 있게 다시한번 마음을 다져보며<br />
오늘 공부를 시작해보자</p>

<hr />

<p>오늘은 WebFlux 기술을 이용한 애플리케이션을 구현해볼 생각이다.</p>

<h3 id="spring-webfulx-">Spring WebFulx ?</h3>

<p>Spring WebFlux는 전통적인 Spring MVC방식의 애플리케이션보다<br />
대량 클라이언트 요청을 좀 더 효율적으로 처리할 수 있는 현대적인<br />
애플리케이션 구현을 위한 기술이라고 한다.</p>

<p>Spring 5에 Reactive 스택이라는 기술이 새롭게 추가되었고<br />
해당 기술에서 지원하는 타입 <code class="language-plaintext highlighter-rouge">Mono</code>와 <code class="language-plaintext highlighter-rouge">Flux</code>를 사용 했던 걸<br />
이전에 <a href="https://mycatlikeschuru.github.io/til/2022/11/30/til.html">Project Reactor</a>를 공부 하면서 배웠었다.</p>

<p>한마디로 저의를 하자면, Spring WebFlux는 <br />
리액티브 웹 애플리케이션을 위한 웹 프레임워크이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPoDOocq2SqLuJtAX2FsfgKnh4PxlFxW5qpbRJoRuH6MuZSKYcSqpK9hsYGiSumVaYCclCg3iKyd351ISGmBJNX3xHw=w777-h753" alt="image" class="align-left" style="max-width: 100%" /><br />
<a href="https://docs.spring.io/spring-framework/docs/5.2.5.RELEASE/spring-framework-reference/web-reactive.html#webflux-framework-choice">출처 - spring.io</a></p>

<p>Spring MVC와 Spring WebFlux를 벤다이어그램으로 비교한 사진이다.</p>

<p>이제 클라이언트의 요청을 적으로 받는다고 했었는데<br />
어떻게 차이가나는지 한번 비교해보자</p>

<p><br /></p>

<h3 id="spring-mvc-vs-spring-webflux">Spring MVC vs Spring WebFlux</h3>

<p>두개의 프레임워크를 사용해 어떠한 차이가 있는지 확인해보려한다.<br />
테스트 방식은 서버 2개를 띄워서 한쪽에서 다른쪽을 여러번 동시에 요청하였을 경우<br />
어떻게 처리가 진행되어지는지 비교해보자</p>

<p><br /></p>

<p><strong>1). Spring MVC 테스트 하기</strong></p>

<p>IntelliJ의 Spring Project를 두개를 만들고 각각 다른 서버로 만들 것이다.</p>
<ol>
  <li>호출하는 서버 - MAIN , PORT 8080</li>
  <li>호출받는 서버 - OUT, PORT 7070</li>
</ol>

<p>위와 같이 이름을 정해놓고 포트는</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">server</span><span class="pi">:</span>
  <span class="na">port</span><span class="pi">:</span> <span class="m">7070</span>
</code></pre></div></div>
<p>.yml 파일에 추가를 통해 변경이 가능하다.<br />
우선 MAIN 서버 부터 코드를 작성해보자</p>

<p><br /></p>

<ul>
  <li><strong>Main 서버</strong></li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v11/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcMainCoffeeController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RestTemplate</span> <span class="n">restTemplate</span><span class="o">;</span>

    <span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="s">"http://localhost:7070/v11/coffees/1"</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SpringMvcMainCoffeeController</span><span class="o">(</span><span class="nc">RestTemplateBuilder</span> <span class="n">restTemplateBuilder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">restTemplate</span> <span class="o">=</span> <span class="n">restTemplateBuilder</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{coffee-id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">getCoffee</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"coffee-id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">)</span> <span class="o">{</span>

        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# call Spring MVC Main Controller: {}"</span><span class="o">,</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
        <span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForEntity</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="nc">CoffeeResponseDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getBody</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>해당 Controller가 호출되었을 때, OUT서버를 호출하는 프로그램이다.<br />
log로 현재 시간을 기록해 시간을 체크할 예정이다.<br />
(Dto 코드는 간단하기 때문에 따로 올리지 않겠습니다!)</p>

<p>그리고 Spring 애플리케이션쪽에는</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcMainSampleApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringMvcMainSampleApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">CommandLineRunner</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# 요청 시작 시간: {}"</span><span class="o">,</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>

			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="nc">CoffeeResponseDto</span> <span class="n">response</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">getCoffee</span><span class="o">();</span>
				<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"{}: coffee name: {}"</span><span class="o">,</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">getKorName</span><span class="o">());</span>
			<span class="o">}</span>
		<span class="o">};</span>
	<span class="o">}</span>

	<span class="c1">// Postman처럼 아래 주소로 5번 요청</span>
	<span class="c1">// 그에따른 7070 서버에 5번 요청</span>
	<span class="kd">private</span> <span class="nc">CoffeeResponseDto</span> <span class="nf">getCoffee</span><span class="o">()</span> <span class="o">{</span>
		<span class="nc">RestTemplate</span> <span class="n">restTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">RestTemplate</span><span class="o">();</span>
		<span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="s">"http://localhost:8080/v11/coffees/1"</span><span class="o">;</span>
		<span class="nc">ResponseEntity</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="n">restTemplate</span><span class="o">.</span><span class="na">getForEntity</span><span class="o">(</span><span class="n">uri</span><span class="o">,</span> <span class="nc">CoffeeResponseDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

		<span class="k">return</span> <span class="n">response</span><span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">CommandLineRunner</code>를 반환타입으로한 메서드로<br />
애플리케이션이 실행 시 5번 MAIN서버 API를 요청하도록 하였다.<br />
5번을 실행하면서 OUT서버에서 응답받은 Coffee 이름과 현재 시간을 기록하게 작성했다.</p>

<p><br /></p>

<p>이제 MAIN서버에서 호출받는 OUT서버를 작성해보자</p>

<ul>
  <li>OUT 서버
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v11/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringMvcOutboundCoffeeController</span> <span class="o">{</span>
  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{coffee-id}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">getCoffee</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"coffee-id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
      <span class="nc">CoffeeResponseDto</span> <span class="n">responseDto</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CoffeeResponseDto</span><span class="o">(</span><span class="n">coffeeId</span><span class="o">,</span> <span class="s">"카페라떼"</span><span class="o">,</span> <span class="s">"CafeLattee"</span><span class="o">,</span> <span class="mi">4000</span><span class="o">);</span>

      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
      <span class="k">return</span> <span class="nc">ResponseEntity</span><span class="o">.</span><span class="na">ok</span><span class="o">(</span><span class="n">responseDto</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <p>간단하다 MAIN서버에서 API호출 받는 서버로 Port번호는 7070으로 변경했다.<br />
쓰레드를 5초간 정지시켜놓고 응답을해주는 프로그램이다.</p>
  </li>
</ul>

<p>이제 OUT서버 애플리케이션을 먼저 실행시킨후<br />
MAIN서버 애플리케이션을 동작시키면 작성한 코드에 의해 OUT서버 API가 5번 호출 될 것이다.</p>

<p>MAIN서버에서 출력된 로그를 확인해보면</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2022-12-01 21:35:51.097  INFO 46801 --- [nio-8080-exec-1] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:35:51.097332
2022-12-01 21:35:56.325  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:35:56.325066: coffee name: 카페라떼
2022-12-01 21:35:56.330  INFO 46801 --- [nio-8080-exec-5] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:35:56.330589
2022-12-01 21:36:01.354  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:36:01.354035: coffee name: 카페라떼
2022-12-01 21:36:01.367  INFO 46801 --- [nio-8080-exec-3] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:36:01.367418
2022-12-01 21:36:06.388  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:36:06.388594: coffee name: 카페라떼
2022-12-01 21:36:06.399  INFO 46801 --- [nio-8080-exec-6] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:36:06.399304
2022-12-01 21:36:11.428  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:36:11.428414: coffee name: 카페라떼
2022-12-01 21:36:11.444  INFO 46801 --- [nio-8080-exec-2] c.c.c.c.SpringMvcMainCoffeeController    : # call Spring MVC Main Controller: 2022-12-01T21:36:11.444136
2022-12-01 21:36:16.466  INFO 46801 --- [           main] c.c.SpringMvcMainSampleApplication       : 21:36:16.466802: coffee name: 카페라떼
</code></pre></div></div>
<p>5초 간격으로 API가 호출된 것을 볼 수 있다. <br />
총 25초 정도 소요되었음을 확인할 수 있다.</p>

<p>이유는 무었일까? Spring MVC는 Blocking 처리 방식이기 때문에<br />
5번의 요청이 빠르게 들어와도 하나의 요청처리가 끝나고<br />
다음 처리를 하지못하는 모습을 볼 수 있다.</p>

<p><br /></p>

<p><strong>2). Spring WebFlux 테스트 하기</strong></p>

<p>그럼 우리가배운 Non-Blocking처리를 하는<br />
Spring WebFlux를 사용해서 한번 작성해보자.<br />
방식은 Spring MVC와 동일 방법으로 테스트를 진행해보려한다.</p>

<ul>
  <li>MAIN 서버</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v11/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringWebFluxMainCoffeeController</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="s">"http://localhost:7070/v11/coffees/1"</span><span class="o">;</span>

    <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">)</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{coffee-id}"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="nf">getCoffee</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"coffee-id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# call Spring WebFlux Main Controller: {}"</span><span class="o">,</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>
        <span class="k">return</span> <span class="nc">WebClient</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
                <span class="o">.</span><span class="na">get</span><span class="o">()</span>
                <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
                <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
                <span class="o">.</span><span class="na">bodyToMono</span><span class="o">(</span><span class="nc">CoffeeResponseDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>마찬가지로 OUT서버를 호출하는 동작이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringWebFluxMainSampleApplication</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
		<span class="nc">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"reactor.netty.ioWorkerCount"</span><span class="o">,</span> <span class="s">"1"</span><span class="o">);</span>
		<span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">SpringWebFluxMainSampleApplication</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
	<span class="o">}</span>

	<span class="nd">@Bean</span>
	<span class="kd">public</span> <span class="nc">CommandLineRunner</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
		<span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">args</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
			<span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# 요청 시작 시간: {}"</span><span class="o">,</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">());</span>

			<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
				<span class="k">this</span><span class="o">.</span><span class="na">getCoffee</span><span class="o">().</span><span class="na">subscribe</span><span class="o">(</span>
                                        <span class="n">response</span> <span class="o">-&gt;</span> <span class="o">{</span>
                                            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"{}: coffee name: {}"</span><span class="o">,</span> <span class="nc">LocalTime</span><span class="o">.</span><span class="na">now</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">getKorName</span><span class="o">());</span>
                                        <span class="o">}</span>
                <span class="o">);</span>
            <span class="o">}</span>
        <span class="o">};</span>
    <span class="o">}</span>
    <span class="kd">private</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="nf">getCoffee</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="s">"http://localhost:8080/v11/coffees/1"</span><span class="o">;</span>
        <span class="k">return</span> <span class="nc">WebClient</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
                <span class="o">.</span><span class="na">get</span><span class="o">()</span>
                <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="n">uri</span><span class="o">)</span>
                <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
                <span class="o">.</span><span class="na">bodyToMono</span><span class="o">(</span><span class="nc">CoffeeResponseDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Spring MVC와 동일하게 Spring WebFlux 방식으로<br />
OUT서버를 호출하는 프로그램이다.</p>

<ul>
  <li>OUT 서버
    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v11/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringWebFluxOutboundCoffeeController</span> <span class="o">{</span>
  <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">OK</span><span class="o">)</span>
  <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/{coffee-id}"</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeResponseDto</span><span class="o">&gt;</span> <span class="nf">getCoffee</span><span class="o">(</span><span class="nd">@PathVariable</span><span class="o">(</span><span class="s">"coffee-id"</span><span class="o">)</span> <span class="kt">long</span> <span class="n">coffeeId</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
      <span class="nc">CoffeeResponseDto</span> <span class="n">responseDto</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CoffeeResponseDto</span><span class="o">(</span><span class="n">coffeeId</span><span class="o">,</span> <span class="s">"카페라떼"</span><span class="o">,</span> <span class="s">"CafeLattee"</span><span class="o">,</span> <span class="mi">4000</span><span class="o">);</span>

      <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">5000</span><span class="o">);</span>
      <span class="k">return</span> <span class="nc">Mono</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="n">responseDto</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>    </div>
    <p>이제 OUT 서버도 동일하게 쓰레드에 5초의 딜레이를 걸어놓고<br />
OUT서버 애플리케이션부터 실행하고 MAIN서버를 실행하게되면</p>
  </li>
</ul>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>2022-12-01 21:41:38.540  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.540514: coffee name: 카페라떼
2022-12-01 21:41:38.541  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.541614: coffee name: 카페라떼
2022-12-01 21:41:38.543  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.543159: coffee name: 카페라떼
2022-12-01 21:41:38.544  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.544006: coffee name: 카페라떼
2022-12-01 21:41:38.544  INFO 47287 --- [ctor-http-nio-1] c.c.SpringWebFluxMainSampleApplication   : 21:41:38.544734: coffee name: 카페라떼
</code></pre></div></div>
<p>이렇게 콘솔에 로그가 발생할 것이다.<br />
우리가 요청시간을 확인하려고 남긴로그고 실제로 로그 시간을 확인해보면<br />
1초도 차이나지않게 5개의 요청이 전부처리가된 것을 볼 수 있다.</p>

<p>이 말은 즉, Non-Blocking 처리방식이다.<br />
여러번의 요청이 들어와도 밀리지 않고 동작이 동시에 처리된 모습이다.</p>

<p>이렇게 Non-Blocking으로 처리되는 것을 눈으로 보았는데<br />
실제 Spring WebFlux안에는 이렇게 처리해줄 수 있는<br />
엄청난 기술과 코드가 들어가 있을 것이다.. 실제로 Spring MVC처럼<br />
클래스를 모두 찾아보고 아키텍처를 그리고 상속관계를 파악해보고<br />
깊게 탐구해보고 싶지만… 현실적으로 지금 공부하는 단계에서는 전부 확인하는 것은<br />
무리가 있어보인다. 이렇게 사용을하면 일단.. Non-Blocking 처리가 되는구나! 하고<br />
후에 Advance한 공부를 해야할 것 같다.</p>

<p><br /></p>

<h3 id="spring-webflux-적용">Spring WebFlux 적용</h3>

<p>실제로 우리가 Controller 계층과 Service 계층에<br />
어떻게 Spring WebFlux를 적용할 수 있는지 알아보자</p>

<p>애플리케이션 컨셉은<br />
커피를 등록하면 해당 커피가 DB에 저장되는 컨셉이며<br />
H2 Database를 사용하였다.</p>

<p>우선 resources로 활용할 데이터를 저장해야한다.<br />
첫번째로 <code class="language-plaintext highlighter-rouge">.sql</code> 파일을 작성해야한다.</p>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CREATE TABLE IF NOT EXISTS COFFEE (
    COFFEE_ID bigint NOT NULL AUTO_INCREMENT,
    KOR_NAME varchar(100) NOT NULL,
    ENG_NAME varchar(100) NOT NULL,
    PRICE number NOT NULL,
    COFFEE_CODE char(3) NOT NULL,
    COFFEE_STATUS varchar(100) NOT NULL,
    CREATED_AT datetime NOT NULL,
    LAST_MODIFIED_AT datetime NOT NULL,
    PRIMARY KEY (COFFEE_ID)
);
</code></pre></div></div>

<p>그리고 <code class="language-plaintext highlighter-rouge">.yml</code> 파일을 설정해주자</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">r2dbc</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">r2dbc:h2:mem:///test;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">sa</span>
    <span class="na">password</span><span class="pi">:</span>
  <span class="na">sql</span><span class="pi">:</span>
    <span class="na">init</span><span class="pi">:</span>
      <span class="na">schema-locations</span><span class="pi">:</span> <span class="s">classpath*:db/h2/schema.sql</span>
<span class="na">logging</span><span class="pi">:</span>
  <span class="na">level</span><span class="pi">:</span>
    <span class="na">org</span><span class="pi">:</span>
      <span class="na">springframework</span><span class="pi">:</span>
        <span class="na">r2dbc</span><span class="pi">:</span> <span class="s">DEBUG</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">schema.sql</code>은 위에서 설정한 <code class="language-plaintext highlighter-rouge">.sql</code>파일이름이다.<br />
<code class="language-plaintext highlighter-rouge">r2dbc</code>를 설정해줘야 h2 데이터베이스를 웹으로 접근할 수 있다.<br />
후에 아래에서 접근하기 위한 코드를 작성해야한다.</p>

<p>그리고 <code class="language-plaintext highlighter-rouge">build.gradle</code> 파일의 설정이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dependencies</span> <span class="o">{</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">webflux</span><span class="err">'</span> <span class="c1">// 추가</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">validation</span><span class="err">'</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">data</span><span class="o">-</span><span class="n">r2dbc</span><span class="err">'</span> <span class="c1">// 추가</span>
	<span class="n">compileOnly</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">:</span><span class="n">lombok</span><span class="err">'</span>
	<span class="n">annotationProcessor</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">projectlombok</span><span class="o">:</span><span class="n">lombok</span><span class="err">'</span>
	<span class="n">testImplementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">test</span><span class="err">'</span>
	<span class="n">testImplementation</span> <span class="err">'</span><span class="n">io</span><span class="o">.</span><span class="na">projectreactor</span><span class="o">:</span><span class="n">reactor</span><span class="o">-</span><span class="n">test</span><span class="err">'</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">mapstruct</span><span class="o">:</span><span class="nl">mapstruct:</span><span class="mf">1.5</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">Final</span><span class="err">'</span>
	<span class="n">annotationProcessor</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">mapstruct</span><span class="o">:</span><span class="n">mapstruct</span><span class="o">-</span><span class="nl">processor:</span><span class="mf">1.5</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="na">Final</span><span class="err">'</span>
	<span class="n">runtimeOnly</span> <span class="err">'</span><span class="n">io</span><span class="o">.</span><span class="na">r2dbc</span><span class="o">:</span><span class="n">r2dbc</span><span class="o">-</span><span class="n">h2</span><span class="err">'</span> <span class="c1">// 추가</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">com</span><span class="o">.</span><span class="na">h2database</span><span class="o">:</span><span class="n">h2</span><span class="err">'</span> 
<span class="o">}</span>
</code></pre></div></div>
<p>여러가지가 있지만 우리가 WebFlux를 사용하기 위해<br />
추가한 의존라이브러리 <code class="language-plaintext highlighter-rouge">// 추가</code>라고 되어있는 부분을 꼭 추가해주자</p>

<p>처음으로는 h2 DB를 접근할 수 있는 코드를 작성해보자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">H2Console</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Server</span> <span class="n">webServer</span><span class="o">;</span>

    <span class="nd">@EventListener</span><span class="o">(</span><span class="nc">ContextRefreshedEvent</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">java</span><span class="o">.</span><span class="na">sql</span><span class="o">.</span><span class="na">SQLException</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"starting h2 console at port 8078"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">webServer</span> <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">h2</span><span class="o">.</span><span class="na">tools</span><span class="o">.</span><span class="na">Server</span><span class="o">.</span><span class="na">createWebServer</span><span class="o">(</span><span class="s">"-webPort"</span><span class="o">,</span> <span class="s">"8078"</span><span class="o">,</span> <span class="s">"-tcpAllowOthers"</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@EventListener</span><span class="o">(</span><span class="nc">ContextClosedEvent</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">stop</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"stopping h2 console at port 8078"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">webServer</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Port 8078로 설정하여<br />
<code class="language-plaintext highlighter-rouge">localhost:8078</code>을 웹주소로 입력해 기존과 동일하게 접근이 가능하다.</p>

<p>이제 우리가 확인해야할 Controller가 어떻게<br />
변경되었는지 확인해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/v12/coffees"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeeController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CoffeeService</span> <span class="n">coffeeService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CoffeeMapper</span> <span class="n">mapper</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CoffeeController</span><span class="o">(</span><span class="nc">CoffeeService</span> <span class="n">coffeeService</span><span class="o">,</span> <span class="nc">CoffeeMapper</span> <span class="n">mapper</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">coffeeService</span> <span class="o">=</span> <span class="n">coffeeService</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">mapper</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@PostMapping</span><span class="o">()</span>
    <span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">createCoffee</span><span class="o">(</span><span class="nd">@RequestBody</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeDto</span><span class="o">.</span><span class="na">Post</span><span class="o">&gt;</span> <span class="n">requestBody</span><span class="o">){</span>

        <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">CoffeeDto</span><span class="o">.</span><span class="na">Response</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span>
                <span class="n">requestBody</span>
                        <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">post</span> <span class="o">-&gt;</span> <span class="n">coffeeService</span><span class="o">.</span><span class="na">createCoffee</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">coffeePostDtoToCoffee</span><span class="o">(</span><span class="n">post</span><span class="o">)))</span>
                        <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">coffee</span> <span class="o">-&gt;</span> <span class="n">mapper</span><span class="o">.</span><span class="na">coffeeToCoffeeResponseDto</span><span class="o">(</span><span class="n">coffee</span><span class="o">));</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nf">ResponseEntity</span><span class="o">(</span><span class="n">result</span><span class="o">,</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>정말 간단하게 되어있는 Controller 계층이다.<br />
Post요청하나만 존재하는 클래스이고, <code class="language-plaintext highlighter-rouge">Mono</code>를 이용했다.<br />
<code class="language-plaintext highlighter-rouge">Mono&lt;&gt;</code>로 감싼 객체를 받고, 응답을해주면 된다.</p>

<p>객체를 변환하기 위해서 <code class="language-plaintext highlighter-rouge">flatMap()</code> , <code class="language-plaintext highlighter-rouge">map()</code>을 사용했고<br />
Mono에 감싸여있는 객체 <code class="language-plaintext highlighter-rouge">CoffeeDto.Response</code>를 꺼내서<br />
우리가 만든 mapper 클래스를 이용해 <code class="language-plaintext highlighter-rouge">Coffee</code> 객체로 변환해주고 있다.</p>

<p>변환된 객체를 <code class="language-plaintext highlighter-rouge">coffeeService.createCoffee();</code>메서드에 매개변수로 넣어<br />
Service 계층을 호출하는 모습이다. 이제 Service 계층에서는 데이터를 DB에 저장하고<br />
다시 반환받은 객체를 <code class="language-plaintext highlighter-rouge">map();</code>메서드로 반환 타입에 맞는 형태로 변경하여</p>

<p><code class="language-plaintext highlighter-rouge">ResponseEntity</code> 객체를 만들어 반환해주면 끝이다.<br />
기존 Spring MVC와 달라진 점은 <code class="language-plaintext highlighter-rouge">Mono</code>를 사용한점만 변경되었다.</p>

<p>그럼 Service 계층을 살펴보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeeService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CoffeeRepository</span> <span class="n">coffeeRepository</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">R2dbcEntityTemplate</span> <span class="n">template</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CoffeeService</span><span class="o">(</span><span class="nc">CoffeeRepository</span> <span class="n">coffeeRepository</span><span class="o">,</span> <span class="nc">R2dbcEntityTemplate</span> <span class="n">template</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">coffeeRepository</span> <span class="o">=</span> <span class="n">coffeeRepository</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">template</span> <span class="o">=</span> <span class="n">template</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">Coffee</span><span class="o">&gt;</span> <span class="nf">createCoffee</span><span class="o">(</span><span class="nc">Coffee</span> <span class="n">coffee</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">Coffee</span><span class="o">&gt;</span> <span class="n">coffeeMono</span> <span class="o">=</span> <span class="n">findVerifiedCoffee</span><span class="o">(</span><span class="n">coffee</span><span class="o">.</span><span class="na">getCoffeeCode</span><span class="o">())</span>
                <span class="o">.</span><span class="na">then</span><span class="o">(</span><span class="n">coffeeRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">coffee</span><span class="o">));</span>

        <span class="k">return</span> <span class="n">coffeeMono</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">Void</span><span class="o">&gt;</span> <span class="nf">findVerifiedCoffee</span><span class="o">(</span><span class="nc">String</span> <span class="n">coffeeCode</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">coffeeRepository</span><span class="o">.</span><span class="na">findByCoffeeCode</span><span class="o">(</span><span class="n">coffeeCode</span><span class="o">)</span>
                <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">findCoffee</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">findCoffee</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="nc">Mono</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="k">new</span> <span class="nc">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">COFFEE_CODE_EXISTS</span><span class="o">));</span>
                    <span class="o">}</span>
                    <span class="k">return</span> <span class="nc">Mono</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
                <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Service 계층도 기존과 동일한 코드들이고<br />
CoffeeCode를 통해 유무를 확인하는 <code class="language-plaintext highlighter-rouge">findVerifiedCoffee();</code>메서드와<br />
실제로 DB에 저장을하기위한 <code class="language-plaintext highlighter-rouge">createCoffee();</code>메서드가 존재한다.</p>

<p>여기도 안에있는 내용들이 <code class="language-plaintext highlighter-rouge">Mono</code>를 이용해 처리한점만 다르다.</p>

<p>그럼 이제 Repository 계층을 살펴보자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CoffeeRepository</span> <span class="kd">extends</span> <span class="nc">R2dbcRepository</span><span class="o">&lt;</span><span class="nc">Coffee</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">Coffee</span><span class="o">&gt;</span> <span class="nf">findByCoffeeCode</span><span class="o">(</span><span class="nc">String</span> <span class="n">coffeeCode</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>기존에 Spring MVC를 사용할 때는 JDBC,JPA를 사용했지만<br />
Spring WebFlux에서는 R2dbc를 사용하고있다.</p>

<p>형식은 기존에 설정하는 것과 비슷하다.<br />
여기서도 다른점은 <code class="language-plaintext highlighter-rouge">Mono</code>를 사용했다는 점</p>

<p>이렇게 작성을 완료하고 Postman을 통해 API를 호출해보면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMjWMzoUG84NMNpT7pz0VgGN-ybnZKqlYSH5gZz5h8ljPVKuQeR_DO_ECGFSSbn1ZKojbxKb9qlYgRFDjO-D24JuRQaeQ=w777-h807" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>Spring MVC와 동일하게 요청과 응답이 오는 것을 볼 수 있다.<br />
실제로 Postman을 통해서 여러개 요청하는 작업은 못해봤지만</p>

<p>처음에 테스트해보았던 동시에 호출하였을 경우처럼<br />
동시에 많은 요청처리가 이을 경우 확연히 다른 차이를 보일 것 같다.</p>

<p><br /></p>

<p>기타로 정상적으로 테스트하기 위해 필요한 코드인<br />
<code class="language-plaintext highlighter-rouge">Coffee</code>, <code class="language-plaintext highlighter-rouge">CoffeeDto</code>, <code class="language-plaintext highlighter-rouge">CoffeeMapper</code>, <br />
<code class="language-plaintext highlighter-rouge">BusinessLogicException</code>, <code class="language-plaintext highlighter-rouge">ExceptionCode</code>를 아래에 적어본다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@NoArgsConstructor</span>
<span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@Table</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Coffee</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">coffeeId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">korName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">engName</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Integer</span> <span class="n">price</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">coffeeCode</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">CoffeeStatus</span> <span class="n">coffeeStatus</span> <span class="o">=</span> <span class="nc">CoffeeStatus</span><span class="o">.</span><span class="na">COFFEE_FOR_SALE</span><span class="o">;</span>

    <span class="nd">@CreatedDate</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="nd">@LastModifiedDate</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="s">"last_modified_at"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">modifiedAt</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">enum</span> <span class="nc">CoffeeStatus</span> <span class="o">{</span>
        <span class="no">COFFEE_FOR_SALE</span><span class="o">(</span><span class="s">"판매중"</span><span class="o">),</span>
        <span class="no">COFFEE_SOLD_OUT</span><span class="o">(</span><span class="s">"판매 중지"</span><span class="o">);</span>

        <span class="nd">@Getter</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">status</span><span class="o">;</span>

        <span class="nc">CoffeeStatus</span><span class="o">(</span><span class="nc">String</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">status</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CoffeeDto</span> <span class="o">{</span>
    <span class="nd">@Getter</span>
    <span class="nd">@AllArgsConstructor</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Post</span> <span class="o">{</span>
        <span class="nd">@NotBlank</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">korName</span><span class="o">;</span>

        <span class="nd">@NotBlank</span>
        <span class="nd">@Pattern</span><span class="o">(</span><span class="n">regexp</span> <span class="o">=</span> <span class="s">"^([A-Za-z])(\\s?[A-Za-z])*$"</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"커피명(영문)은 영문이어야 합니다(단어 사이 공백 한 칸 포함). 예) Cafe Latte"</span><span class="o">)</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">engName</span><span class="o">;</span>

        <span class="nd">@Range</span><span class="o">(</span><span class="n">min</span><span class="o">=</span> <span class="mi">100</span><span class="o">,</span> <span class="n">max</span><span class="o">=</span> <span class="mi">50000</span><span class="o">)</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>

        <span class="nd">@NotBlank</span>
        <span class="nd">@Pattern</span><span class="o">(</span><span class="n">regexp</span> <span class="o">=</span> <span class="s">"^([A-Za-z]){3}$"</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"커피 코드는 3자리 영문이어야 합니다."</span><span class="o">)</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">coffeeCode</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Mapper</span><span class="o">(</span><span class="n">componentModel</span> <span class="o">=</span> <span class="s">"spring"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CoffeeMapper</span> <span class="o">{</span>
    <span class="nc">Coffee</span> <span class="nf">coffeePostDtoToCoffee</span><span class="o">(</span><span class="nc">CoffeeDto</span><span class="o">.</span><span class="na">Post</span> <span class="n">coffeePostDto</span><span class="o">);</span>
    <span class="nc">CoffeeDto</span><span class="o">.</span><span class="na">Response</span> <span class="nf">coffeeToCoffeeResponseDto</span><span class="o">(</span><span class="nc">Coffee</span> <span class="n">coffee</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BusinessLogicException</span> <span class="kd">extends</span> <span class="nc">RuntimeException</span> <span class="o">{</span>
    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="nc">ExceptionCode</span> <span class="n">exceptionCode</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span> <span class="n">exceptionCode</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">exceptionCode</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="k">this</span><span class="o">.</span><span class="na">exceptionCode</span> <span class="o">=</span> <span class="n">exceptionCode</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">enum</span> <span class="nc">ExceptionCode</span> <span class="o">{</span>
    <span class="no">COFFEE_NOT_FOUND</span><span class="o">(</span><span class="mi">404</span><span class="o">,</span> <span class="s">"Coffee not found"</span><span class="o">),</span>
    <span class="no">COFFEE_CODE_EXISTS</span><span class="o">(</span><span class="mi">409</span><span class="o">,</span> <span class="s">"Coffee Code exists"</span><span class="o">);</span>

    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">status</span><span class="o">;</span>

    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>

    <span class="nc">ExceptionCode</span><span class="o">(</span><span class="kt">int</span> <span class="n">code</span><span class="o">,</span> <span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">status</span> <span class="o">=</span> <span class="n">code</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">message</span> <span class="o">=</span> <span class="n">message</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br /></p>

<hr />

<p>오늘은 이렇게 SpringWebFlux를 실제 우리가<br />
애플리케이션 계층에 적용하는 방식과 동일하게 적용해보았다.</p>

<p>확실히 Spring MVC보다 사용하기 어려운 느낌이든다.<br />
아무래도 익숙해지려면 실제 내부 프로그램도 많이 봐야할 것 같고<br />
<code class="language-plaintext highlighter-rouge">Backpressure</code>라든가 <code class="language-plaintext highlighter-rouge">Non-Blocking</code>처리 라든가<br />
정확히 어떻게 코드로 동작하는지 개념과 흐름 파악이 필요할 것 같다.<br />
또한 Operator들도 많이 알아야할 것같다..ㅠㅠ</p>

<p>우선 아직 Spring MVC도 애플리케이션 구현 경험이 거의 없다보니까<br />
눈앞에 있는 기술부터 체득과 습득을하고 이후로 나아가보려한다.</p>

<p>이렇게 수박 겉 핥기인 WebFlux는 여기서 끝 !</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 짜장밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[12월이 시작되었다 ! 올해도 이렇게 시간이 빨리가는 구나 점점 더빨리가는 시간이 조금 야속하다.]]></summary></entry><entry><title type="html">TIL) Spring WebFlux Project Reactor</title><link href="http://localhost:4000/til/2022/11/30/til.html" rel="alternate" type="text/html" title="TIL) Spring WebFlux Project Reactor" /><published>2022-11-30T00:00:00+09:00</published><updated>2022-11-30T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/30/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/30/til.html"><![CDATA[<p>어느덧 11월의 마지막이 다가왔다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gP-V3f78gzYoHWe4BsoYdT3mBXrBTI7YNQJSLWZStK3WDB2VvN0qjzA3GflB1maNYmMaDLa5a3SAqzjBTNSgMxDF3ee=w1185-h921" alt="image" class="align-left" style="max-width: 50%" /></p>

<p>코딩 공부를 시작한게 8월인데 벌써 4개월이 지났다니<br />
믿기지 않는다.. 그만큼 많이 발전도 했지만<br />
아직도 많이 부족하다고 느끼기에 시간이 더욱더 간절하게 느껴진다.</p>

<p>오늘은 어제배운 Reactive 프로그램의 스트림즈의 구현체인<br />
Project Reactor에 대해 공부해보는 시간이다.</p>

<hr />

<h2 id="project-reactor">Project Reactor</h2>

<h3 id="project-reactor-란">Project Reactor 란?</h3>

<p><a href="https://projectreactor.io/">Project Reactor</a> 줄여서 Reactor라고 부른다. 리액티브 스트림즈의 구현체 중 하나로써<br />
Reactive 기반 Spring Web Application을 만들때 사용하는 핵심기술이다.</p>

<p>리액티브 프로그래밍은 Non-Blocking통신을 지원하며, Non-Blocking이 핵심적인 특징이다. <br />
간단하게 얘기하지면 요청 쓰레드가 차단이 되지 않는다 정도로 알면될 것 같다.</p>

<p>Publisher 타입으로 Mono[0|1]와 Flux[N]이라는 두 가지 타입을 제공한다.</p>

<p><br /></p>

<h3 id="marble-diagram">Marble Diagram</h3>

<p><strong>1). Mono</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNhCC3gMyVY9U2tYfXL1Ugml0_Fey_7uS4w1fYYfafR-twQzcbefQVQDrr0dAmTnmofFKkHwbcguv_pVuYEj0mmm6Hn3g=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>Marble Diagram으로 동그란것 하나를 데이터라 생각하면 쉬울 것 같다.</p>

<p>흐름 순서는 위에 다이어그램을 보면 이해가 쉬울 것 같다. <br />
Mono 시퀀스가 시작되고 데이터를 emit한다. Mono는 Mono[0|1] 즉, 0건 또는 1의<br />
데이터만 emit 하는 Reactor 타입이기 때문에 위와 같이 표현되었다.</p>

<p>그리고 Mono 시퀀스가 종료되고, Operator를 통해 데이터가 가공된다.<br />
그리고 Downstream의 타임라인으로 전달되어<br />
정의되어있는 해당 시퀀스를 실행하고 종료하게 되어진다.</p>

<p>코드로 보면 이렇게 볼 수 있을 것 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Mono</span>
                <span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">"Hello, Reactive"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">())</span>
                <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span>
                        <span class="n">message</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">),</span>
                        <span class="n">error</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">error</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()),</span>
                        <span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Complete"</span><span class="o">)</span>
                <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 출력</span>
<span class="no">HELLO</span><span class="o">,</span> <span class="no">REACTIVE</span>
<span class="nc">Complete</span>
</code></pre></div></div>
<p>위에 코드를 보면 <code class="language-plaintext highlighter-rouge">.map();</code>메서드가 Operator의 역할이다.<br />
<code class="language-plaintext highlighter-rouge">just();</code>에서 데이터를 emit한 후 <code class="language-plaintext highlighter-rouge">.UpperCase();</code> 대문자로 변환시키고 있다.<br />
그리고 최종적으로 Downstream쪽에서 데이터를 전달해<br />
<code class="language-plaintext highlighter-rouge">.subscribe();</code> 메서드로 전달받은 데이터를 처리해준 모습을 볼 수 있다.<br />
해당 상황은 우선 Error가 발생하지 않은 경우를 테스트 해보았다.</p>

<p>이제 만약 Downstream에서 Error가 발생했을 경우<br />
비정상적인 종료를 한번 확인해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Mono</span>
                <span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">"Hello, Reactive"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">))</span>
                <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span>
                        <span class="n">message</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">[</span><span class="mi">3</span><span class="o">]),</span>
                        <span class="n">error</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"! Error : "</span><span class="o">+</span> <span class="n">error</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()),</span>
                        <span class="o">()</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Complete"</span><span class="o">)</span>
                <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 출력</span>
<span class="o">!</span> <span class="nc">Error</span> <span class="o">:</span> <span class="nc">Index</span> <span class="mi">3</span> <span class="n">out</span> <span class="n">of</span> <span class="n">bounds</span> <span class="k">for</span> <span class="n">length</span> <span class="mi">2</span>
<span class="nc">Complete</span>
</code></pre></div></div>
<p>위에 예제 코드를 보면 단순히 String을 배열로 쪼개서<br />
Downstream으로 넘겨주는 코드이다.<br />
받았을때 공백기준으로 나눴기때문에 배열방에는 2개만 존재하고<br />
범위를 벗어나는 데이터를 조회하려고 명령을 내렸을 경우<br />
error를 처리해주는 메서드를 만들어 표현할 수 있다.</p>

<p><br /></p>

<p><strong>2). Flux</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNa2bYw_449zSbZ1QB7bHvPkp-iEamCVUmFSVFMs6xh0U2LZ9zmFCflb1hwKNBcdZqL4xl-pGtpMAa8KWzt3xKEWHHZHA=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>기본 적인 흐름은 Mono와 전부 동일하다.<br />
다른 점은 처리해야할 데이터가 Flux[N]개로<br />
여러개의 데이터를 emit할 수 있는 모습을 다이어그램에서 볼 수 있다.</p>

<p><br /></p>

<h3 id="scheduler">Scheduler</h3>

<p>Reactor에서 Scheduler는 쓰레드를 관리하는 관리자 역할이다.<br />
즉, Reactor Sequence 상에서 처리되는 동작들을 하나 이상의 쓰레드에서<br />
동작하도록 별도의 쓰레드를 제공해준다고 생각하면 쉬울 것 같다.</p>

<p>Reactor는 기본적으로 Non-Blocking 통신을 위한 비동프로그래밍을 위해<br />
탄생했기 때문에 여러 쓰레드를 손쉽게 관리해주는 Scheduler의 역할이 중요하다 할 수 있다.</p>

<p>간단한 코드로 비교예제를 살펴보자
먼저 Scheduler를 추가하지 않았을 경우를 살펴보자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Scheduler를 추가하지 않았을 경우</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SchedulersExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Flux</span>
            <span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>
            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# onNext: {}"</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>20:51:36.461 [main] DEBUG reactor.util.Loggers - Using Slf4j logging framework
20:51:36.481 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 4
20:51:36.483 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 8
20:51:36.483 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 12
20:51:36.483 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 16
20:51:36.483 [main] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 20
</code></pre></div></div>
<p>해당 프로그램을 실행시켰을때 콘솔에서 확인할 수 있는 로그이다.<br />
Scheduler를 추가하지 않고 기존과 동일하게 사용하였고<br />
여기서 알 수 있는 점은 <code class="language-plaintext highlighter-rouge">[main]</code>쓰레드를 사용하고 있다는 점이다.</p>

<p><br /></p>

<p>Scheduler를 적용한 코드를 확인해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Scheduler를 사용하였을 경우</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SchedulersExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Flux</span>
                <span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
                <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="nc">Schedulers</span><span class="o">.</span><span class="na">boundedElastic</span><span class="o">())</span>
                <span class="o">.</span><span class="na">doOnSubscribe</span><span class="o">(</span><span class="n">subscription</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# doOnSubscribe"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>
                <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# onNext: {}"</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>

        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100L</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>20:53:19.592 [main] DEBUG reactor.util.Loggers - Using Slf4j logging framework
20:53:19.623 [main] INFO com.codestates.example.schedulers.SchedulersExample02 - # doOnSubscribe
20:53:19.630 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 4
20:53:19.631 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 8
20:53:19.631 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 12
20:53:19.631 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 16
20:53:19.631 [boundedElastic-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 20
</code></pre></div></div>

<p>위에 코드는 Scheduler를 사용하였을때의 코드이다.<br />
첫번째 코드와 차이점은 <code class="language-plaintext highlighter-rouge">subscribeOn();</code>, <code class="language-plaintext highlighter-rouge">doOnSubscribe();</code>  <br />
Operator를 추가해서 사용을 하고 있다는 점이다.</p>

<p><code class="language-plaintext highlighter-rouge">subscribeOn();</code> Operator는 <code class="language-plaintext highlighter-rouge">Schedulers.boundedElastic()</code>와 같은<br />
Scheduler를 지정하면 구독 직후에 실행되는 쓰레드가 main 쓰레드에서 해당 쓰레드로 변경된다.</p>

<p><code class="language-plaintext highlighter-rouge">doOnSubscribe();</code>Operator는 구독 발생 직후에 Trigger되는 Operator로<br />
구독 직후에 어떤 동작을 수행하고 싶을때 사용하는 Operator이다.</p>

<p>출력 결과를 보면 알 수 있듯이 <code class="language-plaintext highlighter-rouge">[main]</code>쓰레드에서 진행 중이던 흐름이<br />
<code class="language-plaintext highlighter-rouge">[boundedElastic-1]</code> 쓰레드로 변경된 모습을 로그로 확인해 볼 수 있다.</p>

<p><br /></p>

<p>마지막으로 예제하나만 더보고 넘어가자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SchedulersExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">InterruptedException</span> <span class="o">{</span>
        <span class="nc">Flux</span>
            <span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
            <span class="o">.</span><span class="na">subscribeOn</span><span class="o">(</span><span class="nc">Schedulers</span><span class="o">.</span><span class="na">boundedElastic</span><span class="o">())</span>
            <span class="o">.</span><span class="na">doOnSubscribe</span><span class="o">(</span><span class="n">subscription</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# doOnSubscribe"</span><span class="o">))</span>

            <span class="o">.</span><span class="na">publishOn</span><span class="o">(</span><span class="nc">Schedulers</span><span class="o">.</span><span class="na">parallel</span><span class="o">())</span>  <span class="c1">// (1)</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="o">.</span><span class="na">doOnNext</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# filter doOnNext"</span><span class="o">))</span>  <span class="c1">// (2)</span>

            <span class="o">.</span><span class="na">publishOn</span><span class="o">(</span><span class="nc">Schedulers</span><span class="o">.</span><span class="na">parallel</span><span class="o">())</span>    <span class="c1">// (3)</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span>
            <span class="o">.</span><span class="na">doOnNext</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# map doOnNext"</span><span class="o">))</span> <span class="c1">// (4)</span>

            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">data</span> <span class="o">-&gt;</span> <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"# onNext: {}"</span><span class="o">,</span> <span class="n">data</span><span class="o">));</span>

        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="mi">100L</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>21:03:32.441 [main] INFO com.codestates.example.schedulers.SchedulersExample - # doOnSubscribe
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-2] INFO com.codestates.example.schedulers.SchedulersExample - # filter doOnNext
21:03:32.448 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 4
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 8
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 12
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 16
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # map doOnNext
21:03:32.451 [parallel-1] INFO com.codestates.example.schedulers.SchedulersExample - # onNext: 20
</code></pre></div></div>
<p>해당코드가 이전과 다른점은 <code class="language-plaintext highlighter-rouge">publishOn();</code>이라는 Operator가 추가된 예제이다.<br />
<code class="language-plaintext highlighter-rouge">publishOn();</code>은 <code class="language-plaintext highlighter-rouge">publishOn();</code> 기준으로 Downstream쪽 쓰레드가<br />
<code class="language-plaintext highlighter-rouge">publishOn();</code>에서 Scheduler로 지정한 쓰레드로 변경이된다. (Schedulers.parallel())</p>

<p><code class="language-plaintext highlighter-rouge">doOnNext();</code> Operator는 바로앞에 위치한 Operaotr가 실행될 때<br />
Trigger되는 Operator이다. 위에선 filter와 map을 구분짓기위해 사용했다.</p>

<p>콘솔로그에서 볼 수 있듯이 <code class="language-plaintext highlighter-rouge">[main]</code>쓰레드에서 <code class="language-plaintext highlighter-rouge">[parallel-2]</code>로 쓰레드가 변경되었고<br />
<code class="language-plaintext highlighter-rouge">[parallel-1]</code>로 변경된 모습을 볼 수 있다. 내부적으로 <code class="language-plaintext highlighter-rouge">[parallel]</code> 쓰레드의 순서는 보장되지 않는다.</p>

<p><br /></p>

<h3 id="operator">Operator</h3>

<p>이전부터 계속 Operator를 사용한는 코드들을 보았다.<br />
그만큼 Reactor와 Operator를 뗄래야 뗄 수 없는 관계이다.</p>

<p>Operator 관련해서는 사실 지원하는 종류가 너무 많기 때문에<br />
부가적인 Advance 공부는 추후에 해봐야할 것 같고<br />
목록만 우선 정리 해놓으려고 한다.</p>

<p>그 중에서 자주사용하고 중요한 것 들을 <span style="color:#CC00CC"><strong>보라색</strong></span>으로 표시해둔다.</p>

<p>✅ <strong>새로운 Sequence를 생성하고자 할 경우 (Creating)</strong></p>
<ul>
  <li>just()</li>
  <li><span style="color:#CC00CC"><strong>fromStream()</strong></span></li>
  <li><span style="color:#CC00CC"><strong>fromIterable()</strong></span></li>
  <li>fromArray()</li>
  <li>range()</li>
  <li>interval()</li>
  <li>empty()</li>
  <li>never</li>
  <li>defer()</li>
  <li>using()</li>
  <li>generate()</li>
  <li><span style="color:#CC00CC"><strong>create()</strong></span></li>
</ul>

<p>✅ <strong>기존 Sequence에서 변환작업이 필요한 경우 (Transforming)</strong></p>
<ul>
  <li><span style="color:#CC00CC"><strong>map()</strong></span></li>
  <li><span style="color:#CC00CC"><strong>flatMap()</strong></span></li>
  <li><span style="color:#CC00CC"><strong>concat()</strong></span></li>
  <li>collectList()</li>
  <li>collectMap()</li>
  <li>merge()</li>
  <li><span style="color:#CC00CC"><strong>zip()</strong></span></li>
  <li>the()</li>
  <li>switchIfEmpty</li>
  <li>and()</li>
  <li>when()</li>
</ul>

<p>✅ <strong>Sequence에서 내부의 동작을 확인하고자 할 경우 (Peeking)</strong></p>
<ul>
  <li>doOnSubscribe</li>
  <li><span style="color:#CC00CC"><strong>doOnNext()</strong></span></li>
  <li>doOnError()</li>
  <li>doOnCancel()</li>
  <li>doFirst()</li>
  <li>doOnRequest()</li>
  <li>doOnTerminate()</li>
  <li>doAfterTerminate()</li>
  <li>doOnEach()</li>
  <li>doFinally()</li>
  <li><span style="color:#CC00CC"><strong>log()</strong></span></li>
</ul>

<p>✅ <strong>Sequence에서 데이터를 걸러야할 경우 (Filtering)</strong></p>
<ul>
  <li><span style="color:#CC00CC"><strong>filter()</strong></span></li>
  <li>ignoreElements()</li>
  <li>distinct()</li>
  <li><span style="color:#CC00CC"><strong>take()</strong></span></li>
  <li>next()</li>
  <li>skip()</li>
  <li>sample()</li>
  <li>single()</li>
</ul>

<p>✅ <strong>에러를 처리하고자할 경우 (Handling errors)</strong></p>
<ul>
  <li><span style="color:#CC00CC"><strong>error()</strong></span></li>
  <li><span style="color:#CC00CC"><strong>timeout()</strong></span></li>
  <li>onErrorReturn()</li>
  <li>onErrorResume()</li>
  <li>onErrorMap()</li>
  <li>doFinally()</li>
  <li><span style="color:#CC00CC"><strong>retry()</strong></span></li>
</ul>

<p><br /></p>

<hr />

<p>오늘은 어제보다 조금더 Spring WebFlux에 대해 알아보았고<br />
사실 아직 Spring MVC 어떻게 대체해서 사용해야할지 크게<br />
감이 잡히지는 않는다. 뭔가 Stream API와 비슷한 느낌이 들어 친숙하긴하지만<br />
개념들이 많이 다른 것 처럼 느껴져서 어렵고 생소했다.</p>

<p>내일 우리가 구현했던 Spring MVC 대신<br />
Spring WebFlux 기술을 활용해서 한번 적용해보자</p>

<p>오늘 공부는 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 제육볶음, 김치찌개, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[어느덧 11월의 마지막이 다가왔다.]]></summary></entry><entry><title type="html">TIL) Spring WebFlux Reactive 프로그래밍</title><link href="http://localhost:4000/til/2022/11/29/til.html" rel="alternate" type="text/html" title="TIL) Spring WebFlux Reactive 프로그래밍" /><published>2022-11-29T00:00:00+09:00</published><updated>2022-11-29T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/29/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/29/til.html"><![CDATA[<p>오늘은 리액티브 프로그래밍에 대해 공부해보는 날이다.<br />
아마 깊은 내용은 다루지 않고, 간단한 지식들만 공부 할 것 같다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOLvm3Tcr7jOo11hO8F_VEjXkI7bN97rGtSVrf1Ti3xqf3ZQe4jQOr1kpMnycZ3ZuOxgeCDU8X3g9guLl8uMN_t1zRm8Q=w1185-h864" alt="image" class="align-left" style="max-width: 30%" /></p>

<p>우리는 Spring MVC 기반의 애플리케이션을 사용하고있는데<br />
최신 기술로 Spring Reactive가 나와서 후에 어떻게<br />
바뀔지는 아무도 모르니 Spring MVC 이해를 마친 후<br />
해당 기술에 대해 깊게 공부해볼 필요가 있을 것 같다.</p>

<hr />

<h3 id="리액티브-프로그래밍이란">리액티브 프로그래밍이란?</h3>

<p>기존의 명령형 프로그래밍 방식과 달리 선언형 프로그래밍 방식을 사용한다.<br />
클라이언트의 요청에 반응을 잘하는 시스템을 의미한다.<br />
리액티브 시스템 관점에서의 반응은 쓰레드의 Non-Blocking과 관련이 있다.<br />
클라이언트의 요청에 대한 대기 시간을 최소화 할 수 있도록<br />
요청 쓰레드가 차단되지 않게 함으로써, 클라이언트에게 즉각적으로<br />
반응하도록 구성된 시스템이라고 볼 수 있다.</p>

<p>리액티브 시스템의 특징을 알아보자</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMC17N9996c0CAWJ2CXGoDaByldzZ7UTKzUtpNVQbGGwNbemzqeKFNeAeqE8q_mHlA_5DEs1EUS4hO70psikE0WUvyOhg=w1554-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>1). MEANS<br />
-. 리액티브 시스템에서 사용하는 커뮤니케이션 수단</p>
<ul>
  <li>Message Driven  <br />
-. 리액티브 시스템에서는 메세지 기반 통신을 통해 여러 시스템 간에 느슨한 결합을 유지한다.</li>
</ul>

<p>2). FORM<br />
-. 메세지 기반 통신을 통해 리액티브 시스템이 어떤 특성을 가지는 구조로 형성되는지를 의미</p>
<ul>
  <li>Elastic<br />
-. 시스템으로 들어오는 요청량이 적거나 많거나에 상관없이 일정한 응답성을 유지하는 것</li>
  <li>Resillient<br />
-. 시스템의 일부분에 장애가 발생하더라도 응답성을 유지하는 것</li>
</ul>

<p>3). VALUE<br />
-. 리액티브 시스템의 핵심 가치가 무엇인지를 표현하는 영역</p>
<ul>
  <li>Responsive<br />
-. 리액티브 시스템은 클라이언트의 요청에 즉각적으로 응답할 수 있어야함을 의미</li>
  <li>Maintainable<br />
-. 클라이언트의 요청에 대한 즉각적인 응답이 지속가능해야함을 의미</li>
  <li>Extensible<br />
-. 클라이언트의 요청에 대한 처리량을 자동으로 확장하고 축소할 수 있어야함을 의미</li>
</ul>

<p><br /></p>

<h3 id="리액티브-스트림즈란">리액티브 스트림즈란?</h3>
<p>리액티브 프로그래밍을 위한 표준사양이다.<br />
리액티브 스트림즈에서 사양으로 정의된 구성요소를 알아보자</p>

<p><strong>1). Publisher 인터페이스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Publisher</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">subscribe</span><span class="o">(</span><span class="nc">Subscriber</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-. 데이터 소스로 부터 데이터를 내보내는(emit) 역할을 한다. <br />
-. <code class="language-plaintext highlighter-rouge">subscribe();</code>추상 메서드를 포함하고 있고, 매개변수로 전달되는 Subscriberrk<br />
Publisher로부터 내보내진 데이터를 소비하는 역할을 한다.</p>

<p><br /></p>

<p><strong>2). Subscriber 인터페이스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onSubscribe</span><span class="o">(</span><span class="nc">Subscription</span> <span class="n">s</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onNext</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onError</span><span class="o">(</span><span class="nc">Throwable</span> <span class="n">t</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onComplete</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-. Publisher로 부터 내보내진 데이터를 소비하는 역할을 한다.</p>

<p>-. <code class="language-plaintext highlighter-rouge">onSubscribe(Subscription s);</code></p>
<ul>
  <li>구독이 시작되는 시점에 호출됨.</li>
  <li>Pusblisher에게 요청할 데이터의 개수를 지정하거나 구독해지 처리가 가능</li>
</ul>

<p>-. <code class="language-plaintext highlighter-rouge">onNext(T t)</code></p>
<ul>
  <li>Publisher가 데이터를 emit할 때 호출됨</li>
  <li>emti된 데이터를 전달 받아서 소비할 수 있다.</li>
</ul>

<p>-. <code class="language-plaintext highlighter-rouge">onError(Throwable t)</code></p>
<ul>
  <li>Publisher로부터 emit된 데이터가 Subscriber에게 전달되는 과정에서<br />
에러가 발생할 경우에 호출된다.</li>
</ul>

<p>-. <code class="language-plaintext highlighter-rouge">onComplete()</code></p>
<ul>
  <li>Publisher가 데이터를 emit하는 과정이 종료될 경우 호출됨</li>
  <li>emit이 정상적으로 완료된 후, 처리해야 될 작업이 있다면 해당 메서드 내에서 수행할 수 있다.</li>
</ul>

<p><br /></p>

<p><strong>3). Subscription 인터페이스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Subscription</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">request</span><span class="o">(</span><span class="kt">long</span> <span class="n">n</span><span class="o">);</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancel</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-. Subscriber의 구독 자체를 표현한 인터페이스이다.
-. <code class="language-plaintext highlighter-rouge">request(long n)</code></p>
<ul>
  <li>Publisher가 emit하는 데이터의 개수를 요청</li>
</ul>

<p>-. <code class="language-plaintext highlighter-rouge">cancel()</code></p>
<ul>
  <li>구독을 해지하는 역할을한다. 구독해지가 발생하면 Publisher는 더이상 데이터를 Emit하지 않는다.</li>
</ul>

<p><br /></p>

<p><strong>4). Processor 인터페이스</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Processor</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Subscriber</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;,</span> <span class="nc">Publisher</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="o">{</span>
<span class="o">}</span>
</code></pre></div></div>
<p>-. 별도로 구현해야 되는 추상메서드는 없다.<br />
-. Publisher와 Subscriber의 역할을 동시에 할 수 있는 특징을 가지고 있다.</p>

<p><br /></p>

<p><strong>5). 구현체들</strong></p>
<ul>
  <li>Project Reactor</li>
  <li>RxJava</li>
  <li>Java Flow API</li>
</ul>

<p>코드로 알아보기</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Publisher의 역할</span>
        <span class="nc">Mono</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">mono</span> <span class="o">=</span> <span class="nc">Mono</span><span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">"Hello, Reactive"</span><span class="o">);</span>

        <span class="c1">// Subscriber의 역할</span>
        <span class="n">mono</span><span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">message</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// 출력</span>
<span class="nc">Hello</span><span class="o">,</span> <span class="nc">Reactive</span>
</code></pre></div></div>
<p>리액티브 스트림즈 구현체인 Project Reactor을 통해 출력하고 있는 모습이다.<br />
<code class="language-plaintext highlighter-rouge">Mono</code>의 역할이 Publisher의 역할이고<br />
Subscriber는 Publisher가 emit한 데이터를 전달 받아서<br />
소비하는 역할이라고 위에서 공부했었다.</p>

<p>Subscriber 역할을 하는 것은 <code class="language-plaintext highlighter-rouge">mono.subscribe();</code> 메서드이고<br />
내부에 정의된 람다 표현식을 사용하고 있다.</p>

<p>기존에 우리가 사용했던 Stream과 동일하게 메서드 체인형식으로 구성도 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Mono</span>
            <span class="o">.</span><span class="na">just</span><span class="o">(</span><span class="s">"Hello, Reactive"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="n">message</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">message</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 출력</span>
<span class="nc">Hello</span><span class="o">,</span> <span class="nc">Reactive</span>
</code></pre></div></div>

<p>다른 형식의 예제를 알아보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReactiveGlossaryExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Flux</span>
            <span class="o">.</span><span class="na">fromIterable</span><span class="o">(</span><span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">6</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">8</span><span class="o">,</span> <span class="mi">11</span><span class="o">))</span>
            <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">number</span> <span class="o">-&gt;</span> <span class="n">number</span> <span class="o">&gt;</span> <span class="mi">4</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">number</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">))</span>
            <span class="o">.</span><span class="na">reduce</span><span class="o">((</span><span class="n">n1</span><span class="o">,</span> <span class="n">n2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="o">)</span>
            <span class="o">.</span><span class="na">subscribe</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 출력</span>
<span class="mi">14</span>
</code></pre></div></div>
<p><strong>Publisher -&gt;</strong> <code class="language-plaintext highlighter-rouge">Flux</code>가 Pusblisher 이다.</p>

<p><strong>Emit -&gt;</strong> <code class="language-plaintext highlighter-rouge">Flux</code>가 데이터를 내보내는 것을 가르킴</p>

<p><strong>Subscriber -&gt;</strong> <code class="language-plaintext highlighter-rouge">Flux</code>가 emit한 데이터를 전달 받아서 소비하는 주체 <br />
즉, <code class="language-plaintext highlighter-rouge">System.out::println</code> 부분이 Subscriber에 해당한다.</p>

<p><strong>Subscribe -&gt;</strong> <code class="language-plaintext highlighter-rouge">subscribe</code> 메서드를 호출하면 구독을 하는 것이다.</p>

<p><strong>Signal -&gt;</strong> Publisher가 발생시키는 이벤트를 의미한다.</p>

<p><strong>Operator -&gt;</strong> 어떤 동작을 수행하는 메서드를 의미한다.<br />
<code class="language-plaintext highlighter-rouge">fromIterable()</code>, <code class="language-plaintext highlighter-rouge">filter()</code>, <code class="language-plaintext highlighter-rouge">reduce()</code>등 하나하나들 Operator이라 한다.</p>

<p><strong>Sequence -&gt;</strong> Operator 체인으로 표현되는 데이터의 흐름을 의미한다.<br />
해당 코드에선 코드자체를 하나의 Sequence라고 보면된다.</p>

<p><strong>Upstream -&gt;</strong> Operator 기준으로 위쪽 Sequence 일부를 Upstream이라함<br />
<strong>Downstream -&gt;</strong> Operator 기준으로 아래쪽 Sequence 일부를 Downstream이라함</p>

<p><br /></p>

<hr />

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 제육볶음, 김치찌개, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[오늘은 리액티브 프로그래밍에 대해 공부해보는 날이다. 아마 깊은 내용은 다루지 않고, 간단한 지식들만 공부 할 것 같다.]]></summary></entry><entry><title type="html">TIL) Spring Security, JWT , OAuth 2 인증</title><link href="http://localhost:4000/til/2022/11/28/til.html" rel="alternate" type="text/html" title="TIL) Spring Security, JWT , OAuth 2 인증" /><published>2022-11-28T00:00:00+09:00</published><updated>2022-11-28T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/28/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/28/til.html"><![CDATA[<p>다시 시작된 월요일!!</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMbQN6-pRfE1nN6vp5n5bBxnzsRqAV9BVPdgdDtWEnmszNdkYWeBFUUR3XTJDQMFuQ4R9pAKdzVK7cB7d9feDMhlllDAQ=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>드디어 프로젝트를 해야할 시간이 다가오기 시작한다.</p>

<p>현재까지 배운 기술을 이용해 무언가 만들어본다는게 너무 설레고 기대된다.<br />
여태까지 배운 기술들에 대한 내용 중 크게 이해가 안되는 부분은 없었고<br />
Advance한 공부가 필요한 내용들이 많았다.</p>

<p>프로젝트를 기회로 깊이 파헤쳐보는 기회가 올 것 같아 너무나 기대된다.<br />
오늘은 OAuth2에 대한 마지막 시간이다.</p>

<p>그 동안 배운 Spring Security와 JWT, OAuth2를<br />
전부 이용해서 인증과 권한부여 코드를 작성해보는 것이다.</p>

<hr />

<h2 id="oauth2-인증-하기">OAuth2 인증 하기</h2>

<p>저번주에 배웠던 이론을 토대로 <br />
OAuth2 인증을 실제로 적용해 보자</p>

<p>우선 Frontend와 Backend가 분리되어있는<br />
CSR 방식의 애플리케이션에서 Google OAuth2 인증을 기준으로<br />
적용해볼 생각이다. Frontend 쪽 애플리케이션은<br />
Apache 웹 서버를 이용해 테스트 할 것이다.</p>

<p>그리고 저번주에 사전에 준비했던 <a href="https://console.cloud.google.com/apis">구글 API 콘솔</a> 애플리케이션을<br />
미리 만들어두어야 테스트가 가능하다.</p>

<p><strong>1). 구글 OAuth2 로그인 인증하기</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPYCl2OOAe2LzCPgn7AQnO8UlsiBuNOeltWAqxTW2abHw4z1QBzsc0U4uLd_c6l4a6Aw6wBcn-AxXgMyQCDUjStijQcAg=w1299-h920" alt="image" class="align-left" style="max-width: 120%" /></p>

<p>이제 가장 중요한 처리 흐름에 대해 이해해야한다.<br />
현재 빨간색으로 되어있는 부분은 우리가 구현해줘야하는 부분이고<br />
파란색 부분은 구현하지 않아도 Spring Security에서 처리해준다.</p>

<p>처음으로 (1)번 로그인 링크를 Frontend 서버에서 클릭을하면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNEUrb0C3R5OQ64jxKBOQ2RZmo0stTpPeSGsr_TD-oZb_u8a1K9qBDeExZ7GR8XUZ8quM1L1S9_A3lwrcxbQlf-PyVTZg=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /><br />
(테스트 용도로 Apache 웹서버에 해당 html을 만들었다.)</p>

<p>(2)번과 같은 형식의 인증 URI로 request 전송을 해줘야한다.<br />
<code class="language-plaintext highlighter-rouge">OAuth2LoginAuthenticationFilter</code> 클래스가 이부분을 처리해준다.<br />
해당 클래스도 <code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code>와 같이<br />
<code class="language-plaintext highlighter-rouge">AbstractAuthenticationProcessingFilter</code> 추상 클래스를 상속하고 있다.<br />
즉 필터가 시작되면 추상클래스에 정의된 <code class="language-plaintext highlighter-rouge">doFilter();</code>메서드를 실행하는 것이다.</p>

<p>그리고 (3)번에서 Google을 로그인 화면을 요청하는 URI로 리다이렉트한다.<br />
또한 Authorization Server가 Backend 애플리케이션 쪽으로<br />
Authorization Code를 전송할 Redirect URI(<code class="language-plaintext highlighter-rouge">http://localhost:8080/login/oauth2/code/google</code>)를<br />
쿼리 파리미터로 전달해준다. Redirect URI는 Spring Security가 내부적으로 제공해준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPPdDAGDY39IwFa0FL10w8N0wMvZKXU62PSF8IeM9KDaMb5N48amtymQFMn9uQ8JpkmTFtCWgUkev_Xt-7gr4iPANG1-g=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>즉, <code class="language-plaintext highlighter-rouge">https://accounts.google.com/o/oauth2/v2/auth/oauthchooseaccount?redirect_uri=http://localhost:8080/login/oauth2/code/google</code><br />
와 같은 형식으로 리다이렉션해 (4)번인 로그인 화면을 보여준다. 이외에 쿼리들도 있지만 따로 적지는 않겠다.</p>

<p>그러면 이제 구글 로그인 화면이 Resource Owner한테 보일테니<br />
(5)번 로그인을 해주면 된다. 그렇게 되면 Backend 애플리케이션 서버에서<br />
위에서 받은 Redirect URI로 Authorization Code를 요청하고<br />
그럼과 같은 순서대로 Access Token을 받고, Resource Server에<br />
요청하여 데이터를 접근할 수 있게되는 것이다.</p>

<p>그리고 마지막으로 전송받으면 로그인 완료 Redirect를 진행할<br />
URI를 만들어 Frontend 애플리케이션으로 던져주면<br />
OAuth2 로그인 인증 구현에는 끝난다.<br />
(JWT 토큰도 만들어 함께 보낸다)</p>

<p><br /></p>

<p>코드로 한번 살펴보자</p>

<p>우선 JWT를 만들어주는 클래스를 먼저 작성해보자<br />
이전에 JWT 코드와 동일하다</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenizer</span> <span class="o">{</span>

    <span class="nd">@Getter</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jwt.key.secret}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">securityKey</span><span class="o">;</span>

    <span class="nd">@Getter</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jwt.access-token-expiration-minutes}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">accessTokenExpirationMinutes</span><span class="o">;</span>

    <span class="nd">@Getter</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jwt.refresh-token-expiration-minutes}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">refreshTokenExpirationMinutes</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">encodeBase64SecretKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">securityKey</span><span class="o">){</span>
        <span class="k">return</span> <span class="nc">Encoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">securityKey</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">generateAccessToken</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span> <span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span><span class="o">,</span> <span class="nc">String</span> <span class="n">subject</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiration</span><span class="o">,</span> <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>

        <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKeyFromBase64EncodedKey</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">subject</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setClaims</span><span class="o">(</span><span class="n">claims</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setIssuedAt</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getTime</span><span class="o">())</span>
                <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="n">expiration</span><span class="o">)</span>
                <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
                <span class="o">.</span><span class="na">compact</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">generateRefreshToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">subject</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiration</span><span class="o">,</span> <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>

        <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKeyFromBase64EncodedKey</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">subject</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setIssuedAt</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getTime</span><span class="o">())</span>
                <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="n">expiration</span><span class="o">)</span>
                <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
                <span class="o">.</span><span class="na">compact</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Jws</span><span class="o">&lt;</span><span class="nc">Claims</span><span class="o">&gt;</span> <span class="nf">getClaims</span><span class="o">(</span><span class="nc">String</span> <span class="n">jws</span><span class="o">,</span> <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>

        <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKeyFromBase64EncodedKey</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="nc">Jws</span><span class="o">&lt;</span><span class="nc">Claims</span><span class="o">&gt;</span> <span class="n">claimsJws</span> <span class="o">=</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">parserBuilder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">setSigningKey</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">()</span>
                <span class="o">.</span><span class="na">parseClaimsJws</span><span class="o">(</span><span class="n">jws</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">claimsJws</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Date</span> <span class="nf">getTokenExpiration</span><span class="o">(</span><span class="kt">int</span> <span class="n">expirationMinutes</span><span class="o">){</span>
        <span class="nc">Calendar</span> <span class="n">instance</span> <span class="o">=</span> <span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
        <span class="n">instance</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">MINUTE</span><span class="o">,</span> <span class="n">expirationMinutes</span><span class="o">);</span>
        <span class="nc">Date</span> <span class="n">expiration</span> <span class="o">=</span> <span class="n">instance</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>

        <span class="k">return</span> <span class="n">expiration</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Key</span> <span class="nf">getKeyFromBase64EncodedKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>
        <span class="kt">byte</span><span class="o">[]</span> <span class="n">keyBytes</span> <span class="o">=</span> <span class="nc">Decoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">Keys</span><span class="o">.</span><span class="na">hmacShaKeyFor</span><span class="o">(</span><span class="n">keyBytes</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>달라진점은 없고, 후에 JWT를 만들때 DI받아 사용해주면 된다.</p>

<p><br /></p>

<p>두번째로는 SecurityFilterChain을 구성해보자</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableWebSecurity</span><span class="o">(</span><span class="n">debug</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfigurationV2</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SecurityConfigurationV2</span><span class="o">(</span><span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">,</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">,</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenizer</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authorityUtils</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span>
                <span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">frameOptions</span><span class="o">().</span><span class="na">sameOrigin</span><span class="o">()</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                <span class="o">.</span><span class="na">cors</span><span class="o">(</span><span class="n">withDefaults</span><span class="o">())</span>
                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">().</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="nc">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                <span class="o">.</span><span class="na">httpBasic</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
                <span class="o">.</span><span class="na">authenticationEntryPoint</span><span class="o">(</span><span class="k">new</span> <span class="nc">MemberAuthenticationEntryPoint</span><span class="o">())</span>
                <span class="o">.</span><span class="na">accessDeniedHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">MemberAccessDeniedHandler</span><span class="o">())</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="nc">CustomFilterConfigurer</span><span class="o">())</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">(</span><span class="n">authorize</span> <span class="o">-&gt;</span> <span class="n">authorize</span> <span class="c1">// url authorization 전체 추가</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">"/*/coffees"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">PATCH</span><span class="o">,</span> <span class="s">"/*/coffees/**"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">"/*/coffees/**"</span><span class="o">).</span><span class="na">hasAnyRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">,</span> <span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">"/*/coffees"</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">,</span> <span class="s">"/*/coffees"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">"/*/orders"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">PATCH</span><span class="o">,</span> <span class="s">"/*/orders"</span><span class="o">).</span><span class="na">hasAnyRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">,</span> <span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">"/*/orders/**"</span><span class="o">).</span><span class="na">hasAnyRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">,</span> <span class="s">"ADMIN"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">,</span> <span class="s">"/*/orders"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">)</span>
                                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">permitAll</span><span class="o">()</span>
                <span class="o">)</span>
                <span class="o">.</span><span class="na">oauth2Login</span><span class="o">(</span><span class="n">oauth2</span> <span class="o">-&gt;</span> <span class="n">oauth2</span>
                        <span class="o">.</span><span class="na">successHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">OAuth2MemberSuccessHandler</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">,</span> <span class="n">authorityUtils</span><span class="o">,</span> <span class="n">memberService</span><span class="o">))</span>
                <span class="o">);</span>

        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="nc">CorsConfigurationSource</span> <span class="nf">corsConfigurationSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">CorsConfiguration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CorsConfiguration</span><span class="o">();</span>
        <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"*"</span><span class="o">));</span>
        <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedMethods</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span><span class="s">"POST"</span><span class="o">,</span> <span class="s">"PATCH"</span><span class="o">,</span> <span class="s">"DELETE"</span><span class="o">));</span>
        <span class="nc">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UrlBasedCorsConfigurationSource</span><span class="o">();</span>
        <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">"/**"</span><span class="o">,</span> <span class="n">configuration</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">source</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomFilterConfigurer</span> <span class="kd">extends</span> <span class="nc">AbstractHttpConfigurer</span><span class="o">&lt;</span><span class="nc">CustomFilterConfigurer</span><span class="o">,</span> <span class="nc">HttpSecurity</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">builder</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
            <span class="nc">JwtVerificationFilter</span> <span class="n">jwtVerificationFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JwtVerificationFilter</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">,</span> <span class="n">authorityUtils</span><span class="o">);</span>

            <span class="n">builder</span><span class="o">.</span><span class="na">addFilterAfter</span><span class="o">(</span><span class="n">jwtVerificationFilter</span><span class="o">,</span> <span class="nc">OAuth2LoginAuthenticationFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>필터체인 구성도 크게 바뀐건 없다.<br />
달라진점은 JWT 인증을 사용했을 때는, <code class="language-plaintext highlighter-rouge">jwtAuthenticationFilter</code>라는 필터 클래스를<br />
우리가 직접 구현해줘서, 필터체인에 등록해주었었다. 그 부분이 사라지고<br />
우리는 OAuth2 인증을 이용하기 위해 <code class="language-plaintext highlighter-rouge">.oauth2Login()</code> 가 추가되었고, 추가됨에 따라  <br />
<code class="language-plaintext highlighter-rouge">OAuth2AuthorizationRequestRedirectFilter</code> 와 <br />
<code class="language-plaintext highlighter-rouge">OAuth2LoginAuthenticationFilter</code> 가 추가된다. <br />
해당 필터들이 추가됨에따라 OAuth2 인증을 진행해주고, 인증에 성공시
<code class="language-plaintext highlighter-rouge">AbstractAuthenticationProcessingFilter</code> 클래스에서<br />
<code class="language-plaintext highlighter-rouge">successfulAuthentication();</code>메서드를 호출하게 되어진다.</p>

<p>호출되면 인증된 객체가 <code class="language-plaintext highlighter-rouge">SecurityContext</code>에 저장되고<br />
<code class="language-plaintext highlighter-rouge">AuthenticationSuccessHandler</code> 인터페이스에 <code class="language-plaintext highlighter-rouge">onAuthenticationSuccess();</code>를 호출하게된다.<br />
말은 즉슨 해당 인터페이스를 상속해 구현하는 클래스를 우리가 만들어서 Frontend쪽 서버로<br />
JWT 토큰을 만들어서 보낸다거나, 리다이렉트할 URI를 생성한다든가 조작이 가능하다는 점이다.</p>

<p>그렇게 조작하는 클래스를 우리가 만들어보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuth2MemberSuccessHandler</span> <span class="kd">extends</span> <span class="nc">SimpleUrlAuthenticationSuccessHandler</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OAuth2MemberSuccessHandler</span><span class="o">(</span><span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">,</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">,</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenizer</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authorityUtils</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAuthenticationSuccess</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Authentication</span> <span class="n">authentication</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="c1">// 인증된 객체로 부터 Resource Owner의 이메일 주소를 얻을 수 있다.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# Redirect to Frontend"</span><span class="o">);</span>
        <span class="nc">OAuth2User</span> <span class="n">oAuth2User</span> <span class="o">=</span> <span class="o">(</span><span class="nc">OAuth2User</span><span class="o">)</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">name</span> <span class="o">=</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getName</span><span class="o">();</span>
        <span class="nc">String</span> <span class="n">email</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>

        <span class="cm">/*
         * 플랫폼에 따른 email 가져오기
         * */</span>
        <span class="k">if</span><span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"삭제"</span><span class="o">)){</span> <span class="c1">// 해당 부분은 getName();의 번호를 가져오는 부분으로 비교함. 혹시 몰라서 번호는 삭제</span>
            <span class="c1">// 구글</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# Google 로그인 실행"</span><span class="o">);</span>
            <span class="n">email</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">().</span><span class="na">get</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"삭제"</span><span class="o">)){</span>
            <span class="c1">//카카오</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# Kakao 로그인 실행"</span><span class="o">);</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">kakao_account</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"kakao_account"</span><span class="o">);</span>
            <span class="n">email</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">kakao_account</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"삭제"</span><span class="o">)){</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# GitHub 로그인 실행"</span><span class="o">);</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
            <span class="n">email</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"login"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"# Naver 로그인 실행"</span><span class="o">);</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span> <span class="o">=</span> <span class="n">oAuth2User</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">();</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">naver_account</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"response"</span><span class="o">);</span>
            <span class="n">email</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">naver_account</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 강제 admin 권한 부여 (테스트 용도)</span>
        <span class="nc">String</span> <span class="n">adminCheck</span> <span class="o">=</span> <span class="s">"admin@gmail.com"</span><span class="o">;</span>
        <span class="c1">// 얻은 email 주소로 권한 List 만들기</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorities</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">.</span><span class="na">createRoles</span><span class="o">(</span><span class="n">adminCheck</span><span class="o">);</span>

        <span class="c1">// email을 토대로 Member 객체 만들어서 DB에 저장</span>
        <span class="c1">// 현재는 저장안하도록 테스트만진행</span>
<span class="c1">//        saveMember(email);</span>

        <span class="c1">// 리다이렉트를 하기위한 정보들을 보내줌</span>
        <span class="n">redirect</span><span class="o">(</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">,</span><span class="n">email</span><span class="o">,</span><span class="n">authorities</span><span class="o">);</span>
    <span class="o">}</span>


    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">redirect</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorities</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// 받은 정보를 토대로 AccessToken, Refresh Token을 만듬</span>
        <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">delegateAccessToken</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="n">authorities</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">delegateRefreshToken</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>

        <span class="c1">// Token을 토대로 URI를 만들어서 String으로 변환</span>
        <span class="nc">String</span> <span class="n">uri</span> <span class="o">=</span> <span class="n">createURI</span><span class="o">(</span><span class="n">accessToken</span><span class="o">,</span> <span class="n">refreshToken</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>

        <span class="c1">// 만든 URI로 리다이렉트 보냄</span>
        <span class="n">getRedirectStrategy</span><span class="o">().</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">,</span><span class="n">uri</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">delegateAccessToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorities</span><span class="o">){</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"username"</span><span class="o">,</span><span class="n">username</span><span class="o">);</span>
        <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"roles"</span><span class="o">,</span><span class="n">authorities</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
        <span class="nc">Date</span> <span class="n">expiration</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getTokenExpiration</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getAccessTokenExpirationMinutes</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">encodeBase64SecretKey</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getSecurityKey</span><span class="o">());</span>

        <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">generateAccessToken</span><span class="o">(</span><span class="n">claims</span><span class="o">,</span> <span class="n">subject</span><span class="o">,</span> <span class="n">expiration</span><span class="o">,</span> <span class="n">base64EncodedSecretKey</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">accessToken</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">delegateRefreshToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">){</span>

        <span class="nc">String</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
        <span class="nc">Date</span> <span class="n">expiration</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getTokenExpiration</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getRefreshTokenExpirationMinutes</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">encodeBase64SecretKey</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getSecurityKey</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">generateRefreshToken</span><span class="o">(</span><span class="n">subject</span><span class="o">,</span> <span class="n">expiration</span><span class="o">,</span> <span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">refreshToken</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="no">URI</span> <span class="nf">createURI</span><span class="o">(</span><span class="nc">String</span> <span class="n">accessToken</span><span class="o">,</span> <span class="nc">String</span> <span class="n">refreshToken</span><span class="o">){</span>
        <span class="nc">MultiValueMap</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">queryParams</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedMultiValueMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">queryParams</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"access_token"</span><span class="o">,</span> <span class="n">accessToken</span><span class="o">);</span>
        <span class="n">queryParams</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"refresh_token"</span><span class="o">,</span> <span class="n">refreshToken</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">UriComponentsBuilder</span>
                <span class="o">.</span><span class="na">newInstance</span><span class="o">()</span>
                <span class="o">.</span><span class="na">scheme</span><span class="o">(</span><span class="s">"http"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">host</span><span class="o">(</span><span class="s">"localhost"</span><span class="o">)</span>
<span class="c1">//                .port(80) // 기본 포트가 80이기 때문에 괜찮다</span>
                <span class="o">.</span><span class="na">path</span><span class="o">(</span><span class="s">"/receive-token.html"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">queryParams</span><span class="o">(</span><span class="n">queryParams</span><span class="o">)</span>
                <span class="o">.</span><span class="na">build</span><span class="o">()</span>
                <span class="o">.</span><span class="na">toUri</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">SimpleUrlAuthenticationSuccessHandler</code>클래스를 상속받고 있다.<br />
해당 클래스는 <code class="language-plaintext highlighter-rouge">AuthenticationSuccessHandler</code> 인터이스를 상속받고있다.<br />
위에서 얘기했듯이 인증에 성공시 해당 인터페이스의 <code class="language-plaintext highlighter-rouge">onAuthenticationSuccess();</code>가<br />
호출되어지고, 이 메서드를 Overriding하여 구현하면 된다.</p>

<p>구현 내용은 인증된 객체에서 우선 정보를 꺼내도록했다.<br />
email 정보를 꺼내서 추후에 DB에 관리한다면 저장할 예정이다.<br />
또한 여러가지 Google,Kakao,Github,Kakao 등을 구별하기위해<br />
<code class="language-plaintext highlighter-rouge">getName();</code>의 값을 사용했지만… 이부분은 따로 header에서 구분할 수 있는<br />
무언가를 가져와야할 것 같은 느낌이든다. (아직 해결못한 숙제다)</p>

<p>그래도 우선 구현테스트를 위해 name값으로 케이스를 나눠<br />
<code class="language-plaintext highlighter-rouge">getAttributes();</code> 안에있는 email 정보를 꺼내서 저장하는 것을 구현했다.</p>

<p>그리고 가장 중요한 부분인 Redirect 부분인데<br />
현재 구글 인증이 정상적으로 이루어져 흐름이 이쪽으로 넘어온 것이고<br />
이제 우리는 로그인을 완료했으니 다른페이지를 Redirect 해야하며<br />
JWT을 만들어서 header에 싦어주는 코드를 구현해야한다.</p>

<p>그 구현 부분이 <code class="language-plaintext highlighter-rouge">redirect();</code>으로 작성했고<br />
해당 내용은 accessToken, refreshToken을 만들고<br />
UriComponentsBuilder를 통해서 우리가 Redirect할 주소와<br />
queryParams로 추가해서 URI만들었다.</p>

<p>이제 Redirect만 진행하면된다. <code class="language-plaintext highlighter-rouge">getRedirectStrategy().sendRedirect();</code>를 구현해<br />
Redirect를 진행하도록했고 해당 메서드는 <code class="language-plaintext highlighter-rouge">AbstractAuthenticationTargetUrlRequestHandler</code> <br />
인터페이스의 메서드로 마찬가지로 <code class="language-plaintext highlighter-rouge">SimpleUrlAuthenticationSuccessHandler</code>와 상속관계라<br />
Overriding하여 우리가 구현이 가능한 부분이다. 매개 변수로는</p>

<p>HttpServletRequest 객체, HttpServletResponse 객체, String uri<br />
이렇게 매개변수로 넘겨주면 Redirect하게 되어지는 것이다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">security</span><span class="pi">:</span>
    <span class="na">oauth2</span><span class="pi">:</span>
      <span class="na">client</span><span class="pi">:</span>
        <span class="na">registration</span><span class="pi">:</span>
          <span class="na">google</span><span class="pi">:</span>
            <span class="na">clientId</span><span class="pi">:</span> <span class="s">${G_CLIENT_ID}</span> <span class="c1"># 구글 API콘솔로 발급받은 ID</span>
            <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${G_CLIENT_SECRET}</span> <span class="c1"># 구글 API콘솔로 발급받은 SECRET</span>
            <span class="na">scope</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s">email</span>
              <span class="pi">-</span> <span class="s">profile</span>
</code></pre></div></div>
<p>이제 마지막으로 .yml 파일에 필요한 설정정보를 입력해주면<br />
Springn Security에서 자동으로 진행해준다.</p>

<p>정말 대단하다… 내가 직접구현한 코드는 완전 극히 일부일텐데<br />
이모든걸 자동화시켜놓고 우리같은 초짜 개발자도 이용할 수 있다는게…<br />
후에 실제 Filter 동작에 디버그를 걸어놓고 어떻게 OAuth2 인증 과정을<br />
거치가는지는 면밀한 파악이 필요할 것 같다.</p>

<p><br /></p>

<p>이렇게 구현을 완료한 다음에<br />
실제로 로그인을 진행해보았을 때, 구글 로그인 완료 후에</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMsRfmFlCV2832vUEdC9XNM1u89sACuHGq-cKq-QfuuzyoTLPQDhc32NXsUg5dDd33-8J3tJXvUQ1V14h3ailY1wbfrjg=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>개발자도구로 원하는 페이지에 리다이렉션이 되었고<br />
우리가 만들어준 accessToken과 refreshToken이 정상적으로<br />
로컬 스토리지에 담겨있는 모습을 확인해 볼 수 있다.</p>

<p>로컬 스토리지에 담긴 이유는 Frontend 쪽 서버에<br />
javaScript언어로 저장하도록 코드를 추가해놓아서 저장되어지는 것이다.<br />
물론 <code class="language-plaintext highlighter-rouge">response.setHeader();</code>메서드를 통해서 header로 전송할 수도 있다.</p>

<p><br /></p>

<p><strong>2). 카카오톡 OAuth2 로그인 인증하기</strong></p>

<p>구글 로그인 인증을 완료해 보았으니<br />
다른 로그인도 한번 시도해보고 싶었다.</p>

<p>위에 코드는 전부 그대로 두고 .yml 설정 파일의 설정 정보만 변경하면 똑같이 인증이 가능하다.</p>

<p>구글 콘솔 API처럼 카카오톡도 <a href="https://developers.kakao.com/docs/latest/ko/kakaologin/common">카카오톡 로그인 애플리케이션</a>을 만들어 줘야한다.<br />
해당 사이트에 들어가 애플리케이션을 만들고</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMNQi6w61DyZV6ZpqvZm6pPcQJYYnsPc7iY0O_zUDGz-JTOT5txnrrNGQNFkUn52am_j-h4ZDHflC0zWCl5wQPJcc5S1A=w1299-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>client-id와 client-secret를 발급 받으면 된다.<br />
그 외에 scope 정보 동의 설정들도 가능했다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">security</span><span class="pi">:</span>
    <span class="na">oauth2</span><span class="pi">:</span>
      <span class="na">client</span><span class="pi">:</span>
        <span class="na">registration</span><span class="pi">:</span>
          <span class="na">google</span><span class="pi">:</span>
            <span class="na">clientId</span><span class="pi">:</span> <span class="s">${G_CLIENT_ID}</span> <span class="c1"># 구글 API콘솔로 발급받은 ID</span>
            <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${G_CLIENT_SECRET}</span> <span class="c1"># 구글 API콘솔로 발급받은 SECRET</span>
            <span class="na">scope</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s">email</span>
              <span class="pi">-</span> <span class="s">profile</span>
          <span class="na">kakao</span><span class="pi">:</span>
            <span class="na">client-id</span><span class="pi">:</span> <span class="s">${K_CLIENT_ID}</span> <span class="c1"># 앱 설정 -&gt; 앱 키 -&gt; REST API 키</span>
            <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${K_CLIENT_SECRET}</span>  <span class="c1"># 제품 설정 -&gt; 카카오 로그인 -&gt; 보안 -&gt; Client Secret</span>
            <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s">http://localhost:8080/login/oauth2/code/kakao</span>
            <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
            <span class="na">client-authentication-method</span><span class="pi">:</span> <span class="s">POST</span>
            <span class="na">client-name</span><span class="pi">:</span> <span class="s">Kakao</span>
            <span class="na">scope</span><span class="pi">:</span>
              <span class="pi">-</span> <span class="s">profile_nickname</span>
              <span class="pi">-</span> <span class="s">profile_image</span>
              <span class="pi">-</span> <span class="s">account_email</span>
        <span class="na">provider</span><span class="pi">:</span>
          <span class="na">kakao</span><span class="pi">:</span>
            <span class="na">authorization-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/authorize</span>
            <span class="na">token-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/token</span>
            <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://kapi.kakao.com/v2/user/me</span>
            <span class="na">user-name-attribute</span><span class="pi">:</span> <span class="s">id</span>
</code></pre></div></div>

<p>기존 구글설정에 밑에 카카오관련 설정을 넣어주고</p>

<p>Frontend 서버에서 <code class="language-plaintext highlighter-rouge">http://localhost:8080/oauth2/authorization/kakao</code> 로 요청을 보내주면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPAV4LBZQ-47VonDS63Xdnq372ABlm7MY1RK4wselyaycZ2FsH9ZGokzqYFMESSg8Qk8DGXiK5CfZcn55FoQ1xLok2RAQ=w1920-h920" alt="image" class="align-left" style="max-width: 80%" /></p>

<p>우리가 설정한대로 카카오톡 로그인 인증이 동일하게 진행할 수 있다.</p>

<p><br /></p>

<p><strong>3). 네이버 OAuth2 로그인 인증하기</strong></p>

<p>네이버도 마찬가지다 <a href="https://developers.naver.com/products/login/api/api.md">네이버 로그인 애플리케이션</a>에 들어가  <br />
애플리케이션을 만들어준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNKLUTpN-9m9o5CXOIedRwYXZbs5uBcW6AxtCgKUjRgT1qAjRtU7vDZfTgjaQiOQ5Jj_3aq_zmAas4fzv67DLhASES5=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>동일하게 id와 secretKey를 받았을 것이다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">security</span><span class="pi">:</span>
      <span class="na">oauth2</span><span class="pi">:</span>
        <span class="na">client</span><span class="pi">:</span>
          <span class="na">registration</span><span class="pi">:</span>
            <span class="na">google</span><span class="pi">:</span>
              <span class="na">clientId</span><span class="pi">:</span> <span class="s">${G_CLIENT_ID}</span> <span class="c1"># 구글 API콘솔로 발급받은 ID</span>
              <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${G_CLIENT_SECRET}</span> <span class="c1"># 구글 API콘솔로 발급받은 SECRET</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">email</span>
                <span class="pi">-</span> <span class="s">profile</span>
            <span class="na">kakao</span><span class="pi">:</span>
              <span class="na">client-id</span><span class="pi">:</span> <span class="s">${K_CLIENT_ID}</span> <span class="c1"># 앱 설정 -&gt; 앱 키 -&gt; REST API 키</span>
              <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${K_CLIENT_SECRET}</span>  <span class="c1"># 제품 설정 -&gt; 카카오 로그인 -&gt; 보안 -&gt; Client Secret</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s">http://localhost:8080/login/oauth2/code/kakao</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">client-authentication-method</span><span class="pi">:</span> <span class="s">POST</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">Kakao</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">profile_nickname</span>
                <span class="pi">-</span> <span class="s">profile_image</span>
                <span class="pi">-</span> <span class="s">account_email</span>
            <span class="na">naver</span><span class="pi">:</span>
              <span class="na">client-id</span><span class="pi">:</span> <span class="s">${N_CLIENT_ID}</span>
              <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${N_CLIENT_SECRET}</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{baseUrl}/{action}/oauth2/code/{registrationId}"</span> <span class="c1"># (== http://localhost:8080/login/oauth2/code/naver)</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">scope</span><span class="pi">:</span> <span class="s">name, email, profile_image</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">Naver</span>
          <span class="na">provider</span><span class="pi">:</span>
            <span class="na">kakao</span><span class="pi">:</span>
              <span class="na">authorization-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/authorize</span>
              <span class="na">token-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/token</span>
              <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://kapi.kakao.com/v2/user/me</span>
              <span class="na">user-name-attribute</span><span class="pi">:</span> <span class="s">id</span>
            <span class="na">naver</span><span class="pi">:</span>
              <span class="na">authorization_uri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/authorize</span>
              <span class="na">token_uri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/token</span>
              <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://openapi.naver.com/v1/nid/me</span>
              <span class="na">user_name_attribute</span><span class="pi">:</span> <span class="s">response</span>
</code></pre></div></div>

<p>네이버도 동일하게 설정을 완료해주고<br />
Frontend 서버에서 <code class="language-plaintext highlighter-rouge">http://localhost:8080/oauth2/authorization/naver</code> 로 요청을 보내주면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOzNDUxcjFONc6GXx7sdUQHD8X7MyLz6P4HC8egracTxzybn6-6Ik4dC1jcgxtySNbwe7ueB3K3vvpz-jXu1jrpC9l-=w1299-h920" alt="image" class="align-left" style="max-width: 80%" /></p>

<p>위와 같이 네이버 로그인 인증을 사용할 수 있게된다.</p>

<p><br /></p>

<p><strong>4). Github OAuth2 로그인 인증하기</strong></p>

<p>마지막으로 Github OAuth2도 적용해보고 싶어 시도해봤다.</p>

<p>GitHub 홈페이지에서<br />
<code class="language-plaintext highlighter-rouge">Setting -&gt; Developer settings -&gt; OAuth Apps</code><br />
경로로 접속하면 아래와 같이 애플리케이션을 만들수 있는 화면이 나온다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO851leSPchx-qwjJ_xI7KGIzTiarPVJUFY6-Ix1iWnh7kyS2RqWZBzZqGbLXiqoUnvcaFzV8jSvKNtDivX-r6hHmyIZA=w1920-h920" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>나는 practice라는 이름으로 애플리케이션을 만들었다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">security</span><span class="pi">:</span>
      <span class="na">oauth2</span><span class="pi">:</span>
        <span class="na">client</span><span class="pi">:</span>
          <span class="na">registration</span><span class="pi">:</span>
            <span class="na">google</span><span class="pi">:</span>
              <span class="na">clientId</span><span class="pi">:</span> <span class="s">${G_CLIENT_ID}</span> <span class="c1"># 구글 API콘솔로 발급받은 ID</span>
              <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${G_CLIENT_SECRET}</span> <span class="c1"># 구글 API콘솔로 발급받은 SECRET</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">email</span>
                <span class="pi">-</span> <span class="s">profile</span>
            <span class="na">kakao</span><span class="pi">:</span>
              <span class="na">client-id</span><span class="pi">:</span> <span class="s">${K_CLIENT_ID}</span> <span class="c1"># 앱 설정 -&gt; 앱 키 -&gt; REST API 키</span>
              <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${K_CLIENT_SECRET}</span>  <span class="c1"># 제품 설정 -&gt; 카카오 로그인 -&gt; 보안 -&gt; Client Secret</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s">http://localhost:8080/login/oauth2/code/kakao</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">client-authentication-method</span><span class="pi">:</span> <span class="s">POST</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">Kakao</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">profile_nickname</span>
                <span class="pi">-</span> <span class="s">profile_image</span>
                <span class="pi">-</span> <span class="s">account_email</span>
            <span class="na">naver</span><span class="pi">:</span>
              <span class="na">client-id</span><span class="pi">:</span> <span class="s">${N_CLIENT_ID}</span>
              <span class="na">client-secret</span><span class="pi">:</span> <span class="s">${N_CLIENT_SECRET}</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{baseUrl}/{action}/oauth2/code/{registrationId}"</span> <span class="c1"># (== http://localhost:8080/login/oauth2/code/naver)</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">scope</span><span class="pi">:</span> <span class="s">name, email, profile_image</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">Naver</span>
            <span class="na">github</span><span class="pi">:</span>
              <span class="na">clientId</span><span class="pi">:</span> <span class="s">${H_CLIENT_ID}</span>
              <span class="na">clientSecret</span><span class="pi">:</span> <span class="s">${H_CLIENT_SECRET}</span>
              <span class="na">redirect-uri</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{baseUrl}/{action}/oauth2/code/{registrationId}"</span> <span class="c1"># (== http://localhost:8080/login/oauth2/code/google)</span>
              <span class="na">authorization-grant-type</span><span class="pi">:</span> <span class="s">authorization_code</span>
              <span class="na">client-name</span><span class="pi">:</span> <span class="s">GitHub</span>
              <span class="na">scope</span><span class="pi">:</span>
                <span class="pi">-</span> <span class="s">email</span>
                <span class="pi">-</span> <span class="s">profile</span>
          <span class="na">provider</span><span class="pi">:</span>
            <span class="na">kakao</span><span class="pi">:</span>
              <span class="na">authorization-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/authorize</span>
              <span class="na">token-uri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/token</span>
              <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://kapi.kakao.com/v2/user/me</span>
              <span class="na">user-name-attribute</span><span class="pi">:</span> <span class="s">id</span>
            <span class="na">naver</span><span class="pi">:</span>
              <span class="na">authorization_uri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/authorize</span>
              <span class="na">token_uri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/token</span>
              <span class="na">user-info-uri</span><span class="pi">:</span> <span class="s">https://openapi.naver.com/v1/nid/me</span>
              <span class="na">user_name_attribute</span><span class="pi">:</span> <span class="s">response</span>
</code></pre></div></div>

<p>위에서 했던 구글,카카오,네이버와 동일하게<br />
.yml 파일에 설정 정보만 추가해주면 인증 사용이 가능하고</p>

<p>Frontend 서버에서 <code class="language-plaintext highlighter-rouge">http://localhost:8080/oauth2/authorization/github</code> 로 요청을 보내주면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOaC_iiUM1AFkW7zDZbf4FANkrFWyZsicq-OxPRG3aqYGgXWLsZYCi_DzPa-aTNW8OWIfJnoVBC5-Ze7u6eXct9r5ch=w1299-h920" alt="image" class="align-left" style="max-width: 70%" /></p>

<p>동일하게 로그인 요청을 보내면<br />
정상적으로 인증이되고 AccessToken과 Refresh Token이 발급되는<br />
모습을 확인할 수 있다.</p>

<p><br /></p>

<hr />

<p>이렇게 오늘은 OAuth2 인증에 대한<br />
여러가지 벤더들의 로그인 기능을 사용해 보았다.<br />
실질적으로 어떤 회사냐에 따라 변경하는 부분은 크게 어렵지 않은 것 같다.</p>

<p>하지만 Spring이 상당히 많은 부분을 작업해주고<br />
내가 구현하는 부분인 정망 극히 일부이기 때문에<br />
OAuth2에 대한 완벽한 이해가 되었다고는 할 수 없을 것 같다.</p>

<p>계속 공부하면서 느끼는 것은 프레임워크에 대한 세부 내용<br />
이해하는 것이 정말 중요하다고 느끼고<br />
추후에 이부분에 대한 흐름들은 따로 공부를하려고한다.</p>

<p>오늘 공부는 여기서 끝 !</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 라면, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[다시 시작된 월요일!!]]></summary></entry><entry><title type="html">macOs) Apache 웹 서버 AH00558 Could not reliable determine the server’s fully qualified domain name ..</title><link href="http://localhost:4000/macos/2022/11/27/OS-macOs-4.html" rel="alternate" type="text/html" title="macOs) Apache 웹 서버 AH00558 Could not reliable determine the server’s fully qualified domain name .." /><published>2022-11-27T00:00:00+09:00</published><updated>2022-11-27T00:00:00+09:00</updated><id>http://localhost:4000/macos/2022/11/27/OS-macOs-4</id><content type="html" xml:base="http://localhost:4000/macos/2022/11/27/OS-macOs-4.html"><![CDATA[<p>오늘 공부하다가 막혔던 부분이 있어서 <br />
도움이 될까 싶어 적어본다.</p>

<h3 id="apache-웹-서버">APACHE 웹 서버</h3>

<p>아파치 HTTP 서버(Apache HTTP Server)는 <br />
아파치 소프트웨어 재단에서 관리하는 오픈 소스, 크로스 플랫폼 HTTP 웹 서버 소프트웨어다. <br />
BSD, 리눅스 등 유닉스 계열 뿐 아니라 마이크로소프트 윈도우나 노벨 넷웨어 <br />
같은 기종에서도 무료로 운용할 수 있다고 한다. <strong>[<a href="https://ko.wikipedia.org/wiki/%EC%95%84%ED%8C%8C%EC%B9%98_HTTP_%EC%84%9C%EB%B2%84">출처 - 위키백과</a>]</strong></p>

<p>Mac 환경에서 Apache 웹서버를 사용해보려하다 오류가 발생했다.<br />
오류를 얘기하기전 우선 설치 과정을 아래의 사이트를 참고했다.<br />
<strong>[<a href="https://www.javatpoint.com/how-to-install-apache-on-mac">Apache 설치 방법 - 참고사이트</a>]</strong></p>

<p><br /></p>

<p>homebrew를 이용한 설치방법이고<br />
Mac 사용 유저라면 익히 알고 있을 것이다.</p>

<p>설치를 완료한다음 <br />
문제는 아파치 서버를 실행/종료 시키기위해서<br />
<code class="language-plaintext highlighter-rouge">sudo apachectl start</code> 명령어와 <code class="language-plaintext highlighter-rouge">sudo apachectl stop</code> 명령어를<br />
사용하게 되는데… AH00558 코드로된 알람이 발생했다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMPblHp1IrHpidEB8NNOHDrTqEx8Q_JW9oJb7H4iCMDJNIKJUgNoYoQPhx8afmEEUw_UNIczBB2e98aG8ey3dT_HzWk=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AH00558: httpd: Could not reliably determine the server<span class="s1">'s fully qualified domain name, using MacBook-Pro.local. Set the '</span>ServerName<span class="s1">' directive globally to suppress this message
</span></code></pre></div></div>

<p>오류는 그렇다 쳐도, 기본 적으로 localhost에 접속하면<br />
<code class="language-plaintext highlighter-rouge">It works!</code> 화면이 노출되지 않았다.<br />
localhost:8080에 접속해야지만 화면이 노출되었고<br />
설정을 바꿀 필요가 있다고 느껴졌다.</p>

<p><br /></p>

<p><strong>1). httpd.conf 파일 찾기</strong></p>

<p>설정을 변경하기 위해서는 <code class="language-plaintext highlighter-rouge">httpd.conf</code> 파일을 수정해줘야한다.<br />
해당 파일 경로를 찾기위해 여러가지 블로그를 찾아보았는데</p>

<p>사람마다 여러가지 경로로 수정을 하는걸 보았다.</p>

<p><code class="language-plaintext highlighter-rouge">/etc/apache2/httpd.conf</code><br />
<code class="language-plaintext highlighter-rouge">/private/etc/apache2/httpd.conf</code><br />
와 같은 경로로 수정한 사람들도 있는 것 같다.<br />
하지만 나와 같은 경우는 제대로 반영되지 않았고…</p>

<p>어떠한 차이인지는 아직 불분명하지만 내가 수정했던 경로는 아래와 같다.  <br />
📌<code class="language-plaintext highlighter-rouge">/opt/homebrew/etc/httpd/httpd.conf</code>📌 <br />
아마 homebrew를 통해 실행하는 것이기 때문이지 않을까? 라는 생각을 해본다.</p>

<p><code class="language-plaintext highlighter-rouge">httpd.conf</code> 파일을 찾는데 처음에 애먹어서 시간을 많이 쓴 것 같다.</p>

<p>파일을 찾았으면 이제 shell에서 vi 편집기로 값을 수정해주면된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi /opt/homebrew/etc/httpd/httpd.conf
</code></pre></div></div>

<p><br /></p>

<p><strong>2). Port 80 으로 변경하기</strong></p>

<p>편집기를 열고 아래와 같은 Listen을 찾아준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPzEEFalQYxag6NQ4wOJV1AuBpyHFHn9LwAi4g0PY8YljuKfpiPQY-9H1mOU1Vxqa-0reRKR1itloqQ_nXt8n7xKAh8=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>아마 기본적으로 8080으로 설정되어있을 것이다.<br />
#으로 주석처리를 해준다음, 아래에서 <code class="language-plaintext highlighter-rouge">Listen 80</code>으로 설정해주었다.</p>

<p><br /></p>

<p><strong>3). localhost로 변경 하기</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO9rZHRQQQ0HI4HBe-UBcgFt4ZMl91uomBFpsZLjsruipSi2KrdWjR89J1rptKW4mQSwI7iFSbjmpV5PgPfGLj88BO4yw=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위의 사진과 같이 ServerName을 localhost로 설정해주면 된다.</p>

<p><br /></p>

<p><strong>4). 결과 확인하기</strong></p>

<p>아파치 웹서버 실행 명령어인<br />
<code class="language-plaintext highlighter-rouge">sudo apachectl start</code>,<code class="language-plaintext highlighter-rouge">sudo apachectl stop</code>를 입력해도</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMxycEEiyoGZsXP0ZAh9sdmRXbB9ucK6Ar42OXNGDH3-OZW4FNBlpa68ehMFGULCDXcXODH-iLfmTYgK239LTRz134ZRg=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>더 이상 AH00558 오류가 발생하지 않는 모습이다.</p>

<p><br /></p>

<p>아파치 웹서버를 실행 시켜놓은 상태에서</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMRbasfobijEvOlwe60oFwSiELjJ7dm4RE7huFv2fFxSceyEPbFWQtmJCGSotTjXhbdaHpxJMCUOK2eMNPAneRzzlNyKA=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>localhost를 입력하여 접속할 경우<br />
이제 드디어 <code class="language-plaintext highlighter-rouge">It works</code> 화면을 볼 수 있게 된다 !!</p>

<p><br /></p>

<p><strong>5). html 파일 로딩하기</strong></p>

<p>이 부분은 참고차 한번 적어본다.<br />
아파치 웹서버에 내가 만든 html 파일을 적용 시키고싶을때</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPcmo_lcNtNltnX94Eob3uyBQJybrqArcuxv2z-iwhwBK57y-p25jsZ_Ix3I54tn2Nd91TGqAAm2KLiE9OkCGh4SiZwgA=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><code class="language-plaintext highlighter-rouge">httpd.conf</code> 파일에서 <code class="language-plaintext highlighter-rouge">DocumentRoot</code>를 수정해주면 html 파일을 사용할 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPgBo-oGeeI700xa9M9BOdiv2Uw4FQKR_C_9gwzceG8GVhNMT8iTUzJBVJLLQpGRRA_itVQOTuAz3AQGnJ_c7Ci0c9m8A=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>예를 들어서 index.html 이라는 파일을 만들어 위의 경로에 파일을 두었을때</p>

<p>기존에 localhost:80 접속 시 <code class="language-plaintext highlighter-rouge">It wroks!</code>로 나왔던 화면이<br />
내가 만든 화면으로 대체된 모습을 볼 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNlhfc-M7DRb35wAbT-xovzxuD54T512fR8OIeFZV-EtR0ngdJiUFt3vW4ToqBe3FzhdN8ZagQMmwTk5rt2syRzbW0dOA=w1782-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>이 화면은 테스트용으로 만든 화면이고<br />
정상적으로 파일이 접속된 모습을 볼 수 있다.<br />
이후 부터는 폴더경로를 만들어 html 파일에 접근하면된다.</p>

<p><br /></p>

<hr />

<p>혹시나 싶어 <a href="https://mainia.tistory.com/5490">WindowOS 해결 방법 - 출처 mainia님</a> 찾다가 좋은글인 것 같아 올려본다.<br />
좀 더 자세한 내용을 보고싶다면 <a href="https://velog.io/@diduya/macOS%EC%97%90-Homebrew%EB%A1%9C-Apache-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0">내가 참고한 해결 방법 - 출처 diduya님</a> 포스팅을 봐도<br />
좋은 해결법이될 것 같다.</p>

<p><br />
<br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="macOs" /><category term="macOs" /><summary type="html"><![CDATA[오늘 공부하다가 막혔던 부분이 있어서 도움이 될까 싶어 적어본다.]]></summary></entry><entry><title type="html">TIL) OAuth 2 인증 기초</title><link href="http://localhost:4000/til/2022/11/25/til.html" rel="alternate" type="text/html" title="TIL) OAuth 2 인증 기초" /><published>2022-11-25T00:00:00+09:00</published><updated>2022-11-25T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/25/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/25/til.html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPDuT8mojlcwDj4isWJwyJvwaEPSsequtCg9insTbysDEVk6R7VRiRwBIm8ta5JK6J4r7ZDnBUypheW5SWHioLCJ0f8=w1920-h864" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>이번주는 정말 게으르게 보낸 것 같다.</p>

<p>물론 옛날에 비하면 엄청난 발전이지만… 역시 한번 쉬면<br />
계속 쉬고 싶은 마음이 생겨서,, 조금 게으르게 학습한 느낌을 받았다.</p>

<p>다시한번 각성하여 Spring 세션을 잘 마무리 해보자.</p>

<hr />

<h2 id="oauth-2">OAuth 2</h2>

<h3 id="oauth-2-란">OAuth 2 란?</h3>

<p>흔히 생각해보면, 우리가 웹사이트 로그인을 할때<br />
소셜 로그인(구글,카카오톡 등) 인증방식을 사용해 로그인을 하는데<br />
이런 인증방식들은 OAuth2라는 기술을 바탕으로 구현이 된다.</p>

<p>우리가 알고 있는 일반적인 애플리케이션은<br />
서비스를 이용하는 사용자에 대한 인증처리는 해당 애플리케이션이 직접했다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOtOEbcjSRPGtg0QXyV8y1h1SCQegF3vUKPYwVCv7sEcPex_-9W-jvRfU7gcNry-watl1K_E1i57hcZE0mSkiSjOoVg=w1920-h921" alt="image" class="align-left" style="max-width: 80%" /><br />
<strong><em>- 크리덴셜을 저장하지 않는 아키텍처 -</em></strong></p>

<p>OAuth2 인증 프토토콜은 특정 애플리케이션에서 사용자의 인증을 직접<br />
처리하는 것이아니라 사용자 정보를 보유하고 있는 신뢰할 만한 써드 파티<br />
애플리케이션(구글,카카오톡 등)에서 인증을 대신 처리해주고 Resource에 대한<br />
자격 증명용 토큰을 발급한후, Client가 해당토큰을 이용해 써드파티 애플리케이션의<br />
서비스를 사용하게 해주는 방식이다.</p>

<p><br /></p>

<p><strong>*써드 파티(3rd Party)란?</strong><br />
프로그래밍을 도와주는 라이브러리를 만드는 외부 생산자를 뜻한다.</p>

<p>1st 파티 개발자 : 하드웨어 생상자가 ‘직접’ 소프트웨어를 개발하는 경우<br />
2nd 파티 개발자 : 하드웨어 생산지인 기업과 자사간의 관계에 속한 소프트웨어 개발자<br />
3rd 파티 개발자 : 아무 관련없는 제3자 소프트웨어 개발자<br />
이렇게 예를 들어볼 수 있을 것 같다.</p>

<p><br /></p>

<h3 id="oauth-2-인증-컴포넌트-역할">OAuth 2 인증 컴포넌트 역할</h3>

<p>시작에 앞서 OAuth 2 인증을 처리하는 <br />
컴포넌트들이 무엇이 있고 어떠한 역할을하는지 알아보자</p>

<ol>
  <li>Resource Owner<br />
-&gt; 사용하고자 하는 Resource의 소유자를 의미한다.</li>
  <li>Client<br />
-&gt; Resource Owner를 대신해 보호된 Resource에 엑세스하는 애플리케이션</li>
  <li>Resource Server<br />
-&gt; Client의 요청을 수락하고 Resource Owner에 해당하는 Resource를 제공하는 서버</li>
  <li>Authorization Server<br />
-&gt; Clinet가 Resource Server에 접근할 수 있는 권한을 부여하는 서버</li>
</ol>

<p>이렇게 글로만 정리하자면 사실 이해하기 힘들 것이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOuRXi0z_GnyDCCDHETh73m4ATTFc7XkcLLrbwxEbd_Rd71mekz5lc9oxBxt5WGwp-6BLNg3GiMQ4jErSdSRIpCvj3kkw=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>대략적인 역할을 보면 이렇게 나눠볼 수 있을 것 같다.<br />
기존에 우리가 불러오던 Client가 웹 애플리케이션 서버로<br />
변경된 모습을 볼 수 있다.</p>

<p>Resource Owner의 대리인으로써 구글에 인증과 Resource를<br />
요청하고 있기때문에 Client라고 부를 수 있다</p>

<p><br /></p>

<h3 id="authorization-grant-유형">Authorization Grant 유형</h3>
<p>Authorization Grant는 Client 애플리케이션이 Access Token을<br />
얻기 위한 Resource Owner의 권한을 표현하는 크리덴셜(Credential)을 의미한다.</p>

<p>즉, Access Token을 얻기 위한 수단이다.</p>

<p><strong><em>*Access Token 이란?<br />
Client가 Resource Server에 보호된 Resource에<br />
엑세스하기 위해 사용하는 자격 증명용 토큰이다.</em></strong></p>

<p><br /></p>

<p>총 4가지의 타입이 있으니 알아보자</p>

<p><strong>1). Authorization Code Grant (권한부여 승인 코드 방식)</strong> <br />
-. 가장 많이 쓰이는 방법이고 기본이 되는 방식이다.<br />
-. 권한 부여 승인을 위해 자체 생성한 Authorization Code를 전달하는 방식이다.<br />
-. Refresh Token을 사용할 수 있다.<br />
-. 권한 부여 승인 요청시 응답 타입을 <code class="language-plaintext highlighter-rouge">code</code>로 지정하여 요청한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPgVHuUuCDajpaRydkqDrMFvzkbLFg3gep5w9RB8biTR9VOow-YfScef_SaV6QJH5cGhGZwcx6giLOKPrAC4ppHoW1TNQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<p><strong>2). Implicit Grant (암묵적 승인 방식)</strong><br />
-. 별도의 Authorization Code 없이 바로 Access Token을 발급받는 방식이다.<br />
-. 자격증명을 안전하게 저장하기 힘든 Client에게 최적화된 방식이다.<br />
-. Refresh Token 사용이 불가능하다.<br />
-. 권한 부여 승인 요청시 응답타입을 <code class="language-plaintext highlighter-rouge">token</code>으로 지정하여 요청한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMa7L3zIQi3fKSZII9kd56k64SdaQpQJjnDrCev_ByGw1cuJYu3r61IXE0Ubx-pNNUJKs9tkNeOeQmBFZnGtOLekTEQCg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<p><strong>3). Resource Owner Password Credential Grant (자원 소유자 자격증명 승인방식)</strong><br />
-. 로그인 시 필요한 정보로 Access Token을 발급 받는 방식이다.<br />
-. 자신의 서비스에서 제공하는 애플리케이션의 경우에만 사용되는 인증 방식이다.<br />
(Authorization Server, Resource Server, Client가 모두 같은 시스템에 속해있을 경우에만 가능)<br />
-. Refresh Token 사용이 가능하다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMijQTmGrLYDoKw37n3jPJRqt5i6JjFcp8XeFprwPcptgPdHdPvhscdpyh52SFQHU7ju84XmIWMYyJIR6TYVznjIuPpsw=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<p><strong>4). Client Credentials Grant (클라이언트 자격증명 승인방식)</strong><br />
-. Client 자신이 관리하는 Resource, Authorization Server에 해당 Client를 위한<br />
제한된 Resource 접근 권한이 설정되어 있을 경우 사용 가능한 방식이다.<br />
-. Refresh Token의 사용이 불가능하다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOmLKEo6UjsefDdk3MWt5D0fLVXTDfA9dnjjHZibE6A55PjTKLDzqBn-NZTS3WsK-6ojytFXEXqtgqkjvuTIclhg3RH4w=w1299-h921" alt="image" class="align-left" style="max-width: 90%" /></p>

<p><br /></p>

<h3 id="사전-준비">사전 준비</h3>
<p>위에서 얘기했듯이 우리는 써드파티 애플리케이션 중<br />
OAuth 2 인증 프로토콜을 제공하는 벤더(구글, 카카오톡, 페이스북 등)를<br />
선정 한다음 프로그램을 작성해야한다.</p>

<p>그중 위에서 예로든 구글의 OAuth 2 프로토콜을 이용해볼 예정이고<br />
프로그램 작성 전에 먼저 클라이언트 ID와 Secret를 생성해야한다.<br />
<a href="http://yoonbumtae.com/?p=2631">구글 API 콘솔에서의 OAuth 2 설정 - 출처: yoonbumtae님</a>을 보고<br />
클라이언트 ID와 Secret를 생성하면 준비는 끝난다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO3kkRX35q-9PPahcVGwcdd2LGECoC7sez4uGlFClTNsVllR01dQocyQJSuF42Ej0tF7n3FIYHclCxtaNIefADUtJgiJw=w1920-h864" alt="image" class="align-left" style="max-width: 100%" /></p>

<p><br /></p>

<hr />

<p>오늘은 OAuth 2 에대한 간단한 지식을 알아봤다.<br />
사실 이론만 보기에는 코드를 보지않아서<br />
느낌이 확 와닿지는 않는다…</p>

<p>하지만 큰그림을 보고 코드를 보면 더 눈에 잘들어오기 때문에<br />
큰 아키텍처를 생각하고 코드를 다움주부터 연습을 해봐야겠다.</p>

<p>오늘 공부는 여기서 끝 !</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 김밥, 된장찌개</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">Spring) Could not resolve placeholder ‘환경변수명’ in value “${환경변수명}” 오류</title><link href="http://localhost:4000/spring/2022/11/25/spring-environment.html" rel="alternate" type="text/html" title="Spring) Could not resolve placeholder ‘환경변수명’ in value “${환경변수명}” 오류" /><published>2022-11-25T00:00:00+09:00</published><updated>2022-11-25T00:00:00+09:00</updated><id>http://localhost:4000/spring/2022/11/25/spring-environment</id><content type="html" xml:base="http://localhost:4000/spring/2022/11/25/spring-environment.html"><![CDATA[<p>오늘은 내가 겪은 환경변수에 관련된 설정과 오류를 <br />
기록해보려고한다.</p>

<p><br /></p>

<h2 id="문제-내용">문제 내용</h2>

<p>우선 나는 Mac을 사용하고 Shell은 zsh를 사용한다.</p>

<p>문제의 시작은 이러하다. JWT관련 공부중이였고<br />
코드에서 @Value 어노테이션으로 application.yml 파일의 <br />
설정된 값들을 사용하려고하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenizer</span> <span class="o">{</span>

    <span class="nd">@Getter</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jwt.secret-key}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">secretKey</span><span class="o">;</span>
    
    <span class="o">...</span> <span class="n">이하</span> <span class="n">생략</span>
<span class="o">}</span>
</code></pre></div></div>

<p>사용하려고 하는 대상은 SecretKey이고<br />
중요한 정보이기 때문에 <strong>시스템 환경변수</strong>를 사용해<br />
값을 사용하고 싶어 .yml 파일에 값을 셋팅해두었다.</p>

<p><br /></p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jwt</span><span class="pi">:</span>
  <span class="na">secret-key</span><span class="pi">:</span> <span class="s">${JWT_SECRET_KEY}</span>       <span class="c1"># 환경 변수로 설정했음</span>
  <span class="na">access-token-expiration-minutes</span><span class="pi">:</span> <span class="m">30</span>
  <span class="na">refresh-token-expiration-minutes</span><span class="pi">:</span> <span class="m">420</span>
</code></pre></div></div>

<p>위와 같이 ${환경변수명} 으로 지정을하였고<br />
만약 테스트를 실행한다면 @Value가 .yml의 경로를 찾아<br />
JWT_SECRET_KEY라고 설정된 환경변수를 가져와야한다.</p>

<p>하지만 테스트를 실행했을때</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'jwtTokenizer': Injection of autowired dependencies failed; nested exception is java.lang.IllegalArgumentException: Could not resolve placeholder 'JWT_SECRET_KEY' in value "${JWT_SECRET_KEY}"
</code></pre></div></div>
<p>위와 같은 에러가 발생했고…. 무언가 환경변수를<br />
제대로 가져오지 못한다고 생각이 들었다.</p>

<p><br /></p>

<h2 id="문제-확인-및-해결">문제 확인 및 해결</h2>

<p>첫번째로 해당 에러가 발생하는 대부분의 이유는</p>
<ol>
  <li>application.yml 혹은 application.properties를 설정하지 않거나 경로를 틀림</li>
  <li>환경변수 설정에 문제가 있었음. (bash shell, zsh shell 등..)</li>
</ol>

<p>하지만 나는 위에 있는 내용을 전부 충족했지만 왜? 도대체 값을 가져오지<br />
못하는지 미쳐버릴 지경에 이르렀었다.</p>

<p>사실 문제 해결은 간단했다.<br />
하지만 문제 해결을 먼저 올리기전에 환경변수 설정에 대해 적어본다.</p>

<p><br /></p>

<h3 id="macos-환경-변수-적용법">MacOS 환경 변수 적용법</h3>

<p><strong>1). 현재 사용하고 있는 Shell을 확인</strong></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nv">$SHELL</span>
</code></pre></div></div>
<p>사용하고 있는 터미널에서 위를 입력해준다.</p>

<p>만약 zsh Shell을 사용하고 있을 경우에는  -&gt; /bin/zsh<br />
bash Shell을 사용하고 있을 경우에는 -&gt; /bin/bash</p>

<p>아마 대부분 맥북유저는 zsh Shell을 사용하고 있을 것 같다.</p>

<p><br /></p>

<p><strong>2). 사용하고 있는 Shell에 따른 등록</strong></p>

<p>vi 편집기 사용법을 알고있다고 가정하겠습니다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.zshrc
</code></pre></div></div>
<p>만약 zsh를 사용하고 있는 경우에는 .zshrc 파일에 환경 변수를<br />
등록해줘야합니다.</p>

<p><br /></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>vi ~/.bashrc
</code></pre></div></div>
<p>bash를 사용하고 있는 경우에는 .bashrc 파일에 등록!</p>

<p><br /></p>

<p><strong>3). 환경 변수를 등록합니다.</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo </span><span class="nv">JWT_SECRET_KEY</span><span class="o">=</span>LeeJaehyeok637637123231231231123
</code></pre></div></div>
<p>현재 내가 등록하려는 환경변수는 <code class="language-plaintext highlighter-rouge">JWT_SECRET_KEY</code> 라는 이름으로<br />
위에서 설정한다고 얘기했었고, 해당 값은 위처럼 <code class="language-plaintext highlighter-rouge">LeeJaehyeok637637123231231231123</code>을<br />
사용하려고 값을 임의로 설정해서 넣어주었다.</p>

<p><br /></p>

<p><strong>4). 환경 변수 확인.</strong></p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">printenv</span>
</code></pre></div></div>
<p>printenv 명령어를 입려하면 우선 <br />
전체 적용된 환경변수 목록이 나온다.<br />
그 중에 우리가 적용한 JWT_SECRET_KEY가 있으면<br />
정상적으로 잘 적용되었다고 볼 수 있다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="nv">$JWT_SECRET_KEY</span>
</code></pre></div></div>
<p>echo 명령어를 이용하면 지정해서 확인이 가능하다.<br />
내가 등록한 환경변수는 <code class="language-plaintext highlighter-rouge">JWT_SECRET_KEY</code>로 등록했기에<br />
해당 명령어를 입력하면 아래와 같이 표시된다면 정상이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPJh2n11ERgYKg0d3nAkDTsgg7LPqEe2CpPKYPF1Z_QrHIuceZwiBV8Yk3kndJG8x8yQFFPKWCfp-kBFUZAkkOK4WfrBg=w1512-h864" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>그럼 여기까지 설정하고 조회까지 해보았으면<br />
환경변수 설정에는 문제가 없는 것이다.</p>

<p>혹여나 bash 사용으로 bash_profile에 설정하셨는데<br />
환경변수가 자꾸 리셋된다는 문제를 겪는 분들은<br />
1번 항목에 어떤 Shell을 사용하는지 다시 확인해볼 필요가 있다.</p>

<p><br /></p>

<h3 id="그래서해결-방법">그래서해결 방법?</h3>

<p>문제는 너무 간단했다.<br />
실제로 환경변수는 잘 적용되어있었고<br />
환경변수가 적용되지 않았던 이유는 <span style="color:#F04965"><strong>IDE Restart</strong></span>를 하지 않았던 문제였다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNQCKU6FpLklbn9HwlXNB15z8k77FNAGe0aGtURuUgAQxxwBdQD5RP_qiE5wrluKo6XwD61r9x3JbIxnQlpzdIxb-tl4Q=w1512-h864" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>Restart 하는 방법은 먼저 상단의 <code class="language-plaintext highlighter-rouge">File</code>에서<br />
<code class="language-plaintext highlighter-rouge">Invaildate Caches</code>를 눌러준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOq9qiFokRYmFR5OoFF3OVqGXqXL1QiRwBXUhE_PPCn1IiFPqGfYuDBF-wnApzQ99xla-dQA1B9WteBeCJ0OUEi3uGhUw=w1512-h864" alt="image" class="align-left" style="max-width: 60%" /></p>

<p>그리고 <code class="language-plaintext highlighter-rouge">INVALIDATE AND RESTART</code> 버튼을 눌러주면 된다.<br />
그러면 IDE가 자동적으로 재시작될 것이고<br />
스프링 부트실행시 해당 에러는 발생하지않고, 정상적으로 <br />
환경변수의 값을 가져오는 것이 확인이 가능하다.</p>

<p>실제로 출력해서 확인해보고 싶을 경우</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenizer</span> <span class="o">{</span>

    <span class="nd">@Getter</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jwt.secret-key}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">secretKey</span><span class="o">;</span>

    <span class="o">...</span> <span class="n">중간</span> <span class="n">생략</span>
    
    <span class="nd">@PostConstruct</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">secretKey</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="o">...</span> <span class="n">이하</span> <span class="n">생략</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Spring Boot 실행시 출력으로 값을 확인해 볼 수 있다.</p>

<p>혹은 실제로 환경변수를 클래스를 이용해 가져오고 싶다면</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenizer</span> <span class="o">{</span>
    
    <span class="o">...</span> <span class="n">이상</span> <span class="n">생략</span>
            
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Environment</span> <span class="n">environment</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">JwtTokenizer</span><span class="o">(</span><span class="nc">Environment</span> <span class="n">environment</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">environment</span> <span class="o">=</span> <span class="n">environment</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">key</span> <span class="o">=</span> <span class="n">environment</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="s">"JWT_SECRET_KEY"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="o">...</span> <span class="n">이하</span> <span class="n">생략</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">import org.springframework.core.env.Environment;</code> 패키지를 improt하여<br />
<code class="language-plaintext highlighter-rouge">.getProperty();</code> 메서드로 환경변수를 가져올 수 있다.</p>

<p><br /></p>

<hr />

<p><strong>기타 정보(Shell 변경)</strong></p>

<p>만약 zsh, bash를 변경해보고 싶으신 분은<br />
1). zsh를 기본으로 사용하고 싶은경우</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chsh <span class="nt">-s</span> /bin/zsh
</code></pre></div></div>

<p>2). bash를 기본으로 사용하고 싶은경우</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>chsh <span class="nt">-s</span> /bin/bash
</code></pre></div></div>
<p>입력후 현재 노트북 비밀번호를 입력해주시면 됩니다.</p>

<hr />]]></content><author><name>LEE JAEHYEOK</name></author><category term="Spring" /><category term="Spring" /><category term="zsh" /><summary type="html"><![CDATA[오늘은 내가 겪은 환경변수에 관련된 설정과 오류를 기록해보려고한다.]]></summary></entry><entry><title type="html">TIL) Spring Security, JWT 사용하여 인증하기</title><link href="http://localhost:4000/til/2022/11/24/til.html" rel="alternate" type="text/html" title="TIL) Spring Security, JWT 사용하여 인증하기" /><published>2022-11-24T00:00:00+09:00</published><updated>2022-11-24T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/24/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/24/til.html"><![CDATA[<p>날씨가 많이 쌀쌀해졌다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOtphG8edbKbbvSASKsJ_-tJ0REdmM2lcBp23tquh_bZGuSnGZt9pJIqpz7InTIiLhjrD7ZaBJzmsPBW69wtFDH28VC=w3024-h1728" alt="image" class="align-left" style="max-width: 60%" /></p>

<p>요즘 학습량이 늘어나 새벽까지 공부하다보니<br />
컨디션 난조가 심하다.. 일찍자려고해도<br />
어떻게 하다보니까 해야할 것들이 밀려 늦게 잠을 청하게된다.</p>

<p>그러다보니 아침,점심에 정신을 못차리고 공부를 제대로 못하는..<br />
악순환의 반복이다. 오늘은 최대한 일찍 공부를 마치고<br />
월드컵도 시작이니 일찍 잠을 자야겠다.</p>

<hr />

<p>어제 <a href="https://mycatlikeschuru.github.io/til/2022/11/23/til.html">JWT 기초</a> 파트에서 JWT에 대해 기초지식을<br />
공부했었고, 실제로 AcessToken, RefreshToken을 만들어보기도 했다.</p>

<p>이제 JWT 토큰을 만드는 방법을 알았으니<br />
이 토큰을 어떻게 Headers로 전송하고<br />
Spring Security를 이용해 인증과정을 거치게 되는지? 에 대한<br />
내용을 오늘 공부해보려 한다.</p>

<h2 id="jwt를-이용한-spring-security-인증">JWT를 이용한 Spring Security 인증</h2>

<h3 id="어떻게-인증을하지">어떻게 인증을하지?</h3>

<p>우선 <a href="https://mycatlikeschuru.github.io/til/2022/11/21/til.html">Spring Security 인증처리</a>에 대한<br />
선수지식을 가지고 있어야 해당 내용을 이해할 수 있다.</p>

<p>JWT를 사용하여 인증을 진행하려면<br />
기존에 인증처리에서 사용하는 <code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code>를<br />
비활성화로 변경한 후에 상속받아 클래스를 구현해 인증을 처리해줄 수 있다.<br />
(구현하는건 이제부터 개발자가 해야하는 영역)</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOQR4FMzSp9LHOptJF9_XBX4UQULmx47cZIefY8NeWpgeh2vTm3_WS04sbLy7xWlLrtlt4FbZfxdTdk501lzUyEOSykZQ=w1299-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>그림으로 한번 정리해보자.</p>

<p><code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code>를 상속받는<br />
<code class="language-plaintext highlighter-rouge">JwtAuthenticationFilter</code> 라는 클래스를 만들어 구현할 것이다.<br />
그리고 우리가 구현한 필터는 등록해놓아야하고, 기존의 <br />
<code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code> 필터는 비활성화해줘야한다.</p>

<p>구현할때 유의할점은 인증을 총괄하는 <code class="language-plaintext highlighter-rouge">AuthenticationManager</code>의<br />
<code class="language-plaintext highlighter-rouge">.authenticate();</code>메서드를 이용해 인증 처리를 위임해줘야한다.<br />
그러면 우리가 자주보았던 인증처리 흐름대로 코드가 진행되고</p>

<p>Spring Security에서 구현했던 <code class="language-plaintext highlighter-rouge">UserDetails</code> 객체를 만들어서<br />
<code class="language-plaintext highlighter-rouge">.loadUserByUsername();</code>메서드 호출시 반환만 해주면<br />
구현하는 부분은 끝난다.</p>

<p>그리고 인증완료된 객체가 돌아오면, JWT를 생성 후 클라이언트에<br />
Response Header에 담아 보내주면된다.</p>

<p><br /></p>

<p>다시 한번 정리해보자면 <br />
<code class="language-plaintext highlighter-rouge">JwtAuthenticationFilter</code> 이름으로 JWT Filter를 하나 만들 것이다.<br />
<code class="language-plaintext highlighter-rouge">AbstractAuthenticationProcessingFilter</code>추상 클래스를 에서 filter가 시작된다.<br />
<code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code> 클래스를 상속하면, 위에 추상클래스도<br />
상속관계이기때문에 Overriding하여 구현할 수 있다.</p>

<p>Overriding한 메서드를 구현해야하는데 2가지를 구현해야한다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">attemptAuthentication();</code> 메서드 구현<br />
-&gt; 인증을 위임해주고 인증처리 완료된 객체가 반환되는 메서드이므로<br />
인증과 관련된 정보를 넘겨주는 것을 구현해야함.</li>
  <li><code class="language-plaintext highlighter-rouge">successfulAuthentication();</code> 메서드 구현<br />
-&gt; 인증 완료 후 JWT 토큰을 만들어 Header에 담아주는 클래스를 구현해야함<br />
-&gt; Security Context에 저장하는 부분은 추후 JWT 비교필터에서 추가</li>
</ol>

<p><br /></p>

<h3 id="코드로-한번-확인해-보자-">코드로 한번 확인해 보자 !</h3>

<h4 id="1-jwtauthenticationfilter-구현">1). JwtAuthenticationFilter 구현</h4>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtAuthenticationFilter</span> <span class="kd">extends</span> <span class="nc">UsernamePasswordAuthenticationFilter</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">JwtAuthenticationFilter</span><span class="o">(</span><span class="nc">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">,</span> <span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authenticationManager</span> <span class="o">=</span> <span class="n">authenticationManager</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenizer</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nd">@SneakyThrows</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Authentication</span> <span class="nf">attemptAuthentication</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ObjectMapper</span> <span class="n">objectMapper</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ObjectMapper</span><span class="o">();</span>
        <span class="nc">LoginDto</span> <span class="n">loginDto</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">(),</span> <span class="nc">LoginDto</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// ServletInputSteam 을 LoginDto 클래스 객체로 역직렬화</span>

        <span class="nc">UsernamePasswordAuthenticationToken</span> <span class="n">authenticationToken</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UsernamePasswordAuthenticationToken</span><span class="o">(</span><span class="n">loginDto</span><span class="o">.</span><span class="na">getUsername</span><span class="o">(),</span> <span class="n">loginDto</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">authenticationManager</span><span class="o">.</span><span class="na">authenticate</span><span class="o">(</span><span class="n">authenticationToken</span><span class="o">);</span>
    <span class="o">}</span> 
    
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">successfulAuthentication</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">chain</span><span class="o">,</span> <span class="nc">Authentication</span> <span class="n">authResult</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>
        
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Member</span><span class="o">)</span> <span class="n">authResult</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">();</span>

        <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">delegateAccessToken</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">// accessToken 만들기</span>
        <span class="nc">String</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">delegateRefreshToken</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">// refreshToken 만들기</span>

        <span class="nc">String</span> <span class="n">headerValue</span> <span class="o">=</span> <span class="s">"Bearer "</span><span class="o">+</span> <span class="n">accessToken</span><span class="o">;</span>

        <span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">,</span><span class="n">headerValue</span><span class="o">);</span> <span class="c1">// Header에 등록</span>
        <span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">"Refresh"</span><span class="o">,</span><span class="n">refreshToken</span><span class="o">);</span> <span class="c1">// Header에 등록</span>

        <span class="k">this</span><span class="o">.</span><span class="na">getSuccessHandler</span><span class="o">().</span><span class="na">onAuthenticationSuccess</span><span class="o">(</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">,</span><span class="n">authResult</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">delegateAccessToken</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">){</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"username"</span><span class="o">,</span><span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>
        <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"roles"</span><span class="o">,</span><span class="n">member</span><span class="o">.</span><span class="na">getRoles</span><span class="o">());</span>

        <span class="nc">String</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">();</span>
        <span class="nc">Date</span> <span class="n">expiration</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getTokenExpiration</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getAccessTokenExpirationMinutes</span><span class="o">());</span>

        <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">encodeBase64SecretKey</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getSecretKey</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">generateAccesToken</span><span class="o">(</span><span class="n">claims</span><span class="o">,</span> <span class="n">subject</span><span class="o">,</span> <span class="n">expiration</span><span class="o">,</span> <span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">accessToken</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">delegateRefreshToken</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">){</span>
        <span class="nc">String</span> <span class="n">subject</span> <span class="o">=</span> <span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">();</span>
        <span class="nc">Date</span> <span class="n">expiration</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getTokenExpiration</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getRefreshTokenExpirationMinutes</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">encodeBase64SecretKey</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getSecretKey</span><span class="o">());</span>
        <span class="nc">String</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">generateRefreshToken</span><span class="o">(</span><span class="n">subject</span><span class="o">,</span> <span class="n">expiration</span><span class="o">,</span> <span class="n">base64EncodedSecretKey</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">refreshToken</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>해당 코드에서 유의 깊게 봐야할 부분은 <code class="language-plaintext highlighter-rouge">JwtAuthenticationFilter</code>클래스를 만들었고<br />
extend로 <code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code> 클래스를 상속받고<br />
@Overriding 하여 <code class="language-plaintext highlighter-rouge">attemptAuthentication();</code>와 <code class="language-plaintext highlighter-rouge">successfulAuthentication();</code> 메서드를<br />
구현하는 코드를 작성 중이다. 위에서 그림으로 보았던 부분이다.</p>

<p>구현 내용을 살펴보면
<code class="language-plaintext highlighter-rouge">attemptAuthentication();</code> 메서드는 <br />
우리가 기존에 Form Login으로 파라미터를 가져오고 Authentication 객체를 만들어<br />
<code class="language-plaintext highlighter-rouge">authenticate();</code> 메서드로 인증 처리 위임을 시작해주는 부분이다.<br />
Form Login 방식을 쓰지않고, 클라이언트 쪽에서 JSON 객체로</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"username"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"dhfif718@naver.com"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"password"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"1111"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>로그인 인증 정보를 이렇게 보내줄 것이다.<br />
그렇기 때문에 <code class="language-plaintext highlighter-rouge">attemptAuthentication();</code> 메서드를 구현한 것이고<br />
받은 JSON 객체는 <code class="language-plaintext highlighter-rouge">request.getInputStream();</code>으로 꺼낼 수 있다.<br />
위에서는 <code class="language-plaintext highlighter-rouge">ObjectMapper</code> 클래스를 이용해 Dto를 하나 만들어<br />
맵핑하여 값을 저장해 주었다. 그리고 저장해준 데이터를 가지고 Authentication 객체를 만들었다.</p>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">successfulAuthentication();</code>메서드는<br />
인증된 객체가 넘어왔을 것이고, 인증된 객체 <code class="language-plaintext highlighter-rouge">authResult</code>는<br />
이전에 Spring Security 사용할 때 <code class="language-plaintext highlighter-rouge">UserDetails</code> 객체를 반환해 구현했었다.<br />
실제 구현할때 <code class="language-plaintext highlighter-rouge">UserDetails</code>를 <code class="language-plaintext highlighter-rouge">Member</code> 클래스를가 상속하도록 구현해서<br />
<code class="language-plaintext highlighter-rouge">authResult.getPrincipal();</code>메서드로 Down Casting하여 Member 객체를<br />
가져올 수 있게되는 것이다.</p>

<p>이렇게 가져온 <code class="language-plaintext highlighter-rouge">Member</code> 객체를 활용해서 AccessToken과 RefreshToken을 만들어<br />
<code class="language-plaintext highlighter-rouge">response.setHeader();</code> 메서드를 활용해 HEADER에 값을 추가할 수 있다.<br />
HEADER에 까지 정상적으로 넣었으면 <code class="language-plaintext highlighter-rouge">.onAuthenticationSuccess();</code>를 호출해<br />
성공적으로 인증된 객체를 만들었다고 알리고, 다음 Filter를 진행하게 된다.</p>

<p>여기까지 보았을때 한가지 의아한 점을 찾을 수 있다.<br />
공부했던 인증 처리흐름에 마지막은 <code class="language-plaintext highlighter-rouge">Security Context</code>에 저장을해야<br />
나중에 권한부여를 할때 <code class="language-plaintext highlighter-rouge">Security Context</code>에서 꺼낼 수 있는데 <br />
이부분을 구현하지 않았던점을 의아해할 수 있다.</p>

<p>해당부분은 다음 Filter에서 처리할 것이다.<br />
그럼 다음 추가할 Filter를 알아보자</p>

<p><br /></p>

<h4 id="2-jwtverificationfilter-구현">2). JwtVerificationFilter 구현</h4>
<p>해당 필터는 이전에 필터 <code class="language-plaintext highlighter-rouge">JwtAuthenticationFilter</code>의 다음 Filter로<br />
우리가 구현하는 새로운 Filter 클래스이다.</p>

<p>해당 필터의 역할은 넘어온 JWT에 대한 검증과<br />
검증이 완료된 Authentication 객체를 <code class="language-plaintext highlighter-rouge">Security Context</code>에<br />
저장하는 역할을 구현해주는 클래스이다.</p>

<p>여기서 한가지 중요한점은 <code class="language-plaintext highlighter-rouge">Security Context</code>에 저장은 하지만<br />
Session 방식을 사용하지 않는 형식으로 <code class="language-plaintext highlighter-rouge">SecurityFilterChain</code>에서 설정할 것이다.<br />
그래야 JWT를 사용하는 목적과 맞기 때문이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtVerificationFilter</span> <span class="kd">extends</span> <span class="nc">OncePerRequestFilter</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">JwtVerificationFilter</span><span class="o">(</span><span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">,</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenizer</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authorityUtils</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/*
    * 필터 추가, JWT 객체를 꺼내서 비교후 SecurityContext에 저장함
    * */</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

        <span class="c1">// 예외처리 추가</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">verifyJws</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
            <span class="n">setAuthenticationToContext</span><span class="o">(</span><span class="n">claims</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SignatureException</span> <span class="n">se</span><span class="o">){</span>
            <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"exception"</span><span class="o">,</span><span class="n">se</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ExpiredJwtException</span> <span class="n">ex</span><span class="o">){</span>
            <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"exception"</span><span class="o">,</span><span class="n">ex</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="s">"exception"</span><span class="o">,</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 다음 Filter 실행</span>
        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span><span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>

     <span class="cm">/*
     * 만약 request에 전달받은 authorization이 없으면 해당 필터는 실행안함
     * */</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">shouldNotFilter</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">authorization</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">authorization</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">authorization</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"Bearer"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/*
    * request 객체로 claims 객체 꺼내는 메서드
    * */</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">verifyJws</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">){</span>
        <span class="nc">String</span> <span class="n">jws</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="s">"Authorization"</span><span class="o">).</span><span class="na">replace</span><span class="o">(</span><span class="s">"Bearer "</span><span class="o">,</span><span class="s">""</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">encodeBase64SecretKey</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getSecretKey</span><span class="o">());</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span> <span class="o">,</span><span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">getClaims</span><span class="o">(</span><span class="n">jws</span><span class="o">,</span> <span class="n">base64EncodedSecretKey</span><span class="o">).</span><span class="na">getBody</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">claims</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/*
    * SecurityContext에 저장하는 부분
    * */</span>
    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">setAuthenticationToContext</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span><span class="o">){</span>
        <span class="nc">String</span> <span class="n">username</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">claims</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"username"</span><span class="o">);</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">authorities</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">.</span><span class="na">createAuthorities</span><span class="o">((</span><span class="nc">List</span><span class="o">)</span><span class="n">claims</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"roles"</span><span class="o">));</span>

        <span class="nc">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UsernamePasswordAuthenticationToken</span><span class="o">(</span><span class="n">username</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">authorities</span><span class="o">);</span>
        <span class="nc">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">setAuthentication</span><span class="o">(</span><span class="n">authentication</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>해당 클래스는 생각보다 간단하다.<br />
우선 <code class="language-plaintext highlighter-rouge">OncePerRequestFilter</code>를 상속받아 필터로 사용하는 클래스이다.<br />
사용자 한번의 요청에 딱한번만 실행하는 필터이고 <a href="https://minkukjo.github.io/framework/2020/12/18/Spring-142/">minkukjo님의 블로그</a>를 참고하면 좋을 것 같다.</p>

<p>우리는 로그인할때 JWT토큰을 HEADER에 싦어 클라이언트에 발행해 줬다.<br />
이제 만약 클라이언트에서 어떠한 요청이 있다고 가정할때 HEADER Access Token을 보내면<br />
request 객체를 이용해서 HEADER에서 JWT를 가져와서, 우리가 기존에 만들어둔<br />
<code class="language-plaintext highlighter-rouge">.getClamis();</code>메서드를 이용해 비교후 claims 객체를 가져올 수 있다.</p>

<p>만약 토큰이 만료시간이 다되었거나 서명형식이 틀렸다거나하면<br />
예외가 발생하면서 JWT 인증이 되었다고 판단하지않아 <br />
다음 필터를 진행하게 된다. 여기서 다음 필터를 진행하게 되면 <code class="language-plaintext highlighter-rouge">Security Context</code>에는<br />
아무런 객체가 없기때문에 권한확인하는 필터에서 인가가 되지 않는다.</p>

<p>즉, 우리가 발행한 Access Token과 일치하는 지 확인한다음<br />
<code class="language-plaintext highlighter-rouge">Security Context</code>에 인증된 객체를 저장해주는 필터 클래스이다.<br />
만약 일치하지않거나 예외가 발생하면 <code class="language-plaintext highlighter-rouge">Security Context</code>에 객체를<br />
저장하지 않고 다음 Filter로 넘어가는 방식이다.</p>

<p>이렇게 까지만 구현하면 JWT 관련해서 발행과, 인증에 대한<br />
구현 부분은 끝났다. 이제 우리가 마지막으로 해줘야할 부분은<br />
Spring SecurityFilterChain에 설정정보를 설정하는일만 남았다.</p>

<p><br /></p>

<h4 id="3-spring-security-filterchain-설정">3). Spring Security FilterChain 설정</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableWebSecurity</span><span class="o">(</span><span class="n">debug</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfigurationV6</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SecurityConfigurationV6</span><span class="o">(</span><span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">,</span> <span class="nc">CustomAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">jwtTokenizer</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authorityUtils</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span>
                <span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">frameOptions</span><span class="o">().</span><span class="na">sameOrigin</span><span class="o">()</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                <span class="o">.</span><span class="na">cors</span><span class="o">(</span><span class="nc">Customizer</span><span class="o">.</span><span class="na">withDefaults</span><span class="o">())</span> <span class="c1">// corsConfigurationSource라는 이름으로 등록된 Bean을 사용한다고 정의</span>
                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">().</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="nc">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">)</span> <span class="c1">// 세션 정책 추가 (JWT사용으로 STATELESS로 설정)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span> <span class="c1">// CSR 방식사용으로 formLogin 비활성화</span>
                <span class="o">.</span><span class="na">httpBasic</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span> <span class="c1">// UsernamePasswordAuthenticationFilter 등 비활성화</span>
                <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span> <span class="c1">// 예외처리 기능이 작동</span>
                <span class="o">.</span><span class="na">authenticationEntryPoint</span><span class="o">(</span><span class="k">new</span> <span class="nc">MemberAuthenticationEntryPoint</span><span class="o">())</span>  <span class="c1">// 인증 실패시 처리</span>
                <span class="o">.</span><span class="na">accessDeniedHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">MemberAccessDeniedHandler</span><span class="o">())</span> <span class="c1">// 인증 실패시 처리</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="k">new</span> <span class="nc">CustomFilterConfigurer</span><span class="o">())</span> <span class="c1">// 커스터마이징한 필터를 추가할 수 있음</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">(</span><span class="n">authorize</span> <span class="o">-&gt;</span> <span class="n">authorize</span>
                        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">POST</span><span class="o">,</span> <span class="s">"/*/members"</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">PATCH</span><span class="o">,</span> <span class="s">"/*/members/**"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">"/*/members"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="s">"/*/members/**"</span><span class="o">).</span><span class="na">hasAnyRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">,</span> <span class="s">"ADMIN"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="nc">HttpMethod</span><span class="o">.</span><span class="na">DELETE</span><span class="o">,</span> <span class="s">"/*/members/**"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">permitAll</span><span class="o">()</span>
                <span class="o">);</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">PasswordEncoderFactories</span><span class="o">.</span><span class="na">createDelegatingPasswordEncoder</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/*
    * 구체적인 CORS 정책을 설정
    * */</span>
    <span class="nd">@Bean</span>
    <span class="nc">CorsConfigurationSource</span> <span class="nf">corsConfigurationSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">CorsConfiguration</span> <span class="n">configuration</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CorsConfiguration</span><span class="o">();</span>
        <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"*"</span><span class="o">));</span> <span class="c1">// 스크림트 기반의 HTTP 통신을 허용</span>
        <span class="n">configuration</span><span class="o">.</span><span class="na">setAllowedMethods</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"GET"</span><span class="o">,</span><span class="s">"POST"</span><span class="o">,</span> <span class="s">"PATCH"</span><span class="o">,</span> <span class="s">"DELETE"</span><span class="o">));</span> <span class="c1">// HTTP Method에 대한 HTTP 통신 허용</span>

        <span class="nc">UrlBasedCorsConfigurationSource</span> <span class="n">source</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UrlBasedCorsConfigurationSource</span><span class="o">();</span> <span class="c1">// CorsConfigurationSource 구현체 생성</span>
        <span class="n">source</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">"/**"</span><span class="o">,</span> <span class="n">configuration</span><span class="o">);</span> <span class="c1">// 모든 URL에 정책 적용</span>
        <span class="k">return</span> <span class="n">source</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomFilterConfigurer</span> <span class="kd">extends</span> <span class="nc">AbstractHttpConfigurer</span><span class="o">&lt;</span><span class="nc">CustomFilterConfigurer</span><span class="o">,</span><span class="nc">HttpSecurity</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">builder</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
            <span class="nc">AuthenticationManager</span> <span class="n">authenticationManager</span> <span class="o">=</span> <span class="n">builder</span><span class="o">.</span><span class="na">getSharedObject</span><span class="o">(</span><span class="nc">AuthenticationManager</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">// AuthenticationManager 객체얻기</span>

            <span class="nc">JwtAuthenticationFilter</span> <span class="n">jwtAuthenticationFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JwtAuthenticationFilter</span><span class="o">(</span><span class="n">authenticationManager</span><span class="o">,</span> <span class="n">jwtTokenizer</span><span class="o">);</span> <span class="c1">// JwtAuthenticationFilter 객체만들기 (생성하면서 DI하기)</span>

            <span class="c1">// 상속받은 AbstractAuthenticationProcessingFilter 클래스의 FilterProcessesUrl 설정해주기 (설정안할시 default: /Login)</span>
            <span class="c1">// 즉, 로그인 요청할때 이 Url로 요청해야함, 우리가 기존에 UsernamePassword 필터 사용시에는 /process_login 하던부분임</span>
            <span class="n">jwtAuthenticationFilter</span><span class="o">.</span><span class="na">setFilterProcessesUrl</span><span class="o">(</span><span class="s">"/v11/auth/login"</span><span class="o">);</span>
            <span class="c1">// Exception 추가</span>
            <span class="n">jwtAuthenticationFilter</span><span class="o">.</span><span class="na">setAuthenticationSuccessHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">MemberAuthenticationSuccessHandler</span><span class="o">());</span>
            <span class="n">jwtAuthenticationFilter</span><span class="o">.</span><span class="na">setAuthenticationFailureHandler</span><span class="o">(</span><span class="k">new</span> <span class="nc">MemberAuthenticationFailureHandler</span><span class="o">());</span>

            <span class="nc">JwtVerificationFilter</span> <span class="n">jwtVerificationFilter</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JwtVerificationFilter</span><span class="o">(</span><span class="n">jwtTokenizer</span><span class="o">,</span> <span class="n">authorityUtils</span><span class="o">);</span>

            <span class="c1">// Spring Security FilterChain에 추가</span>
            <span class="n">builder</span><span class="o">.</span><span class="na">addFilter</span><span class="o">(</span><span class="n">jwtAuthenticationFilter</span><span class="o">)</span>  <span class="c1">// 우리가만든 jwtAuthenticationFilter 필터추가</span>
                    <span class="o">.</span><span class="na">addFilterAfter</span><span class="o">(</span><span class="n">jwtVerificationFilter</span><span class="o">,</span> <span class="nc">JwtAuthenticationFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span> <span class="c1">//  jwtVerificationFilter 필터추가, 뒤에 클래스는 어느클래스 다음에 실행할지 설정</span>

        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>이전에 Spring Security 설정과 크게 달라진 점은 3가지 정도 있다.</p>

<ol>
  <li>CORS 정책을 추가</li>
  <li>세션 정책 추가</li>
  <li>우리가 만든 Filter 추가</li>
  <li>예외처리에 대한 기능 추가</li>
</ol>

<p>이렇게 3가지에 대한 내용을 추가 설정해 주었다.
자세한 내용은 코드옆에 설명을 적어 놓았다.</p>

<p>여기서 세션정책관련해서는 아까 <code class="language-plaintext highlighter-rouge">SecurityContext</code>에 객체를 저장하지만<br />
STATELESS로 설정하여 서버에서 관리하지 않게 되어진다.<br />
즉, 무상태성으로 서버에서 관리하지 않는 것이다.</p>

<p>또한 예외처리를 위한 우리가 구현한 클래스들도 설정해놓았고<br />
Cors 정책관련해서도 Bean으로 등록해 추가해주었다.</p>

<p>그리고 마지막으로 사용자에 따른 페이지 권한에 대한 <br />
<code class="language-plaintext highlighter-rouge">antMatchers();</code>를 설정한 다음 마무리를 지었다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextPersistenceFilter
  HeaderWriterFilter
  CorsFilter
  LogoutFilter
  JwtAuthenticationFilter
  JwtVerificationFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  AnonymousAuthenticationFilter
  SessionManagementFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]
</code></pre></div></div>
<p>최종적으로 완성된 SecurityFilterChain 구성은<br />
보이는 것과 같이 <code class="language-plaintext highlighter-rouge">CorsFilter</code> 추가와<br />
<code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code>가 비활성화 되었고<br />
우리가 만들어준 필터 <code class="language-plaintext highlighter-rouge">JwtAuthenticationFilter</code>와 <code class="language-plaintext highlighter-rouge">JwtVerificationFilter</code>가<br />
추가된 모습을 콘솔로 확인이 가능하다. (@EnableWebSecurity(debug = true))</p>

<p><br /></p>

<p>이렇게 JWT 설정관련해서 주요하게 우리가 구현해야하는<br />
클래스를 설명했고 구현한 코드도 적어보았다.</p>

<p>구현했던 클래스 중 가장 중요한 클래스만 정리를 해두었고<br />
해당 클래스를 구현하기위해 보조로 필요한 예외처리 클래스라든가 등등..은<br />
따로 코드를 올리진 않았다는 점은 참고해주실 바란다.</p>

<p><br /></p>

<h3 id="jwt-예외관련">JWT 예외관련</h3>

<p>정상적인 JWT를 하나 만들었다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gM7CWzAFQjn80N1hvvM9SUK3D93K7v6MKWNbJ73maG_WsDGVAWRlzCA7i2-X3BqaLP0fLkeuY3__aTBsAL3k4TzG2hqqQ=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>해당 JWT를 가지고 값을 변경해보면서<br />
예외가 발생하는지 테스트를 해보았다.</p>

<p><br /></p>

<p><strong>1). ExpiredJwtException 예외</strong></p>

<p>JWT를 생성할 때 지정한 유효기간이 초과할때 발생하는 예외다</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>io.jsonwebtoken.ExpiredJwtException: JWT expired at 2022-11-24T07:28:32Z. Current time: 2022-11-24T07:31:05Z, a difference of 153263 milliseconds.  Allowed clock skew: 0 milliseconds.
</code></pre></div></div>

<p>로그인 요청을 할때, 우리는 JWT 토큰을 Header에 담아서 보내준다.<br />
토큰을 만들때는 만료시간을 설정하는데<br />
설정한 만료시간이 지났는데 리소스에 접근요청을 보내면 g해당 예외가 발생한다.</p>

<p><br /></p>

<p><strong>2). MalformedJwtException 예외</strong></p>

<p>JWT가 올바르게 구성되지 않았을때 발생하는 예외이다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>io.jsonwebtoken.MalformedJwtException: Malformed JWT JSON: 
</code></pre></div></div>
<p>실제로 구성을 바꿨을때 예외가 발생했다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPQhIjSnqeeREeIFdpD_a2vMw-E6r_7tu74DY46aqKGtvdcc9GP-PTkbfKyKeUIqpUJJpGuPmCFdHGTJ8wPGEh_A-FrXg=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위의 사진처럼 Header의 맨앞부분을 변경했더니<br />
디코딩이 되지 않아 형식을 확인할 수 없는 문제가 생겼다.</p>

<p>실제로 JWT 홈페이지에서 사진처럼 디코딩을 해보면<br />
인코딩쪽에 형식이 맞지않아 빨간색으로 표시가 되는 것을 볼 수 있다.</p>

<p><br /></p>

<p><strong>3). SignatureException 예외</strong></p>

<p>JWT의 기존 서명을 확인하지 못했을 때 생기는 예외이다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>io.jsonwebtoken.security.SignatureException: Unsupported signature algorithm 'H{256'
</code></pre></div></div>
<p>실제로 서명을 확인하지 못할경우 위와 같이<br />
Exception이 발생한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gM-B56_cW6Bvc86vXPTHrYxah_eJccUX-5yCNznSlZds4Ad2wCQ5-06B79zGh14djTNIyyEsiGiZofmUGLsX4T-oiVj=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>정상 JWT에서 Header 부분을 변경해 예외를 터트려보았다.<br />
형식이 깨지지 않는 선에서 서명이 확인되지 않으면<br />
발생하는 예외인 것 같다.</p>

<p>사진에서 볼 수 있는 것처럼 Header의 <code class="language-plaintext highlighter-rouge">'alg' : "H{256"</code>으로<br />
형식은 깨지지 않았으나, Header에 이상한 값이 들어가<br />
서명을 확인하지 못하는 경우가 발생한 것이다.</p>

<p><br /></p>

<hr />
<p>이렇게 오늘은 JWT를 통해 인증까지 해보는 작업을 해보았다.<br />
사실은 내가 정리하면서 맞게 적는지 엄청 코드를 반복적으로 확인하면서<br />
글을 써내려갔다. 조금 덜 정리된 부분이 많아서 아쉽지만<br />
나름 내가 코드를 분석하고 정리를 해보니 어느정도 감은 잡힌 것 같다.</p>

<p>오늘까지해서 JWT에 대한 내용은 끝났고<br />
실제로 내가 어드밴스한 내용을 구현하고 싶다면<br />
인증처리 흐름만 익힐게 아니라 내부의 코드들이 어떻게 구현되있는지<br />
완벽하게 이해하고 있어야 어드밴스한 구현이 가능할 듯 싶다.</p>

<p>오늘까지 공부하면서 많은 소득이 있었고<br />
큰 그림을 배웠고, 세부적인 내용도 어느정도 뜯어보니<br />
코드에 대한 자신감이 조금 더 생긴 주였던 것 같다.</p>

<p>오늘 공부는 여기서 끝!!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 라면, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[날씨가 많이 쌀쌀해졌다.]]></summary></entry><entry><title type="html">TIL) JWT 기초</title><link href="http://localhost:4000/til/2022/11/23/til.html" rel="alternate" type="text/html" title="TIL) JWT 기초" /><published>2022-11-23T00:00:00+09:00</published><updated>2022-11-23T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/23/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/23/til.html"><![CDATA[<p>확실히 Spring 관련된 기술을 사용하면서<br />
프로그래밍을 하고 있다는 느낌이 들때가 많아서 좋다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMWwuYanwzEYSBU97J-DZR9DkAcwyTyZwvas0jVZbla4RaJ-_F28bKYzcWQqOh3iqItCBSFVIUY6GDFl9qgi16AsH2POw=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>사용하려는 프레임워크나 기술에 대한<br />
아키텍처 구조를 파악하고, 실제 어떻게 호출과 응답이 이루어지는지<br />
확인하는 과정이 순탄치는 않지만… 조금씩 눈에 들어오니<br />
확실히 재미의 가속도가 붙는 것 같다.</p>

<hr />

<p>3일 동안 Spring Security에 대한 내용을 얼추 마무리했다.<br />
오늘은 JWT에 대한 내용을 공부하는 시간이고<br />
JWT를 사용해 어떻게 Spring Security와 연결을 지어가는지<br />
2일에 걸쳐 공부해볼려고 한다.</p>

<h2 id="jwt-기초">JWT 기초</h2>

<h3 id="jwt란">JWT란?</h3>
<p>Json Web Token의 약자로<br />
Json 포맷으로 사용자에 대한 속성을 저장하는 웹 토큰이다.</p>

<p>기존에는 세션기반 인증으로 서버에 유저정보를 담는 방식으로 인증을 진행했었는데<br />
이렇게 되면 매번 요청을할때마다 DB를 살펴보아야하기 때문에<br />
이러한 부담을 줄이기 위해 토큰기반 인증이 나왔다.</p>

<p>토큰은 유저 정보를 암호화한 상태로 담을 수 있고<br />
암호화했기 때문에 클라이언트에 담을 수 있다.</p>

<p>토큰기반 인증의 장점?</p>
<ol>
  <li>무상태성, 확장성<br />
-&gt; 서버는 클라이언트에 대한 정보를 저장할 필요가 없다.<br />
-&gt; 토큰을 헤더에 추가함으로 인증절차 완료</li>
  <li>안정성<br />
-&gt; 암호화 한 토큰을 사용</li>
  <li>어디서나 생성 가능<br />
-&gt; 토큰을 생성하는 서버가 꼭 토큰을 만들지 않아도됨</li>
  <li>권한 부여에 용이 <br />
-&gt; 토큰의 payload 안에 어떤 정보에 접근이 가능한지 정의</li>
</ol>

<p><br /></p>

<h3 id="jwt-종류">JWT 종류</h3>

<p>JWT는 <code class="language-plaintext highlighter-rouge">Access Token</code>, <code class="language-plaintext highlighter-rouge">Refresh Token</code><br />
이 두가지 종류의 토큰을 사용자의 자격 증명에 이용한다.</p>

<p><strong><span style="color:#0066CC">Access Token</span></strong> : 보호된 정보들에 접근할 수 있는 권한을 부여할때 사용<br />
<strong><span style="color:#0066CC">Refresh Token</span></strong> : Access Token의 유효기간이 만료되면 Refresh Token을 이용해<br />
새로운 Access Token을 발급 받는다. (다시 로그인 인증할 필요 X)</p>

<p>Access Token이 탈취당했을 경우 <br />
탈취한 사람이 해당 사용자인 것 처럼 서버에 여러가지 요청을 보낼 수 있다.<br />
그렇기 때문에 탈취당하더라도 오랫동안 사용할 수 없도록<br />
Refresh Token을 사용해 Access Token을 새로 발급을 받는다.</p>

<p>만약 Refresh Token까지 탈취를 당했을 경우<br />
탈취한 사람이 해당 사용자에 큰 해를 입힐 수 있다.<br />
그렇기 때문에 로그인 인증을 다시할 필요없는 편의 같은 기능보다<br />
정보를 지키는 것이 더 중요한 웹 애플리케이션은 Refresh Token을<br />
사용하지 않는 곳이 많다고 한다.<br />
(즉, Access Token 유효기간이 만료되면 재인증을 해야함)</p>

<p><br /></p>

<h3 id="jwt-구조">JWT 구조</h3>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOYuUIX6V7l7AAL_dwuJ4c8dxSmCnlrTXPYPA2gYVV4MM1qyH7K_aGFmXu_Jkx_GYNgHI1jDmR8sJ09gf0bW7f1U9su=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /><br />
<a href="https://catsbi.oopy.io/26b7f35c-e323-4e75-a9ee-2fe3e57ac641">출처 - Catsbi님 blog</a></p>

<p>JWT는 Header.Payload.Signature 구조로 이루어진다.</p>

<p><strong>1). Header</strong><br />
   -&gt; 어떤 종류의 토큰인지  <br />
   -&gt; 어떤 알고리즘으로 암호화 하는지<br />
   -&gt; Header의 JSON 객체를 base64 방식으로 인코딩한다.</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"alg"</span><span class="p">:</span><span class="w"> </span><span class="s2">"HS256"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"typ"</span><span class="p">:</span><span class="w"> </span><span class="s2">"JWT"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><br /></p>

<p><strong>2). Payload</strong><br />
   -&gt; 유저의 정보 (사용자의 이름 등)  <br />
   -&gt; 민감한 정보는 담지 않는 것이 좋다.<br />
   -&gt; 기타 필요한 정보<br />
   -&gt; Payload의 JSON 객체를 base64 방식으로 인코딩한다.</p>
<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"sub"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Information"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"LeeJaehyeok"</span><span class="p">,</span><span class="w">
  </span><span class="nl">"iat"</span><span class="p">:</span><span class="w"> </span><span class="mi">151623391</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p><br /></p>

<p><strong>3). Signature</strong><br />
   -&gt; Header, Payload를 base64 인코딩한 값과 salt값의 조합으로 암호화된 값<br />
   -&gt; 단방향 암호화를 수행한다.<br />
   -&gt; 이렇게 암호화된 메세지는 토큰의 위변조 유무를 검증하는데 사용한다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HMACSHA256(base64UrlEncode(header) + '.' + base64UrlEncode(payload), secret);
</code></pre></div></div>

<p><br /></p>

<h3 id="세션기반-자격증명-vs-토큰기반-자격-증명">세션기반 자격증명 vs 토큰기반 자격 증명</h3>

<p>✅ 세션기반 자격 증명</p>
<ul>
  <li>인증된 사용자 정보를 서버 측 세션 저장소에서 관리한다.</li>
  <li>생성된 사용자 세션의 고유 ID인 세션 ID는 클라이언트의 쿠키에 저장된다.  <br />
request 전송 시, 인증된 사용자인지를 증명하는 수단으로 사용한다.</li>
  <li>세션 ID만 클라이언트 쪽에서 사용해 상대적으로 네트워크 트랙픽을 적게 사용한다.</li>
  <li>서버 측에서 세션 정보를 관리하므로 보안성 측면에서 유리하다.</li>
  <li>서버의 확장성 면에서는 세션 불일치 문제가 발생할 가능성이 높다.</li>
  <li>세션 데이터가 많아질수록 서버으 부담이 가중된다.</li>
  <li>SSR 박식의 애플리케이션에 적합한 방식이다.</li>
</ul>

<p><br /></p>

<p>✅ 토큰기반 자격 증명의 특징</p>
<ul>
  <li>인증된 사용자 정브는 서버 측에서 별도의 관리를 하지 않는다.</li>
  <li>생성된 토큰을 Header에 포함시킨다. request 전승 시, 인증된 사용자인지 증명하는 수단으로 사용된다.</li>
  <li>토큰내에 인증된 사용자 정보 등을 포함하고 있어 세션에 비해 상대적으로 많은 네트워크 트래픽을 사용한다.</li>
  <li>서버 측에서 토큰을 관리하지 않으므로 보안성 측면에서 조금 더 불리하다.</li>
  <li>인증된 사용자 request의 상태를 유지할 필요가 없기 때문에 서버의 확장성면에서 유리하고<br />
세션 불일치 같은 문제가 발생하지 않는다.</li>
  <li>토큰에 포함되는 사용자 정보는 토큰의 특성상 암호화가 되지 않기때문에 공격자에게 토큰이 탈취될 경우<br />
사용자 정보를 그대로 제공하는셈이 되므로 민감한 정보는 토큰에 포함시키지 말아야한다.</li>
  <li>기본적으로 토큰이 만료되기 전까지는 토큰을 모효화 시킬 수 없다.</li>
  <li>CSR 방식의 애플리케이션에 적합한 방식이다.</li>
</ul>

<h3 id="토큰기반-인증절차">토큰기반 인증절차</h3>

<p>아래의 사진은 토큰기반 인증절차에 대한 큰 흐름이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOIQ-igIsxJcmvSaYg6jxG6SeXQZlDrwTmzkQCd2vE2Dy4zpZG_Z_nTqJvBkFwsDBxcZYFe5xKIx86lhvRNC5h92NGU=w1299-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<ol>
  <li>클라이언트에서 로그인 요청을 보냅니다.</li>
  <li>아이디/비밀번호가 일치하는지 확인하고, 클라이언트에게 보낼 암호화된 토큰을 생성합니다.</li>
  <li>토큰을 클라이언트에게 전송하면, 클라이언트는 토큰을 저장합니다.<br />
-&gt; 저장하는 위치는 Local Storage, Session Storage, Cookie 등이 될 수 있다.</li>
  <li>클라리언트가 Headers 또는 쿠키에 토큰을 담아 어떠한 요청을 합니다.</li>
  <li>서버에서 토큰을 검증해 서버에서 발급한 토큰이 맞을 경우, 클라이언트의 요청을 처리한 후 응답을 보낸다.</li>
</ol>

<p><br /></p>

<h3 id="jwt-토큰-만들어보기">JWT 토큰 만들어보기</h3>

<p>Spring Security와 JWT를 같이 사용해보기전에 먼저 <br />
JWT 토큰을 만드는 방법을 코드로 작성해보자</p>

<p><strong>1). 의존 라이브러리 추가</strong></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//jwt 의존 라이브러리</span>
<span class="n">implementation</span> <span class="err">'</span><span class="n">io</span><span class="o">.</span><span class="na">jsonwebtoken</span><span class="o">:</span><span class="n">jjwt</span><span class="o">-</span><span class="nl">api:</span><span class="mf">0.11</span><span class="o">.</span><span class="mi">5</span><span class="err">'</span>
<span class="n">runtimeOnly</span> <span class="err">'</span><span class="n">io</span><span class="o">.</span><span class="na">jsonwebtoken</span><span class="o">:</span><span class="n">jjwt</span><span class="o">-</span><span class="nl">impl:</span><span class="mf">0.11</span><span class="o">.</span><span class="mi">5</span><span class="err">'</span>
<span class="n">runtimeOnly</span>	<span class="err">'</span><span class="n">io</span><span class="o">.</span><span class="na">jsonwebtoken</span><span class="o">:</span><span class="n">jjwt</span><span class="o">-</span><span class="nl">jackson:</span><span class="mf">0.11</span><span class="o">.</span><span class="mi">5</span><span class="err">'</span>
</code></pre></div></div>
<p>우선 build.gradle에 jjwt 의존라이브러리를 추가해준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMK5rCr5B2LRfcaM0vHK_8HL-XpmBLw8J4-SmsT_ZLhCAPgxjzuWPKRWep1z0eOw7WsW7Res6as9NvHmBdxJe1STWkt5A=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>추가된 모습을 확인할 수 있다.</p>

<p><br /></p>

<p><strong>2). AccessToken 만들기</strong><br />
JWT 토큰을 생서해주는 클래스를 만들어보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenizer</span> <span class="o">{</span>
    
   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">encodeBase64SecretKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">secretKey</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">String</span> <span class="n">encode</span> <span class="o">=</span> <span class="nc">Encoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">secretKey</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
      <span class="k">return</span> <span class="n">encode</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">generateAccessToken</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span><span class="o">,</span> <span class="nc">String</span> <span class="n">subject</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiration</span><span class="o">,</span> <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">)</span> <span class="o">{</span>

      <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKeyFormBase64EncodedKey</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>

      <span class="k">return</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
              <span class="o">.</span><span class="na">setClaims</span><span class="o">(</span><span class="n">claims</span><span class="o">)</span> <span class="c1">// Custom Claims를 추가 (인증된 사용자와 관련된 정보)</span>
              <span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">subject</span><span class="o">)</span> <span class="c1">// JWT에 대한 제목을 추가</span>
              <span class="o">.</span><span class="na">setIssuedAt</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getTime</span><span class="o">())</span> <span class="c1">// JWT 발행 일자 설정</span>
              <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="n">expiration</span><span class="o">)</span> <span class="c1">// JWT 만료일자 설정</span>
              <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="c1">// 서명을 위한 Key 객체를 넣어준다.</span>
              <span class="o">.</span><span class="na">compact</span><span class="o">();</span> <span class="c1">// JWT를 생성하고 직렬화해줌</span>
   <span class="o">}</span>
   
   <span class="o">...</span> <span class="n">생략</span>
   
   <span class="kd">private</span> <span class="nc">Key</span> <span class="nf">getKeyFormBase64EncodedKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>
      <span class="kt">byte</span><span class="o">[]</span> <span class="n">keyBytes</span> <span class="o">=</span> <span class="nc">Decoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span> <span class="c1">// 디코딩 진행</span>
      <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Key</span><span class="o">)</span> <span class="nc">Keys</span><span class="o">.</span><span class="na">hmacShaKeyFor</span><span class="o">(</span><span class="n">keyBytes</span><span class="o">);</span> <span class="c1">// HMAC 알고리즘을 적용한 Key 객체 생성</span>
      <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>1). <code class="language-plaintext highlighter-rouge">encodeBase64SecretKey();</code> 메서드<br />
해당 메서드 부터 살펴보면, String 타입의 객체 secretKey라는 것을<br />
매개변수로 받고있다. 받은 매개변수는 Base64 인코딩을 통해 나온 객체를 다시 리턴해준다.<br />
즉, secretKey를 인코딩해주는 메서드이다.</p>

<p>2). <code class="language-plaintext highlighter-rouge">generateAccessToken();</code> 메서드<br />
AccessToken을 만들어주는 메서드이다.<br />
우선 매개변수로 받는 객체는 총 4개가 된다.</p>

<p>Map&lt;String, Object&gt; claims<br />
String subject<br />
Date expiration <br />
String base64EncodedSecretKey</p>

<p>claims 객체는 사용자의 관련된 정보가 Map에 담겨있다.<br />
subject 객체는 해당 토큰의 제목이다.<br />
expriation 객체 같은 경우에는 토큰의 만료 시간을 설정한다.<br />
base64EncodedSecretKey 객체는 <code class="language-plaintext highlighter-rouge">1)번</code>에서 인코딩한 객체를 넣어주면된다.</p>

<p>3). <code class="language-plaintext highlighter-rouge">getKeyFormBase64EncodedKey();</code> 메서드<br />
인코딩으로 받은 객체를 다시 디코딩해주는 메서드이다.<br />
HMAC_SHA 알고리즘을 적용해 Key객체로 만들어 리턴해준다.<br />
해당 키는 <code class="language-plaintext highlighter-rouge">2)번</code>에서 Access Token을 만들대 사용된다.</p>

<p><br /></p>

<p>이렇게 우선 AccessToken을 만들어주는 메서드를 구현했다.<br />
해당 메서드를 테스트코드를 만들어 검증해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@TestInstance</span><span class="o">(</span><span class="nc">TestInstance</span><span class="o">.</span><span class="na">Lifecycle</span><span class="o">.</span><span class="na">PER_CLASS</span><span class="o">)</span> <span class="c1">// 테스트 인스턴스 생성단위가 클래스임</span>
<span class="kd">class</span> <span class="nc">JwtTokenizerTest</span> <span class="o">{</span>
   <span class="kd">private</span> <span class="kd">static</span> <span class="nc">JwtTokenizer</span> <span class="n">jwtTokenizer</span><span class="o">;</span>
   <span class="kd">private</span> <span class="nc">String</span> <span class="n">secretKey</span><span class="o">;</span>
   <span class="kd">private</span> <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">;</span>

   <span class="nd">@BeforeAll</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="o">{</span>
      <span class="n">jwtTokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JwtTokenizer</span><span class="o">();</span>
      <span class="n">secretKey</span> <span class="o">=</span> <span class="s">"LeeJaehyeok637637123231231231123"</span><span class="o">;</span> <span class="c1">// 디코딩값: TGVlSmFlaHllb2s2Mzc2MzcxMjMyMzEyMzEyMzExMg==</span>
      <span class="n">base64EncodedSecretKey</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">encodeBase64SecretKey</span><span class="o">(</span><span class="n">secretKey</span><span class="o">);</span>
   <span class="o">}</span>
   
   <span class="nd">@Test</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">encode64SecretKeyTest</span><span class="o">()</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>
      <span class="n">assertThat</span><span class="o">(</span><span class="n">secretKey</span><span class="o">,</span> <span class="n">is</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="nc">Decoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">))));</span>
   <span class="o">}</span>

   <span class="nd">@Test</span>
   <span class="kd">public</span> <span class="kt">void</span> <span class="nf">generateAccessTokenTest</span><span class="o">(){</span>
      <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">claims</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
      <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"memberId"</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
      <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"roles"</span><span class="o">,</span> <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"USER"</span><span class="o">));</span>

      <span class="nc">String</span> <span class="n">subject</span> <span class="o">=</span> <span class="s">"test access token"</span><span class="o">;</span>
      <span class="nc">Calendar</span> <span class="n">calendar</span> <span class="o">=</span> <span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
      <span class="n">calendar</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">MINUTE</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
      <span class="nc">Date</span> <span class="n">expiration</span> <span class="o">=</span> <span class="n">calendar</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>

      <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">jwtTokenizer</span><span class="o">.</span><span class="na">generateAccessToken</span><span class="o">(</span><span class="n">claims</span><span class="o">,</span> <span class="n">subject</span><span class="o">,</span> <span class="n">expiration</span><span class="o">,</span> <span class="n">base64EncodedSecretKey</span><span class="o">);</span>

      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">accessToken</span><span class="o">);</span>

      <span class="n">assertThat</span><span class="o">(</span><span class="n">accessToken</span><span class="o">,</span> <span class="n">notNullValue</span><span class="o">());</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>위와 같이 테스트 코드를 작성할 수 있다.</p>

<p>테스트를 실행전 secretKey값을 넣어놓고 인코딩한 값을<br />
base64EncodedSecretKey 객체에 넣어두었다.</p>

<p>첫번쨰 테스트 <code class="language-plaintext highlighter-rouge">encode64SecretKeyTest();</code> 메서드는<br />
현재 인코딩된값을 다시 디코딩해 secretKey값과 비교해<br />
같으면 테스트를 통과하는 코드이다.</p>

<p>두번째 테스트 <code class="language-plaintext highlighter-rouge">generateAccessTokenTest();</code> 메서드는<br />
실제로 AccessToken을 만들어보는 테스트이고<br />
위에서 보았던 <code class="language-plaintext highlighter-rouge">generateAccessToken()</code>;의 매개변수에<br />
해당하는 데이터를 만들어서 메서드 실행한다음 반환값을 받으면된다.</p>

<p>실제 해당 반환된 토큰 accessToken를 출력해보면<br />
<code class="language-plaintext highlighter-rouge">eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJVU0VSIl0sIm1lbWJlcklkIjoxLCJzdWIi
OiJ0ZXN0IGFjY2VzcyB0b2tlbiIsImlhdCI6MTY2OTE5MjY0OSwiZXhwIjoxNjY5MTkzMj
Q5fQ.yt_Y741NrTH5l7wsk3oYhbBqkZKgy7GNtJxsI-XuIQg</code></p>

<p>이러한 JWT 토큰이 만들어지는 것을 확인할 수 있고<br />
위에서 공부했던 것 처럼 Header, Payload, Signature로 이루어진 것을 볼 수 있다.</p>

<p>해당 토큰을 <a href="https://jwt.io/">JWT 사이트</a>에서 디코딩 해보면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO_wCj1b91B1IxTjBKbJBSMY_NTzz2HQ5SjXSIlqonhF-Rw9nXUkcUqJWXnZ585EHK7u8dGAODelmV8U6Fl_DM4kVbpCg=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>우리가 정의했던 값으로 해독이 가능한 모습을<br />
확인해볼 수 있다.</p>

<p><br /></p>

<p><strong>3). RefreshToken 만들기</strong><br />
RefreshToken을 만드는 방법은 사실 AccessToken과<br />
동일한 방법으로 만들면된다. 다만 차이점은 claims에 대한 내용만<br />
빠진 상태로 만들면 된다.</p>

<p>아까와 동일한 클래스 JwtTokenizer에다 메서드를 추가해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenizer</span> <span class="o">{</span>
    
   <span class="o">...</span> <span class="n">생략</span>

   <span class="kd">public</span> <span class="nc">String</span> <span class="nf">generateRefreshToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">subject</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiration</span><span class="o">,</span> <span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>
      <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="n">getKeyFormBase64EncodedKey</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span>

      <span class="k">return</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
              <span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">subject</span><span class="o">)</span> <span class="c1">// JWT에 대한 제목을 추가</span>
              <span class="o">.</span><span class="na">setIssuedAt</span><span class="o">(</span><span class="nc">Calendar</span><span class="o">.</span><span class="na">getInstance</span><span class="o">().</span><span class="na">getTime</span><span class="o">())</span> <span class="c1">// JWT 발행 일자 설정</span>
              <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="n">expiration</span><span class="o">)</span> <span class="c1">// JWT 만료일자 설정</span>
              <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">key</span><span class="o">)</span> <span class="c1">// 서명을 위한 Key 객체를 넣어준다.</span>
              <span class="o">.</span><span class="na">compact</span><span class="o">();</span> <span class="c1">// JWT를 생성하고 직렬화해줌</span>
   <span class="o">}</span>
   
   <span class="o">...</span> <span class="n">생략</span>
   
<span class="o">}</span>
</code></pre></div></div>
<p>AcessToken과 다른점은 얘기했듯이<br />
clamis에 대한 내용만 빠진 상태로 Token을 만들어주면된다.</p>

<p><br /></p>

<h3 id="오늘-만난-error">오늘 만난 ERROR</h3>
<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The specified key byte array is 248 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size &gt;= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the io.jsonwebtoken.security.Keys#secretKeyFor(SignatureAlgorithm) method to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
io.jsonwebtoken.security.WeakKeyException: The specified key byte array is 136 bits which is not secure enough for any JWT HMAC-SHA algorithm.  The JWT JWA Specification (RFC 7518, Section 3.2) states that keys used with HMAC-SHA algorithms MUST have a size &gt;= 256 bits (the key size must be greater than or equal to the hash output size).  Consider using the io.jsonwebtoken.security.Keys#secretKeyFor(SignatureAlgorithm) method to create a key guaranteed to be secure enough for your preferred HMAC-SHA algorithm.  See https://tools.ietf.org/html/rfc7518#section-3.2 for more information.
</code></pre></div></div>

<p>HMAC_SHA 알고리즘을 사용 중 발생했던 에러를 적어본다.<br />
알람 발생 경위는 위에 에러 콘솔에서<br />
<code class="language-plaintext highlighter-rouge">HMAC-SHA algorithms MUST have a size &gt;= 256 bits</code>를 보고 알 수 있다.<br />
SecretKey값이 256 bits가 넘지 않아서 발생한 문제로 추청되어</p>

<p>테스트를 진행해봤다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">public</span> <span class="nc">String</span> <span class="nf">encodeBase64SecretKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">secretKey</span><span class="o">){</span>
     <span class="nc">String</span> <span class="n">encode</span> <span class="o">=</span> <span class="nc">Encoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">secretKey</span><span class="o">.</span><span class="na">getBytes</span><span class="o">(</span><span class="nc">StandardCharsets</span><span class="o">.</span><span class="na">UTF_8</span><span class="o">));</span>
     <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"encodeBase64SecretKey Method 실행 { "</span> <span class="o">+</span><span class="s">"secretKEY = "</span><span class="o">+</span> <span class="n">secretKey</span> <span class="o">+</span> <span class="s">" secretKEY.Byte = "</span><span class="o">+</span> <span class="n">secretKey</span><span class="o">.</span><span class="na">getBytes</span><span class="o">().</span><span class="na">length</span> <span class="o">+</span> <span class="s">" Base64 Encode = "</span> <span class="o">+</span> <span class="n">encode</span><span class="o">+</span><span class="s">" }"</span><span class="o">);</span>
     <span class="k">return</span> <span class="n">encode</span><span class="o">;</span>
 <span class="o">}</span>
</code></pre></div></div>
<p>현재 매개변수로 String secretKey를 BASE64로 인코딩 해주는 작업이다.<br />
secretKey = “LeeJaehyeok63763712323123123112”;<br />
실제로 이러한 데이터를 secretKey로 입력했다.</p>

<p>해당 encode 객체로 아래의 메서드의 매개변수로 보내주었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">private</span> <span class="nc">Key</span> <span class="nf">getKeyFormBase64EncodedKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>
     <span class="kt">byte</span><span class="o">[]</span> <span class="n">keyBytes</span> <span class="o">=</span> <span class="nc">Decoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span> <span class="c1">// 디코딩 진행</span>
     <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Key</span><span class="o">)</span> <span class="nc">Keys</span><span class="o">.</span><span class="na">hmacShaKeyFor</span><span class="o">(</span><span class="n">keyBytes</span><span class="o">);</span> <span class="c1">// HMAC 알고리즘을 적용한 Key 객체 생성</span>
     <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
 <span class="o">}</span>
</code></pre></div></div>
<p>첫번째로 인코딩했던 문자열을 디코딩해주고<br />
HMAC_SHA 알고리즘을 통해 Key값으로 바꾸는 작업을 했다.<br />
이떄 여기서 에러가 발생했던 지점이었다.</p>

<p><code class="language-plaintext highlighter-rouge">.hmacShaKeyFor();</code> 안에서 스펙과 맞지않는 디코드값을 <br />
넣어준게 문제인 것 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">private</span> <span class="nc">Key</span> <span class="nf">getKeyFormBase64EncodedKey</span><span class="o">(</span><span class="nc">String</span> <span class="n">base64EncodedSecretKey</span><span class="o">){</span>
     <span class="kt">byte</span><span class="o">[]</span> <span class="n">keyBytes</span> <span class="o">=</span> <span class="nc">Decoders</span><span class="o">.</span><span class="na">BASE64</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">base64EncodedSecretKey</span><span class="o">);</span> <span class="c1">// 디코딩 진행</span>
        
     <span class="c1">// ===========Test 임시 코드===========</span>
     <span class="nc">String</span> <span class="n">test</span> <span class="o">=</span> <span class="s">""</span><span class="o">;</span>
     <span class="k">for</span> <span class="o">(</span><span class="kt">byte</span> <span class="n">s</span> <span class="o">:</span> <span class="n">keyBytes</span><span class="o">){</span>
        <span class="n">test</span> <span class="o">+=</span> <span class="o">(</span><span class="kt">char</span><span class="o">)</span><span class="n">s</span><span class="o">;</span>
     <span class="o">}</span>
     <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">test</span><span class="o">);</span>
     <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">keyBytes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
     <span class="c1">// ==================================</span>
     
     <span class="nc">Key</span> <span class="n">key</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Key</span><span class="o">)</span> <span class="nc">Keys</span><span class="o">.</span><span class="na">hmacShaKeyFor</span><span class="o">(</span><span class="n">keyBytes</span><span class="o">);</span> <span class="c1">// HMAC 알고리즘을 적용한 Key 객체 생성</span>
     <span class="k">return</span> <span class="n">key</span><span class="o">;</span>
 <span class="o">}</span>
</code></pre></div></div>
<p>실제로 디코딩했을때 우리가 넣어줬던</p>

<p><code class="language-plaintext highlighter-rouge">System.out.println(test);</code><br />
LeeJaehyeok63763712323123123112 값이 디코딩된것이 콘솔에 출력되었고</p>

<p><code class="language-plaintext highlighter-rouge">System.out.println(keyBytes.length);</code><br />
31 이라는 값이 출력되었다. 말은 즉슨 31Byte라는 것을 의미한다.</p>

<p>그러면 우리가 처음에 넣어줬던 secretKey는 31 Bytes였고<br />
Bit로 환산해보면 1Byte = 8 Bit로 계산되어지니<br />
<code class="language-plaintext highlighter-rouge">8 * 31 = 248</code>, 즉 248bits로 계산되어진다.</p>

<p>그러면 우리가 처음에 봤던 에러콘솔 첫줄에<br />
<code class="language-plaintext highlighter-rouge">The specified key byte array is 248 bits which is not secure enough for any JWT HMAC-SHA algorithm.</code> 이러한 구문이 있었고, 우리가 정의한 byte가 248 bits이니까<br />
<code class="language-plaintext highlighter-rouge">size &gt;= 256 bits</code>를 넘기게 만들라는 뜻으로 해석할 수 있다.</p>

<p>즉, secretKey의 String Byte값을 지정했을때<br />
<code class="language-plaintext highlighter-rouge">32 Bytes = 256 Bits</code>가 넘지 않아서 생기는 문제였던 것!</p>

<p>그래서 secretKey값을 LeeJaehyeok637637123231231231123로<br />
뒤에 숫자하나를 추가했더니 정상적으로 작동하는 모습을 볼 수 있었다.</p>

<p><br /></p>

<hr />

<p>이렇게 오늘은 JWT와 인증과 관련된 기초지식을<br />
먼저 배웠고, 내일부터는 Spring Security와 같이 사용해볼 것 같다.</p>

<p>사실 오늘은 토큰을 생성하는 법만 배웠고 더 나아간 학습을
진행하지 않았기 때문에 클라이엔트에 어떻게 보내줄지<br />
혹시 요청을 받을때 JWT를 해독해 검증하는 과정을 어떻게할지<br />
아직 머리속에서 마땅한 그림은 떠오르지 않는 상태이다.</p>

<p>모쪼록 내일까지 JWT 인증과 관련된 부분을 잘 마무리 해보자<br />
오늘 공부는 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 삽겹살, 라면, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[확실히 Spring 관련된 기술을 사용하면서 프로그래밍을 하고 있다는 느낌이 들때가 많아서 좋다.]]></summary></entry><entry><title type="html">TIL) Spring Security 3 (권한부여)</title><link href="http://localhost:4000/til/2022/11/22/til.html" rel="alternate" type="text/html" title="TIL) Spring Security 3 (권한부여)" /><published>2022-11-22T00:00:00+09:00</published><updated>2022-11-22T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/22/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/22/til.html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO-9XVEAUETJGFf5AjYCUCurD1z-9yBYl4hAKS_SdfBOSr5ac7uSAlI8PoCiXakOadLKWhnBi-RnF5XAFfKoh4ynbCMmQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>어제 공부했던 Spring Security 인증처리 과정에서대해<br />
코드를 찾아가보면서 어느정도 깨달음이 있어서<br />
진전이 있는 느낌이 들어 오랜만에 편안한 마음으로 공부를 했다.</p>

<p>오늘은 Spring Security 권한관련 Filter를 공부하는 날이고<br />
섹션 중 Spring Security는 마지막인 시간이다.</p>

<hr />

<p>어제 <a href="https://mycatlikeschuru.github.io/til/2022/11/21/til.html">(Spring Security 인증처리)</a>에 대한 내용을<br />
코드와 아케텍쳐를 통해 쭉 살펴보았다.</p>

<p>오늘은 권한과 관련된 Filter인<br />
<code class="language-plaintext highlighter-rouge">AuthorizationFilter</code> 클래스에 대한 권한 부여의<br />
간단한 처리 흐름과 코드를 살펴보려고한다.</p>

<p><br /></p>

<h2 id="spring-security-권한부여">Spring Security 권한부여</h2>

<p>어제는 인증처리에 관련된 내용을 배웠다.<br />
인증이란 이 사이트를 이용할 수 있는 유저인지 확인하는 과정이다.<br />
하지만 권한부여는 뭘까?</p>

<p>인증된 사용자가 모든 리소스에 접근을 제한하는 것을 말한다. <br />
헤딩 사용자가 이용할 수 있는 리소스를 제한하거나 풀어주는 것을<br />
권한 부여라고 한다.</p>

<p><br /></p>

<h3 id="권한부여-처리흐름">권한부여 처리흐름</h3>

<p><strong>AuthorizationFilter</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOQXGNO9jp7S5n8BR1acug8wbYP2K5CODLz3E8JL1OYltFHyEMNavYMMn7otGOC4UHR5N_85NhELKDMT5Cm9oKCeMjE=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>Spring Security에서는 권한 부여를 위해<br />
<code class="language-plaintext highlighter-rouge">AuthorizationFilter</code> 클래스를 이용해 처리를 한다.</p>

<p>SecurityFilterChain을 구성하는 Filter 중 하나로<br />
인증 Filter를 거친 후 진행하게 되어진다.<br />
본격적으로 <code class="language-plaintext highlighter-rouge">AuthorizationFilter</code>의 권한처리 흐름을 알아보자</p>

<p><br /></p>

<p>(1). <code class="language-plaintext highlighter-rouge">SecurityContextHolder</code>로 부터 <code class="language-plaintext highlighter-rouge">Authentication</code> 객채를 가져온다.<br />
<a href="https://mycatlikeschuru.github.io/til/2022/11/21/til.html">(Spring Security 인증처리)</a> 과정에서 인증이 완료된 객체 <code class="language-plaintext highlighter-rouge">Authentication</code>를 <br />
<code class="language-plaintext highlighter-rouge">SecurityContextHolder</code>에 넣어줬던 흐름이 인증처리의 마지막이어었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationFilter</span> <span class="kd">extends</span> <span class="nc">OncePerRequestFilter</span> <span class="o">{</span>
    
    <span class="o">...</span> <span class="n">이상</span> <span class="n">생략</span>
    
    <span class="kd">private</span> <span class="nc">Authentication</span> <span class="nf">getAuthentication</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="nc">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getAuthentication</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">authentication</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthenticationCredentialsNotFoundException</span><span class="o">(</span>
                    <span class="s">"An Authentication object was not found in the SecurityContext"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">authentication</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="o">...</span> <span class="n">이하</span> <span class="n">생략</span>
            
<span class="o">}</span>
</code></pre></div></div>
<p>실제로 <code class="language-plaintext highlighter-rouge">AuthorizationFilter</code> 클래스 코드 중 <code class="language-plaintext highlighter-rouge">getAuthentication();</code> 메서드를 이용해  <br />
<code class="language-plaintext highlighter-rouge">Authentication</code> 객체를 꺼내는 모습을 코드로 볼 수 있다.</p>

<p><br /></p>

<p>(2). <code class="language-plaintext highlighter-rouge">Authentication</code> 객체와 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code> 객체를<br />
<code class="language-plaintext highlighter-rouge">AuthorizationManager</code>에게 전달한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationFilter</span> <span class="kd">extends</span> <span class="nc">OncePerRequestFilter</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">HttpServletRequest</span><span class="o">&gt;</span> <span class="n">authorizationManager</span><span class="o">;</span>
     
    <span class="o">...</span> <span class="n">생략</span>
    
    <span class="kd">public</span> <span class="nf">AuthorizationFilter</span><span class="o">(</span><span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">HttpServletRequest</span><span class="o">&gt;</span> <span class="n">authorizationManager</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">authorizationManager</span><span class="o">,</span> <span class="s">"authorizationManager cannot be null"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authorizationManager</span> <span class="o">=</span> <span class="n">authorizationManager</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

        <span class="nc">AuthorizationDecision</span> <span class="n">decision</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">authorizationManager</span><span class="o">.</span><span class="na">check</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getAuthentication</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">eventPublisher</span><span class="o">.</span><span class="na">publishAuthorizationEvent</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getAuthentication</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">decision</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">decision</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">decision</span><span class="o">.</span><span class="na">isGranted</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">AccessDeniedException</span><span class="o">(</span><span class="s">"Access Denied"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="o">...</span> <span class="n">이하</span> <span class="n">생략</span>

<span class="o">}</span>

</code></pre></div></div>
<p>실제로 코드를 확인해보면<br />
생성자로 <code class="language-plaintext highlighter-rouge">AuthorizationManager</code>의 객체를 DI받고 있다.<br />
그리고 <code class="language-plaintext highlighter-rouge">.check(this::getAuthentication, request);</code> 메서드를 호출해<br />
<code class="language-plaintext highlighter-rouge">Authentication</code>와 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code> 객체를 매개변수로 넘겨주고있다.</p>

<p><br /></p>

<p>(3). <code class="language-plaintext highlighter-rouge">AuthorizationManager</code>는 <br />
권한 부여 처리를 총괄하는 매니저 역할의 인터페이스이다.<br />
구현체는  <code class="language-plaintext highlighter-rouge">RequestMatcherDelegatingAuthorizationManager</code> 클래스이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    
    <span class="o">...</span> <span class="n">이상</span> <span class="n">생략</span>

	<span class="nd">@Nullable</span>
	<span class="nc">AuthorizationDecision</span> <span class="nf">check</span><span class="o">(</span><span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Authentication</span><span class="o">&gt;</span> <span class="n">authentication</span><span class="o">,</span> <span class="no">T</span> <span class="n">object</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>코드로도 볼 수 있듯이 인터페이스에 메서드가 정의되어있고</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">RequestMatcherDelegatingAuthorizationManager</span> <span class="kd">implements</span> <span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">HttpServletRequest</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="n">이상</span> <span class="n">생략</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">AuthorizationDecision</span> <span class="nf">check</span><span class="o">(</span><span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Authentication</span><span class="o">&gt;</span> <span class="n">authentication</span><span class="o">,</span> <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">isTraceEnabled</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="nc">LogMessage</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Authorizing %s"</span><span class="o">,</span> <span class="n">request</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">RequestMatcherEntry</span><span class="o">&lt;</span><span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">RequestAuthorizationContext</span><span class="o">&gt;&gt;</span> <span class="n">mapping</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">)</span> <span class="o">{</span>

            <span class="nc">RequestMatcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="n">mapping</span><span class="o">.</span><span class="na">getRequestMatcher</span><span class="o">();</span>
            <span class="nc">MatchResult</span> <span class="n">matchResult</span> <span class="o">=</span> <span class="n">matcher</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">matchResult</span><span class="o">.</span><span class="na">isMatch</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">RequestAuthorizationContext</span><span class="o">&gt;</span> <span class="n">manager</span> <span class="o">=</span> <span class="n">mapping</span><span class="o">.</span><span class="na">getEntry</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">isTraceEnabled</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="nc">LogMessage</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Checking authorization on %s using %s"</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">manager</span><span class="o">));</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="n">manager</span><span class="o">.</span><span class="na">check</span><span class="o">(</span><span class="n">authentication</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">RequestAuthorizationContext</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">matchResult</span><span class="o">.</span><span class="na">getVariables</span><span class="o">()));</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="s">"Abstaining since did not find matching RequestMatcher"</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="o">...</span> <span class="n">이하</span> <span class="n">생략</span>
            
<span class="o">}</span>
</code></pre></div></div>
<p>구현체인 <code class="language-plaintext highlighter-rouge">RequestMatcherDelegatingAuthorizationManager</code> 클래스에<br />
<code class="language-plaintext highlighter-rouge">check();</code>메서드가 Override되어 있는 모습을 확인할 수 있다.</p>

<p><br /></p>

<p>(4),(5). 이제 전달받은 객체들로 <code class="language-plaintext highlighter-rouge">check();</code> 메서드 내부에서<br />
권한 처리에 대한 로직이 수행된다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">RequestMatcherEntry</code> 정보를 얻은 후에 <code class="language-plaintext highlighter-rouge">RequestMatcher</code> 객체를 얻는다.</li>
  <li><code class="language-plaintext highlighter-rouge">RequestMatcher</code> 객체로 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code> 객체를 넣어 <code class="language-plaintext highlighter-rouge">MatchResult</code> 객체를 만든다.</li>
  <li><code class="language-plaintext highlighter-rouge">MatchResult</code> 객체의 메서드 <code class="language-plaintext highlighter-rouge">.isMatch();</code>로 권한을 체크한다.</li>
</ol>

<p>만약에 권한이 존재해 <code class="language-plaintext highlighter-rouge">if (matchResult.isMatch())</code> 메서드를 통과한다면<br />
<code class="language-plaintext highlighter-rouge">manager.check();</code>를 통해서 <code class="language-plaintext highlighter-rouge">matchResult.getVariables();</code>를 통해서<br />
Map을 담고있는 객체가 반환되며 권한 부여과정이 진행되고</p>

<p>만약에 권한이 존재하지 않아 <code class="language-plaintext highlighter-rouge">if (matchResult.isMatch())</code> 메서드를 통과하지 못한다면<br />
<code class="language-plaintext highlighter-rouge">return null;</code>로 인해 null값이 반환되게 되어진다.<br />
즉, 맨처음에 우리가 <code class="language-plaintext highlighter-rouge">check();</code>메서드를 호출했던 <code class="language-plaintext highlighter-rouge">AuthorizationFilter</code>에서</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span>
        <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

    <span class="nc">AuthorizationDecision</span> <span class="n">decision</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">authorizationManager</span><span class="o">.</span><span class="na">check</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getAuthentication</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">eventPublisher</span><span class="o">.</span><span class="na">publishAuthorizationEvent</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getAuthentication</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">decision</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">decision</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">decision</span><span class="o">.</span><span class="na">isGranted</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AccessDeniedException</span><span class="o">(</span><span class="s">"Access Denied"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">throw new AccessDeniedException("Access Denied");</code> 예외를 던지게되어<br />
권한을 부여하지 않도록 처리를 해주는 것이다.</p>

<p><br /></p>

<h3 id="접근-제어-표현식">접근 제어 표현식</h3>

<p>Spring Security 웹 및 메서드 보안을 위한 표현식</p>

<p><strong>Spring EL</strong></p>

<table>
  <tbody>
    <tr>
      <td>표현식</td>
      <td>: 설명 :</td>
    </tr>
    <tr>
      <td>hasRole</td>
      <td>현재 보안 주체(principal)가 지정된 역할을 갖고 있는지 여부를 확인하고 가지고 있다면 true를 리턴한다. <br /> hasRole(’admin’)처럼 파라미터로 넘긴 role이 ROLE_ 로 시작하지 않으면 기본적으로 추가한다. <br /> (DefaultWebSecurityExpressionHandler의 defaultRolePrefix를 수정하면 커스텀할 수 있다.)</td>
    </tr>
    <tr>
      <td>hasAnyRole</td>
      <td>현재 보안 주체가 지정한 역할 중 1개라도 가지고 있으면 true를 리턴한다. (문자열 리스트를 콤마로 구분해서 전달한다.) <br /> ex) hasAnyRole(’admin’, ‘user’)</td>
    </tr>
    <tr>
      <td>hasAuthority</td>
      <td>현재 보안 주체가 지정한 권한을 갖고 있는지 여부를 확인하고 가지고 있다면 true를 리턴한다. <br /> ex) hasAuthority(’read’)</td>
    </tr>
    <tr>
      <td>hasAnyAuthority</td>
      <td>현재 보안 주체가 지정한 권한 중 하나라도 있으면 true를 리턴한다. <br /> ex) hasAnyAuthority(’read’, ‘write’)</td>
    </tr>
    <tr>
      <td>principal</td>
      <td>현재 사용자를 나타내는 principal 객체에 직접 접근할 수 있다.</td>
    </tr>
    <tr>
      <td>authentication</td>
      <td>SecurityContext로 조회할 수 있는 현재 Authentication 객체에 직접 접근할 수 있다.</td>
    </tr>
    <tr>
      <td>permitAll</td>
      <td>항상 true로 평가한다.</td>
    </tr>
    <tr>
      <td>denyAll</td>
      <td>항상 false로 평가한다.</td>
    </tr>
    <tr>
      <td>isAnonymous()</td>
      <td>현재 보안 주체가 익명 사용자면 true를 리턴한다.</td>
    </tr>
    <tr>
      <td>isRememberMe()</td>
      <td>현재 보안 주체가 remember-me 사용자면 true를 리턴한다.</td>
    </tr>
    <tr>
      <td>isAuthenticated()</td>
      <td>사용자가 익명이 아닌 경우 true를 리턴한다.</td>
    </tr>
    <tr>
      <td>isFullyAuthenticated()</td>
      <td>사용자가 익명 사용자나 remember-me 사용자가 아니면 true를 리턴한다.</td>
    </tr>
    <tr>
      <td>hasPermission <br /> (Object target, Object permission)</td>
      <td>사용자가 target에 해당 permission 권한이 있으면 true를 리턴한다. <br /> ex) hasPermission(domainObject, ‘read’)</td>
    </tr>
    <tr>
      <td>hasPermission <br /> (Object targetId, String targetType, Object permission)</td>
      <td>사용자가 target에 해당 permission 권한이 있으면 true를 리턴한다. <br /> ex) hasPermission(1, ‘com.example.domain.Message’, ‘read’)</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<hr />

<p>이렇게 오늘을 끝으로 Spring Security의<br />
인증과 권한에 대해 알아보았다.<br />
좀 더 깊은내용을 이해하기 위해서는 여러가지 Filter에 대해 공부가<br />
필요해보이고, 내일부터 공부하는 JWT를 이용할때 어떠한 방식으로<br />
Spring Security 로직이 변경되는지 내일부터 다시 공부해보자</p>

<p>오늘 공부는 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 삽겹살, 된장찌개, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[]]></summary></entry></feed>