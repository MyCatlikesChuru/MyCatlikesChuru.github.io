<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-22T20:17:51+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">LeeJellan</title><subtitle>안녕하세요!🙂 IT,여행,기타 등 기록을 남기기위한 블로그 입니다 !</subtitle><author><name>LEE JAEHYEOK</name></author><entry><title type="html">TIL) Spring Security 3 (권한부여)</title><link href="http://localhost:4000/til/2022/11/22/til.html" rel="alternate" type="text/html" title="TIL) Spring Security 3 (권한부여)" /><published>2022-11-22T00:00:00+09:00</published><updated>2022-11-22T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/22/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/22/til.html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gO-9XVEAUETJGFf5AjYCUCurD1z-9yBYl4hAKS_SdfBOSr5ac7uSAlI8PoCiXakOadLKWhnBi-RnF5XAFfKoh4ynbCMmQ=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>어제 공부했던 Spring Security 인증처리 과정에서대해<br />
코드를 찾아가보면서 어느정도 깨달음이 있어서<br />
진전이 있는 느낌이 들어 오랜만에 편안한 마음으로 공부를 했다.</p>

<p>오늘은 Spring Security 권한관련 Filter를 공부하는 날이고<br />
섹션 중 Spring Security는 마지막인 시간이다.</p>

<hr />

<p>어제 <a href="https://mycatlikeschuru.github.io/til/2022/11/21/til.html">(Spring Security 인증처리)</a>에 대한 내용을<br />
코드와 아케텍쳐를 통해 쭉 살펴보았다.</p>

<p>오늘은 권한과 관련된 Filter인<br />
<code class="language-plaintext highlighter-rouge">AuthorizationFilter</code> 클래스에 대한 권한 부여의<br />
간단한 처리 흐름과 코드를 살펴보려고한다.</p>

<p><br /></p>

<h2 id="spring-security-권한부여">Spring Security 권한부여</h2>

<p>어제는 인증처리에 관련된 내용을 배웠다.<br />
인증이란 이 사이트를 이용할 수 있는 유저인지 확인하는 과정이다.<br />
하지만 권한부여는 뭘까?</p>

<p>인증된 사용자가 모든 리소스에 접근을 제한하는 것을 말한다. <br />
헤딩 사용자가 이용할 수 있는 리소스를 제한하거나 풀어주는 것을<br />
권한 부여라고 한다.</p>

<p><br /></p>

<h3 id="권한부여-처리흐름">권한부여 처리흐름</h3>

<p><strong>AuthorizationFilter</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOQXGNO9jp7S5n8BR1acug8wbYP2K5CODLz3E8JL1OYltFHyEMNavYMMn7otGOC4UHR5N_85NhELKDMT5Cm9oKCeMjE=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>Spring Security에서는 권한 부여를 위해<br />
<code class="language-plaintext highlighter-rouge">AuthorizationFilter</code> 클래스를 이용해 처리를 한다.</p>

<p>SecurityFilterChain을 구성하는 Filter 중 하나로<br />
인증 Filter를 거친 후 진행하게 되어진다.<br />
본격적으로 <code class="language-plaintext highlighter-rouge">AuthorizationFilter</code>의 권한처리 흐름을 알아보자</p>

<p><br /></p>

<p>(1). <code class="language-plaintext highlighter-rouge">SecurityContextHolder</code>로 부터 <code class="language-plaintext highlighter-rouge">Authentication</code> 객채를 가져온다.<br />
<a href="https://mycatlikeschuru.github.io/til/2022/11/21/til.html">(Spring Security 인증처리)</a> 과정에서 인증이 완료된 객체 <code class="language-plaintext highlighter-rouge">Authentication</code>를 <br />
<code class="language-plaintext highlighter-rouge">SecurityContextHolder</code>에 넣어줬던 흐름이 인증처리의 마지막이어었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationFilter</span> <span class="kd">extends</span> <span class="nc">OncePerRequestFilter</span> <span class="o">{</span>
    
    <span class="o">...</span> <span class="n">이상</span> <span class="n">생략</span>
    
    <span class="kd">private</span> <span class="nc">Authentication</span> <span class="nf">getAuthentication</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="nc">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getAuthentication</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">authentication</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">AuthenticationCredentialsNotFoundException</span><span class="o">(</span>
                    <span class="s">"An Authentication object was not found in the SecurityContext"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">authentication</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="o">...</span> <span class="n">이하</span> <span class="n">생략</span>
            
<span class="o">}</span>
</code></pre></div></div>
<p>실제로 <code class="language-plaintext highlighter-rouge">AuthorizationFilter</code> 클래스 코드 중 <code class="language-plaintext highlighter-rouge">getAuthentication();</code> 메서드를 이용해  <br />
<code class="language-plaintext highlighter-rouge">Authentication</code> 객체를 꺼내는 모습을 코드로 볼 수 있다.</p>

<p><br /></p>

<p>(2). <code class="language-plaintext highlighter-rouge">Authentication</code> 객체와 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code> 객체를<br />
<code class="language-plaintext highlighter-rouge">AuthorizationManager</code>에게 전달한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthorizationFilter</span> <span class="kd">extends</span> <span class="nc">OncePerRequestFilter</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">HttpServletRequest</span><span class="o">&gt;</span> <span class="n">authorizationManager</span><span class="o">;</span>
     
    <span class="o">...</span> <span class="n">생략</span>
    
    <span class="kd">public</span> <span class="nf">AuthorizationFilter</span><span class="o">(</span><span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">HttpServletRequest</span><span class="o">&gt;</span> <span class="n">authorizationManager</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Assert</span><span class="o">.</span><span class="na">notNull</span><span class="o">(</span><span class="n">authorizationManager</span><span class="o">,</span> <span class="s">"authorizationManager cannot be null"</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authorizationManager</span> <span class="o">=</span> <span class="n">authorizationManager</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span>
            <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

        <span class="nc">AuthorizationDecision</span> <span class="n">decision</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">authorizationManager</span><span class="o">.</span><span class="na">check</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getAuthentication</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">eventPublisher</span><span class="o">.</span><span class="na">publishAuthorizationEvent</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getAuthentication</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">decision</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">decision</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">decision</span><span class="o">.</span><span class="na">isGranted</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">AccessDeniedException</span><span class="o">(</span><span class="s">"Access Denied"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="o">...</span> <span class="n">이하</span> <span class="n">생략</span>

<span class="o">}</span>

</code></pre></div></div>
<p>실제로 코드를 확인해보면<br />
생성자로 AuthorizationManager의 객체를 DI받고 있다.<br />
그리고 <code class="language-plaintext highlighter-rouge">.check(this::getAuthentication, request);</code> 메서드를 호출해<br />
<code class="language-plaintext highlighter-rouge">Authentication</code>와 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code> 객체를 매개변수로 넘겨주고있다.</p>

<p><br /></p>

<p>(3). <code class="language-plaintext highlighter-rouge">AuthorizationManager</code>는 <br />
권한 부여 처리를 총괄하는 매니저 역할의 인터페이스이다.<br />
구현체는  <code class="language-plaintext highlighter-rouge">RequestMatcherDelegatingAuthorizationManager</code> 클래스이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    
    <span class="o">...</span> <span class="n">이상</span> <span class="n">생략</span>

	<span class="nd">@Nullable</span>
	<span class="nc">AuthorizationDecision</span> <span class="nf">check</span><span class="o">(</span><span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Authentication</span><span class="o">&gt;</span> <span class="n">authentication</span><span class="o">,</span> <span class="no">T</span> <span class="n">object</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>코드로도 볼 수 있듯이 인터페이스에 메서드가 정의되어있고</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">RequestMatcherDelegatingAuthorizationManager</span> <span class="kd">implements</span> <span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">HttpServletRequest</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="o">...</span>
    <span class="n">이상</span> <span class="n">생략</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">AuthorizationDecision</span> <span class="nf">check</span><span class="o">(</span><span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Authentication</span><span class="o">&gt;</span> <span class="n">authentication</span><span class="o">,</span> <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">isTraceEnabled</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="nc">LogMessage</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Authorizing %s"</span><span class="o">,</span> <span class="n">request</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">RequestMatcherEntry</span><span class="o">&lt;</span><span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">RequestAuthorizationContext</span><span class="o">&gt;&gt;</span> <span class="n">mapping</span> <span class="o">:</span> <span class="k">this</span><span class="o">.</span><span class="na">mappings</span><span class="o">)</span> <span class="o">{</span>

            <span class="nc">RequestMatcher</span> <span class="n">matcher</span> <span class="o">=</span> <span class="n">mapping</span><span class="o">.</span><span class="na">getRequestMatcher</span><span class="o">();</span>
            <span class="nc">MatchResult</span> <span class="n">matchResult</span> <span class="o">=</span> <span class="n">matcher</span><span class="o">.</span><span class="na">matcher</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">matchResult</span><span class="o">.</span><span class="na">isMatch</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">AuthorizationManager</span><span class="o">&lt;</span><span class="nc">RequestAuthorizationContext</span><span class="o">&gt;</span> <span class="n">manager</span> <span class="o">=</span> <span class="n">mapping</span><span class="o">.</span><span class="na">getEntry</span><span class="o">();</span>
                <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">isTraceEnabled</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="nc">LogMessage</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Checking authorization on %s using %s"</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">manager</span><span class="o">));</span>
                <span class="o">}</span>
                <span class="k">return</span> <span class="n">manager</span><span class="o">.</span><span class="na">check</span><span class="o">(</span><span class="n">authentication</span><span class="o">,</span>
                        <span class="k">new</span> <span class="nf">RequestAuthorizationContext</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">matchResult</span><span class="o">.</span><span class="na">getVariables</span><span class="o">()));</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">this</span><span class="o">.</span><span class="na">logger</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="s">"Abstaining since did not find matching RequestMatcher"</span><span class="o">);</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="o">...</span> <span class="n">이하</span> <span class="n">생략</span>
            
<span class="o">}</span>
</code></pre></div></div>
<p>구현체인 <code class="language-plaintext highlighter-rouge">RequestMatcherDelegatingAuthorizationManager</code> 클래스에<br />
<code class="language-plaintext highlighter-rouge">check();</code>메서드가 Override되어 있는 모습을 확인할 수 있다.</p>

<p><br /></p>

<p>(4),(5). 이제 전달받은 객체들로 <code class="language-plaintext highlighter-rouge">check();</code> 메서드 내부에서<br />
권한 처리에 대한 로직이 수행된다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">RequestMatcherEntry</code> 정보를 얻은 후에 <code class="language-plaintext highlighter-rouge">RequestMatcher</code> 객체를 얻는다.</li>
  <li><code class="language-plaintext highlighter-rouge">RequestMatcher</code> 객체로 <code class="language-plaintext highlighter-rouge">HttpServletRequest</code> 객체를 넣어 <code class="language-plaintext highlighter-rouge">MatchResult</code> 객체를 만든다.</li>
  <li><code class="language-plaintext highlighter-rouge">MatchResult</code> 객체의 메서드 <code class="language-plaintext highlighter-rouge">.isMatch();</code>로 권한을 체크한다.</li>
</ol>

<p>만약에 권한이 존재해 <code class="language-plaintext highlighter-rouge">if (matchResult.isMatch())</code> 메서드를 통과한다면<br />
<code class="language-plaintext highlighter-rouge">manager.check();</code>를 통해서 <code class="language-plaintext highlighter-rouge">matchResult.getVariables();</code>를 통해서<br />
Map을 담고있는 객체가 반환되며 권한 부여과정이 진행되고</p>

<p>만약에 권한이 존재하지 않아 <code class="language-plaintext highlighter-rouge">if (matchResult.isMatch())</code> 메서드를 통과하지 못한다면<br />
<code class="language-plaintext highlighter-rouge">return null;</code>로 인해 null값이 반환되게 되어진다.<br />
즉, 맨처음에 우리가 <code class="language-plaintext highlighter-rouge">check();</code>메서드를 호출했던 <code class="language-plaintext highlighter-rouge">AuthorizationFilter</code>에서</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span>
        <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

    <span class="nc">AuthorizationDecision</span> <span class="n">decision</span> <span class="o">=</span> <span class="k">this</span><span class="o">.</span><span class="na">authorizationManager</span><span class="o">.</span><span class="na">check</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getAuthentication</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
    <span class="k">this</span><span class="o">.</span><span class="na">eventPublisher</span><span class="o">.</span><span class="na">publishAuthorizationEvent</span><span class="o">(</span><span class="k">this</span><span class="o">::</span><span class="n">getAuthentication</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">decision</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">decision</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">decision</span><span class="o">.</span><span class="na">isGranted</span><span class="o">())</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">AccessDeniedException</span><span class="o">(</span><span class="s">"Access Denied"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">throw new AccessDeniedException("Access Denied");</code> 예외를 던지게되어<br />
권한을 부여하지 않도록 처리를 해주는 것이다.</p>

<p><br /></p>

<h3 id="접근-제어-표현식">접근 제어 표현식</h3>

<p>Spring Security 웹 및 메서드 보안을 위한 표현식</p>

<p><strong>Spring EL</strong></p>

<table>
  <tbody>
    <tr>
      <td>표현식</td>
      <td>: 설명 :</td>
    </tr>
    <tr>
      <td>hasRole</td>
      <td>현재 보안 주체(principal)가 지정된 역할을 갖고 있는지 여부를 확인하고 가지고 있다면 true를 리턴한다. <br /> hasRole(’admin’)처럼 파라미터로 넘긴 role이 ROLE_ 로 시작하지 않으면 기본적으로 추가한다. <br /> (DefaultWebSecurityExpressionHandler의 defaultRolePrefix를 수정하면 커스텀할 수 있다.)</td>
    </tr>
    <tr>
      <td>hasAnyRole</td>
      <td>현재 보안 주체가 지정한 역할 중 1개라도 가지고 있으면 true를 리턴한다. (문자열 리스트를 콤마로 구분해서 전달한다.) <br /> ex) hasAnyRole(’admin’, ‘user’)</td>
    </tr>
    <tr>
      <td>hasAuthority</td>
      <td>현재 보안 주체가 지정한 권한을 갖고 있는지 여부를 확인하고 가지고 있다면 true를 리턴한다. <br /> ex) hasAuthority(’read’)</td>
    </tr>
    <tr>
      <td>hasAnyAuthority</td>
      <td>현재 보안 주체가 지정한 권한 중 하나라도 있으면 true를 리턴한다. <br /> ex) hasAnyAuthority(’read’, ‘write’)</td>
    </tr>
    <tr>
      <td>principal</td>
      <td>현재 사용자를 나타내는 principal 객체에 직접 접근할 수 있다.</td>
    </tr>
    <tr>
      <td>authentication</td>
      <td>SecurityContext로 조회할 수 있는 현재 Authentication 객체에 직접 접근할 수 있다.</td>
    </tr>
    <tr>
      <td>permitAll</td>
      <td>항상 true로 평가한다.</td>
    </tr>
    <tr>
      <td>denyAll</td>
      <td>항상 false로 평가한다.</td>
    </tr>
    <tr>
      <td>isAnonymous()</td>
      <td>현재 보안 주체가 익명 사용자면 true를 리턴한다.</td>
    </tr>
    <tr>
      <td>isRememberMe()</td>
      <td>현재 보안 주체가 remember-me 사용자면 true를 리턴한다.</td>
    </tr>
    <tr>
      <td>isAuthenticated()</td>
      <td>사용자가 익명이 아닌 경우 true를 리턴한다.</td>
    </tr>
    <tr>
      <td>isFullyAuthenticated()</td>
      <td>사용자가 익명 사용자나 remember-me 사용자가 아니면 true를 리턴한다.</td>
    </tr>
    <tr>
      <td>hasPermission <br /> (Object target, Object permission)</td>
      <td>사용자가 target에 해당 permission 권한이 있으면 true를 리턴한다. <br /> ex) hasPermission(domainObject, ‘read’)</td>
    </tr>
    <tr>
      <td>hasPermission <br /> (Object targetId, String targetType, Object permission)</td>
      <td>사용자가 target에 해당 permission 권한이 있으면 true를 리턴한다. <br /> ex) hasPermission(1, ‘com.example.domain.Message’, ‘read’)</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<hr />

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 삽겹살, 된장찌개, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">TIL) Spring Security 2 (인증처리)</title><link href="http://localhost:4000/til/2022/11/21/til.html" rel="alternate" type="text/html" title="TIL) Spring Security 2 (인증처리)" /><published>2022-11-21T00:00:00+09:00</published><updated>2022-11-21T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/21/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/21/til.html"><![CDATA[<p>주말이라는 것은… 사람을 참 나태하게 만들기도<br />
활력을 공급하기도 하는 것 같다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOjX-PSPnxF_8TEMdso4KXA0JFYzGA1vArqAdtB6h1-NxbA6XRbp-Xy587IzIYiyL_lKX7HXm5PYPHWKxXIq9zV_OpOtA=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>토요일까지 Spring Security를 공부하다가 번아웃이와<br />
일요일에 너무 게으르게 누워만 있었더니<br />
유튜브 나태지옥에 다시 빠져버렸다.</p>

<hr />

<p>저번주에 Spring Security를 사용하는 예제 코드와<br />
간단한 흐름을 알아보았다.<br />
그중 Filter라는 것들을 배웠고 Spring Security도<br />
Filter로 구성된 FilterChain으로 구동하는 것도 배웠다.</p>

<p>오늘은 그 중에서 인증관련된 Filter를 자세히 알아보자</p>

<h2 id="spring-security-인증">Spring Security 인증</h2>

<h3 id="filter-흐름-복습">Filter 흐름 복습</h3>

<p>저번주에 공부했었던 <a href="https://mycatlikeschuru.github.io/til/2022/11/18/til.html">(Spring Security 기초)</a>의 흐름을 다시한번 짚고 넘어가자</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOdqM4FUdK-kbSe3fOY-_nbwexPCpzCoO0wU4fxsPySDcyhG4ju9jOfdiay5TA0GmdJqNj0L4UZcOZGIHz9XGJLAcqNlw=w1299-h921" alt="image" class="align-left" style="max-width: 60%" /></p>

<p>클라이언트에서 요청이오면<br />
Filter들의 모임인 FilterChain을 거쳐 하나씩 실행한다.<br />
그 중 FilterChainProxy 클래스로 부터 보안을 위한 작업 필터모음인<br />
SecurityFilterChain를 수행하게된다.</p>

<p>여기서 SecurityFilterChain도 Filter들로 이루어져있고<br />
아래의 사진이 SecurityFilterChain의 대략적인 구조이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNlrpr3UQFs4rI7dXvh6L-v1GvYL_3mSnWy8cA9rKECR2M-C_y4fYtJrNqD7xWcvzqy0TDvYC65satnVVyAEYsoTGaQbg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /><br />
<a href="https://velog.io/@sa833591/Spring-Security-5">hyozkim.log - 출처</a></p>

<p>사진에서 보면 알 수 있듯이 <br />
SecurityFilterChain의 구조는</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SecurityContextPersistenceFilter  
LogoutFilter  
UsernamePasswordAuthenticationFilter  
...  
</code></pre></div></div>

<p>등 여러가지 필터를가진 형태로 존재한다.</p>

<p>모든 Filter의 구조를 알고 이해한다면 분명 SpringSecurity에 대한<br />
이해도가 깊어질 것이자만, 현재 공부를 시작한지 얼마안된<br />
내가 전부를 이해하기에는 사실 무리가 있는 것 같다고 생각이 들었다.</p>

<p>이 중에서도 인증과 관련된 UsernamePasswordAuthenticationFilter의<br />
인증 처리 흐름을 이해해보려한다. 해당하는 부분을 어제 코드로 구현하기도 했고<br />
흐름을 알아야 SpringSecurity를 기본적인 내용을 구현하는데 무리가 없을 것 같다.</p>

<p><br /></p>

<p><strong>Security Filter 확인 방법?</strong></p>

<p>위에서 얘기했듯이 여러 Filter들을 거쳐서<br />
인증과 권한에 대한 수행을 SpringSecurity가 진행해준다.<br />
실제로 어떠한 Filter를 거쳐왔는지 확인을 할 수 있는 애노테이션이 있고  <br />
디버그 용도로 매우 유용하게 쓰일 것 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@EnableWebSecurity</span><span class="o">(</span><span class="n">debug</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span> <span class="c1">// 디버그 설정</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfigurationV2</span> <span class="o">{</span>
    
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span>
                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span>
                <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="s">"/auths/login-form"</span><span class="o">)</span> 
                <span class="o">.</span><span class="na">loginProcessingUrl</span><span class="o">(</span><span class="s">"/process_login"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">failureUrl</span><span class="o">(</span><span class="s">"/auths/login-form?error"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">()</span> 
                <span class="o">.</span><span class="na">anyRequest</span><span class="o">()</span> 
                <span class="o">.</span><span class="na">permitAll</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>@EnableWebSecurity(debug = true) 어노테이션을<br />
이용해 현재 요청에 이용된 Filter의 목록이 조회가 가능하다.</p>

<p>애플리케이션을 실행시키고<br />
formLogin 방식으로 요청을 보내보았다.</p>

<p>그리고 콘솔을 확인해보면</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Security filter chain: [
  DisableEncodeUrlFilter
  WebAsyncManagerIntegrationFilter
  SecurityContextPersistenceFilter
  HeaderWriterFilter
  LogoutFilter
  UsernamePasswordAuthenticationFilter
  RequestCacheAwareFilter
  SecurityContextHolderAwareRequestFilter
  AnonymousAuthenticationFilter
  SessionManagementFilter
  ExceptionTranslationFilter
  AuthorizationFilter
]
</code></pre></div></div>
<p>첫번쨰로 요청에 대한 정보들과<br />
다음으로는 Security filter chain에 Filter 목록들이<br />
나오는 것을 확인할 수 있다.</p>

<p>위에서 볼 수 있듯이 우리가 알아보려고하는<br />
UsernamePasswordAuthenticationFilter 클래스도 <br />
콘솔로 확인이 가능하다.</p>

<p><br /></p>

<h3 id="인증-처리">인증 처리</h3>

<p>이제 본격적으로 인증이 어떠한 과정으로<br />
진행되는지 처리 순서에 대한 흐름을 알아보자.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gM9oGy1ZMRYopmfP5I5a2V8YyhzZ_cPot1-9VSX4vFPRYbCISfsxHheqNiPvpRv-ywxmVYbIGBUyfKCX3AaeeChzJ7toQ=w1920-h921" alt="image" class="align-left" style="max-width: 120%" /></p>

<p>(1). 클라이언트에서 로그인 요청이 오면, <code class="language-plaintext highlighter-rouge">SecurityFilterChain</code>을 거치게된다.<br />
그 중 인증에 관한 부분은 <code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code> 클래스이다.</p>

<p><br /></p>

<p>(2). <code class="language-plaintext highlighter-rouge">Authentication</code> 객체를 생성한다.<br />
여기서 로그인할때 받아온 Username과 Password를 이용해<br />
<code class="language-plaintext highlighter-rouge">Authentication</code>의 구현체인 <code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationToken</code> <br />
클래스를 이용해 <code class="language-plaintext highlighter-rouge">Authentication</code> 객체를 만든다.<br />
<em><strong>(❗️Authentication 객체는 인증이 완료되지 않음)</strong></em></p>

<p><br /></p>

<p>(3). <code class="language-plaintext highlighter-rouge">Authentication</code> 객체를 <code class="language-plaintext highlighter-rouge">AuthenticationManager</code>로 전달한다.  <br />
여기서 구현체인 <code class="language-plaintext highlighter-rouge">ProviderManager</code>가 인증이라는 작업의 총괄 매니저다. <br />
총괄은 하지만 실제 인증처리는 <code class="language-plaintext highlighter-rouge">AuthenticationProvider</code>에게 위임한다.<br />
<em><strong>(❗️Authentication 객체는 인증이 완료되지 않음)</strong></em></p>

<p><br /></p>

<p>(4). <code class="language-plaintext highlighter-rouge">Authentication</code> 객체를 <code class="language-plaintext highlighter-rouge">AuthenticationProvider</code>로 전달한다.<br />
<code class="language-plaintext highlighter-rouge">ProviderManager</code>가 전달해준 <code class="language-plaintext highlighter-rouge">Authentication</code>객체로 인증하는 작업을 진행한다.<br />
인증을 구현하는 방법은 2가지 정도가 있다.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">AuthenticationProvider</code>를 상속받아 구현</li>
  <li><code class="language-plaintext highlighter-rouge">UserDetailsService</code>를 상속받아 구현</li>
</ol>

<p><a href="https://mycatlikeschuru.github.io/til/2022/11/18/til.html">(Spring Security 기초)</a>에서 우리는 <code class="language-plaintext highlighter-rouge">UserDetailsService</code>를<br />
상속받아 직접 클래스를 구현했었다.</p>

<p>여기서 1번방법으로 구현하면 <code class="language-plaintext highlighter-rouge">₩</code>UserDetailsService` 부분은<br />
사용하지 않고 구현을 할 수 있다. 구현할때 중요한 부분은<br />
직접 Credentials과 Password를 인증과정 로직을 구현해야한다는 점이다.</p>

<p>하지만 어제 우리가 구현했던 2번방법으로 구현하면<br />
<code class="language-plaintext highlighter-rouge">AuthenticationProvider</code>를 구현하지 않아도된다.<br />
<code class="language-plaintext highlighter-rouge">DaoAuthenticationProvider</code>를 구현 클래스로 사용하기 때문이다. 
실제로 호출 흐름을 본다면,</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">ProviderManager</code> 클래스의 <code class="language-plaintext highlighter-rouge">.authenticate();</code> 메서드 호출</li>
  <li><code class="language-plaintext highlighter-rouge">AuthenticationProvider</code> 인터페이스의 <code class="language-plaintext highlighter-rouge">AbstractUserDetailsAuthenticationProvider</code>가<br />
<code class="language-plaintext highlighter-rouge">.authenticate();</code> 메서드를 구현했음.</li>
  <li><code class="language-plaintext highlighter-rouge">.authenticate();</code> 메서드안에서 인증 처리를 위한 <code class="language-plaintext highlighter-rouge">retrieveUser();</code> 호출<br />
<code class="language-plaintext highlighter-rouge">DaoAuthenticationProvider</code> 클래스가 <code class="language-plaintext highlighter-rouge">.retrieveUser();</code>를 구현했음</li>
  <li><code class="language-plaintext highlighter-rouge">.retrieveUser();</code> 메서드에서 <code class="language-plaintext highlighter-rouge">UserDetailsService</code> 클래스의 <code class="language-plaintext highlighter-rouge">.loadUserByUsername()</code>  <br />
메서드 호출 <code class="language-plaintext highlighter-rouge">.loadUserByUsername();</code> 메서드는 우리가 구현해야하는 부분이다.</li>
</ol>

<p><em><strong>(❗️Authentication 객체는 인증이 완료되지 않음)</strong></em></p>

<p><br /></p>

<p>(5). 즉, 위에서 얘기했던 <code class="language-plaintext highlighter-rouge">DaoAuthenticationProvider</code> 클래스가<br />
<code class="language-plaintext highlighter-rouge">UserDetailsService</code>를 이용해 <code class="language-plaintext highlighter-rouge">UserDetails</code>를 객체를 조회 한다.</p>

<p>실제로 어제 예제에서 <code class="language-plaintext highlighter-rouge">UserDetails</code>를 상속받아<br />
username, password, 권한정보를 객체로 만들어 구현하였고<br />
해당객체를 <code class="language-plaintext highlighter-rouge">UserDetailsService</code>를 이용해 반환하는 프로그램도 작성했다.<br />
<em><strong>(❗️Authentication 객체는 인증이 완료되지 않음)</strong></em></p>

<p><br /></p>

<p>(6). 즉, Credential 저장소라는 뜻은 DB의 암호화된 비밀번호를 가져온다는 뜻이다.  <br />
쉽게 말하자면 (5)번을 통해 호출된 <code class="language-plaintext highlighter-rouge">UserDetailsService</code>에서<br />
<code class="language-plaintext highlighter-rouge">loadUserByUsername(String username);</code> 메서드를 이용해 <br />
우리는 어떤 username으로 접근하는지 알 수 있으며, 해당 정보로 DB를 조회해<br />
싫제로 동일한 username이 존재할 경우 해당 테이블의 정보를 가져올 수 있다.<br />
즉, 권한정보, 암호화된 비밀번호 등등 사용자 정보를 가져올 수 있다는 뜻이다.</p>

<p><br /></p>

<p>(7). 이제 우리는 (6)번을 통해서 조회한 데이터로 인증을 비교할<br />
<code class="language-plaintext highlighter-rouge">UserDetails</code> 객체를 만들 수 있다. <code class="language-plaintext highlighter-rouge">UserDetails</code> 객체는<br />
username,password,권한정보를 가지고 있으면 객체로 만들 수 있다.</p>

<p><br /></p>

<p>(8). 만들어진 <code class="language-plaintext highlighter-rouge">UserDetails</code> 객체는, 맨처음 호출했던 <br />
<code class="language-plaintext highlighter-rouge">DaoAuthenticationProvider</code> 클래스에 반환하게 되어진다.<br />
아까 얘기했듯이 <code class="language-plaintext highlighter-rouge">AuthenticationProvider</code>를 구현한 클래스로<br />
인증을 처리해주는 클래스이다.</p>

<p><br /></p>

<p>(9). <code class="language-plaintext highlighter-rouge">UserDetails</code> 정보를 이용해 <code class="language-plaintext highlighter-rouge">DaoAuthenticationProvider</code> 클래스가<br />
<code class="language-plaintext highlighter-rouge">.mitigateAgainstTimingAttack();</code> 메서드를 호출해 인증을 처리한다.<br />
인증처리가 정상적으로 이루어졌을 경우에 <br />
그림과 같이 인증정보인 <code class="language-plaintext highlighter-rouge">Collection&lt;GrantedAuthority&gt;</code>가 추가된<br />
<code class="language-plaintext highlighter-rouge">Authentication</code> 객체를 반환하게 된다.<br />
<em><strong>(⭕️Authentication 객체는 인증이 완료됨)</strong></em></p>

<p><br /></p>

<p>(10). 이제 인증이 완료된 객체를 호출했던<br />
<code class="language-plaintext highlighter-rouge">ProviderManager</code>로 반한된다.<br />
<em><strong>(⭕️Authentication 객체는 인증이 완료됨)</strong></em></p>

<p><br /></p>

<p>(11). 마찬가지로 처음에 호출을 했던 <br />
<code class="language-plaintext highlighter-rouge">UsernamePasswordAuthenticationFilter</code> 클래스로<br />
인증이완료된 객체가 반환되게 되어진다.<br />
<em><strong>(⭕️Authentication 객체는 인증이 완료됨)</strong></em></p>

<p><br /></p>

<p>(12). 최종적으로 인증이 완료된 Authentication 객체를<br />
<code class="language-plaintext highlighter-rouge">SecurityContextHolder</code>를 이용해 <code class="language-plaintext highlighter-rouge">SecurityContext</code>에 저장을하게 된다.<br />
S<code class="language-plaintext highlighter-rouge">ecurityContext</code>의 세션 정책에 따라서<br />
HttpSession에 저장되어 사용자의 인증 상태를 유지하기도 하고<br />
HttpSession을 생성하지 않고 무상태를 유지하기도 한다.</p>

<p><br /></p>

<hr />

<p>이렇게 오늘은 SecurityFilterChain에서<br />
어떻게 인증이 이루어지는지 알아보았다.</p>

<p>오늘 정말 파급적인 효과로 코드에 대해 이해를 했다.<br />
아키텍쳐를 그려가면서, 실제 코드들이 호출되서<br />
실행되는 것을 하나하나 따라가보면서 순서에 대한 흐름을 글로 정리해봤다.</p>

<p>이렇게 코드를 따라가면서, 파악한 내용을 적고 하다보니까<br />
어디서 부터 시작되었고, 어떻게 객체를 돌려받는지가<br />
파악되다보니까 어느정도 인증처리에 대한 흐름은 잡힌 것 같다.</p>

<p>오늘 공부는 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 된장찌개, 라면, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[주말이라는 것은… 사람을 참 나태하게 만들기도 활력을 공급하기도 하는 것 같다.]]></summary></entry><entry><title type="html">TIL) Spring Security 1 (기초)</title><link href="http://localhost:4000/til/2022/11/18/til.html" rel="alternate" type="text/html" title="TIL) Spring Security 1 (기초)" /><published>2022-11-18T00:00:00+09:00</published><updated>2022-11-18T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/18/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/18/til.html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMbi5KBKT2qUujSToFzrlGZ8riZgXZWFRWl1il4pHA0AlwRLqDL1ROTXlmdEytfEfxx0rpCo3VI8iZTbovSWK60aVBtSA=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>예전보다 월-금 시간이 정말 빨리간다.<br />
그만큼 공부하는 시간을 즐기고 있으니 시간도 빨리가는 것 같다.</p>

<p>오늘도 이번주의 마지막이니 만큼<br />
더 집중해서 공부해보자 !</p>

<hr />

<p>오늘은 Spring Security에 대해 공부하는 날이다.<br />
다음주에도 계속 공부할 것 같고<br />
오늘은 기본 구조와 웹 요청 처리 흐름에대해 공부해보려한다.</p>

<h2 id="spring-security">Spring Security</h2>

<p><strong>Spring Security란 ?</strong><br />
Spring MVC 기반 애플리케이션의 인증,인가 기능을<br />
지원하는 보안 프레임워크이다.</p>

<p>Interceptor나 Servlet Filter과 같은 보안 기능을<br />
직접 구현할 수 있지만 Spring Security에서 안정적으로 지원하고 있기 때문에<br />
Spring MVC를 기반으로한다면 Spring Security를 이용하는게 안전한 선택이라 할 수 있다.</p>

<p><strong>스프링 시큐리티를 이용한다면 ?</strong></p>
<ol>
  <li>다양한 유형의 사용자 인증 기능 적용 가능 (폼 로그인, 토큰, OAuth 2기반 인증)</li>
  <li>애플리케이션 사용자의 역할에 따른 권한 레벨 적용</li>
  <li>애플리케이션에서 제공하는 리소스 대한 접근 제어</li>
  <li>민감한 정보에 대한 데이터 암호화</li>
  <li>일반적으로 알려진 웹 보안 공격 차단</li>
</ol>

<p>스프링 시큐리티 관련 용어를 미리 숙지하고 <br />
본격적인 내용을 살펴보면 도움이 될 것이다.</p>
<ol>
  <li><strong>Principal (주체)</strong><br />
-&gt; 애플리케이션에서 작업을 수행할 수 있는 사용자,디바이스,시스템 등이 될 수 있다.<br />
인증 프로세스가 성공적으로 수행된 사용자의 계정 정보를 의미함.</li>
  <li><strong>Authentication (인증)</strong><br />
-&gt; 애플리케이션을 사용하는 사용자가 본인이 맞음을 증명하는 절차</li>
  <li><strong>Authorization (인가)</strong><br />
-&gt; 인증이 정상적으로 수행된 사용자에게 하나 이상의 권한을 부여함.<br />
특정 애플리케이션에 특정 리소스에 접근할 수 있게 허가하는 과정을 의미한다.</li>
  <li><strong>Access Control (접근제어)</strong><br />
-&gt; 사용자가 애플리케이션의 리소스에 접근하는 행위를 제어하는 것을 의미한다.</li>
  <li><strong>Credential (신원 증명정보)</strong><br />
-&gt; 인증을 정상적으로 수행하기 위해서 식별하기 위한 정보.</li>
</ol>

<p><br /></p>

<h3 id="spring-security-흐름">Spring Security 흐름</h3>

<p>사용해보기에 앞서<br />
SSR방식으로 테스트를 진행할 예정이다.<br />
별도의 html을 만들어서 테스트를 진행했고<br />
Form Login 방식으로 테스트를 진행했다.</p>

<p>간단한 스프링 시큐리티의 보안 적용 흐름을 알고 넘어가보자.<br />
우리는 보통 웹에서 요청을 보내면 EndPoint를 거쳐 리소스에 접근을 한다.</p>

<p>Servlet 기반의 애플리케이션일 경우 EndPoint에 요청이 도달하기전에 요청을 가로챈 후  <br />
어떤 처리를 할 수 있는 적절한 포인트를 제공해줄 수 있는 API가 있다.<br />
그것은 바로 Servlet Filter이다.</p>

<p>Servlet Filter를 잠깐 정리하자면</p>
<ol>
  <li>Java에서 Interface형태로 제공하는 API이다.</li>
  <li>웹요청을 가로채 전처리, 응답을 전달하기전 후처리를 할 수 있다.</li>
</ol>

<p>이러한 Servlet Filter는 하나 이상의 필터들을 연결해<br />
Filter Chain을 구성할 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOgZKwDg4Q2Nju5ltzUyuDISAyDNnWwDlA-x9U3zTRmZq0JpKZx5Q6Qg95NA9nMQoOQuuyyURwFi0LI-XHIUlnGlFw3Ew=w3024-h1620" alt="image" class="align-left" style="max-width: 40%" /><br />
출처 - <a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html">Spring Security 레퍼런스</a></p>

<p><br /></p>

<p>Filter Chain의 Filter들은 우리가 구현한 작업들을 실행한 후에<br />
HttpServlet을 거쳐 DispatcherServlet에 요청이 전달되어진다.</p>

<p>DispatcherServlet은 Spring MVC 계층구조할때 많이 보았을 것이다.<br />
클라이언트에서 받은 모든 요청을 적합한 컨트롤러에 위임해주는<br />
Spring MVC에서 아주 중요한 역할을 가지고 있는 녀석이였다.</p>

<p>여하튼 우리가 알아야할 핵심은 DispatcherServlet에 도달하기 전에<br />
Servlet Filter가 가로챈다는 것이다.</p>

<p><br /></p>

<p>그럼 Spring Security와 Servlet Filter와 어떠한 관계가 있냐?</p>

<p>Spring Security에서는 보안과 관련된 Filter를 이용해 <br />
클라이언트에 요청을 중간에 가로챈 뒤 추가적으로 작업을 할 수 있도록 도와준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMdhZrHIw8wm0G_zG7eQgHqqNnxZhifIy-8Y1taID3Id73Ik4ScIIQt6oclNltVUbpDmsfKO-prb1xGOdVcuLX7eJCA7A=w3024-h1620" alt="image" class="align-left" style="max-width: 70%" /><br />
출처 - <a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html">Spring Security 레퍼런스</a></p>

<p><br /></p>

<p>그것을 도와주는 클래스들이 바로 위에있는 아키텍쳐에서 보는<br />
DelegatingFilterProxy와 FilterChainProxy이다. <br />
해당 클래스들은 Filter 인터페이스를 구현하고 있어<br />
Servlet Filter로써의 역할을 수행해한다.</p>

<p>DelegatingFilterProxy는 Servlet Container 영의 Filter와<br />
ApplicationContext에 Bean으로 등록된 Filter들을 연결해주는 역할을 가진다.</p>

<p>FilterChainProxy는 Spring Security를 사용하기 위한 진입점이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNcZKkvVUXMS9csndq0ceE71GN1u2pu7EDH5twxx0Grcg4f36ZzPqvVnHu73GrKupyuIf_iKM3qR7WVa328iuXmCWqZjQ=w3024-h1620" alt="image" class="align-left" style="max-width: 80%" /><br />
출처 - <a href="https://docs.spring.io/spring-security/reference/servlet/architecture.html">Spring Security 레퍼런스</a></p>

<p><br /></p>

<p>위의 그림에서 보듯이 Spring Security의 Filter Chain으로 <br />
보안을 위한 작업을 처리하는 필터의 모음을 만들면 <br />
FilterChainProxy로 부터 해당 Filter들을 시작할 수 있게되어진다.</p>

<p>한마디로 FilterChainProxy부터 Spring Security에서 제공하는<br />
보안 Filter들이 필요한 작업을 수행해주게 도와주는 클래스라 보면된다.</p>

<p><br /></p>

<h3 id="spring-security-연습해보기">Spring Security 연습해보기</h3>

<p>위의 Spring Security 요청 흐름에 대해 어느정도<br />
이해가 되었다면, 아래 코드들을 보고<br />
어느 부분인지 정확히는 몰라도 흐름은 파악이 가능하다.</p>

<p>우선 Spring Security를 사용하기 위한 의존라이브러리를 추가해야한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">security</span><span class="err">'</span>
</code></pre></div></div>
<p>build.gradle에 의존라이브러를 추가시켜 놓으면 준비 끝이다.</p>

<p>처음으로 우선 위에서 보았던<br />
SecurityFilterChain을 구성해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
    
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span>
                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span> <span class="c1">// csrf 공격에 대한 설정 비활성화</span>
                <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span><span class="c1">// Form 로그인 인증 방법</span>
                <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="s">"/auths/login-form"</span><span class="o">)</span> <span class="c1">// 로그인 커스텀 페이지 설정 (우리가만든 경로설정)</span>
                <span class="o">.</span><span class="na">loginProcessingUrl</span><span class="o">(</span><span class="s">"/process_login"</span><span class="o">)</span><span class="c1">// 인증요청을 수행할 요청 URL 설정 (html form태그에서 요청)</span>
                <span class="o">.</span><span class="na">failureUrl</span><span class="o">(</span><span class="s">"/auths/login-form?error"</span><span class="o">)</span><span class="c1">// 실패시 리다이렉트할 URL 지정</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="c1">// 보안설정을 메서드 체인형태로 구성하게 도와줌</span>
                <span class="o">.</span><span class="na">logout</span><span class="o">()</span> <span class="c1">// 로그아웃 설정위한 LogoutConfigurer를 리턴해줌</span>
                <span class="o">.</span><span class="na">logoutUrl</span><span class="o">(</span><span class="s">"/logout"</span><span class="o">)</span> <span class="c1">// 로그아웃 요청 url 설정 (html form태그에서 요청)</span>
                <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span> <span class="c1">// 성공시 리다이렉트할 장소</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="c1">// 보안설정을 메서드 체인형태로 구성하게 도와줌</span>
                <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">().</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">"/auths/access-denied"</span><span class="o">)</span> <span class="c1">// 권한이 없을때 보낼 요청</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="c1">// 보안설정을 메서드 체인형태로 구성하게 도와줌</span>
                <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">(</span><span class="n">authorize</span> <span class="o">-&gt;</span>
                        <span class="n">authorize</span><span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/orders/**"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span> <span class="c1">// 해당 경로에 ADMIN 권한만 접근가능</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/members/my-page"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">)</span> <span class="c1">// 해당 경로에 USER 권한만 접근가능</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/**"</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span> <span class="c1">// 앞에지정한 URL을 제외한것 접근 모두가능</span>
                <span class="o">);</span>
<span class="c1">//                .authorizeHttpRequests() // 클라이언트의 요청이 들어오면 접근권한을 확인하겠다고 정의</span>
<span class="c1">//                .anyRequest() // 클라이언트의 모든 요청에 대해 접근을 허용</span>
<span class="c1">//                .permitAll(); // 클라이언트의 모든 요청에 대해 접근을 허용</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>기본적인 구성방법은 SecurityFilterChain 클래스 타입을 반환하는<br />
메서드를 하나 만들어 filter의 정보를 넣어주는 것이다.<br />
그리고 해당 메서드를 Spring Container에 Bean으로 담아주면된다.</p>

<p>빈으로 담아주면 아까 위에서 얘기했던<br />
DelegatingFilterProxy 클래스에 의해<br />
서블릿 컨테이너 영역의 필터와 스프링 컨테이너의 빈으로 등록된 필터를<br />
연결해주는 브릿가 생긴다고 예상해볼 수 있을 것 같다.</p>

<p>그리고 SSR방식의 FormLogin을 사용한다고 가정했으니<br />
첫번째 필터로는 로그인에 해당하는 내용들  <br />
두번째 필터로는 로그아웃에 해당하는 내용들 <br />
세번째로는 권한이 없을때 처리하는 내용<br />
네번째로는 클라이언트 요청에따른 권한 설정에 대한 내용<br />
이렇게 각각 필터들을 하나의 필터체인으로 .build(); 하여 반환하면<br />
해당 내용에 따라 인증과 권한 부여가 이루어질 수 있다.</p>

<p><br /></p>

<h4 id="in-memory로-인증-해보기">In Memory로 인증 해보기</h4>

<p>DB를 이용하지 않는 인증방법을 한번 연습해보자</p>

<p><strong><span style="color:#F04965"> 1). 단순하게 고정해서 등록해 인증과 권한을 주는 방식 </span></strong></p>

<p>SecurityConfiguration 클래스 아래에 <br />
UserDetailsManager 반환하는 Bean 객체를 만들어주었다.</p>

<p>UserDetailsManager 라는 인터페이스를 <br />
구현한 객체를 Bean으로 등록해주면 해당 정보로 등록된<br />
사용자들은 정보에 해당하는 인증과 권한을 가지게 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nd">@Bean</span>
 <span class="kd">public</span> <span class="nc">UserDetailsManager</span> <span class="nf">userDetailsService</span><span class="o">(){</span>
     <span class="nc">UserDetails</span> <span class="n">user</span> <span class="o">=</span> <span class="nc">User</span><span class="o">.</span><span class="na">withDefaultPasswordEncoder</span><span class="o">()</span> <span class="c1">// password 암호화</span>
             <span class="o">.</span><span class="na">username</span><span class="o">(</span><span class="s">"dhfif718@naver.com"</span><span class="o">)</span> <span class="c1">// 식별하는 사용자 아이디 값</span>
             <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="s">"1111"</span><span class="o">)</span>
             <span class="o">.</span><span class="na">roles</span><span class="o">(</span><span class="s">"USER"</span><span class="o">)</span> <span class="c1">// 권한지정</span>
             <span class="o">.</span><span class="na">build</span><span class="o">();</span>
     <span class="nc">UserDetails</span> <span class="n">admin</span> <span class="o">=</span> <span class="nc">User</span><span class="o">.</span><span class="na">withDefaultPasswordEncoder</span><span class="o">()</span>
             <span class="o">.</span><span class="na">username</span><span class="o">(</span><span class="s">"admin@naver.com"</span><span class="o">)</span>
             <span class="o">.</span><span class="na">password</span><span class="o">(</span><span class="s">"2222"</span><span class="o">)</span>
             <span class="o">.</span><span class="na">roles</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span>
             <span class="o">.</span><span class="na">build</span><span class="o">();</span>

     <span class="k">return</span> <span class="k">new</span> <span class="nf">InMemoryUserDetailsManager</span><span class="o">(</span><span class="n">user</span><span class="o">,</span><span class="n">admin</span><span class="o">);</span>
 <span class="o">}</span>
</code></pre></div></div>
<p>InMemoryUserDetailsManager 구현체로 구성 정보를 넘겨주면 된다.<br />
구성 정보를 만드는 방법은 UserDetails 인터페이스를 상속받는<br />
User 클래스를 이용해 만들 수있다.</p>

<p>만약 클라이언트에서 form login 방식으로 로그인 요청이 온다면<br />
해당 구성정보를 가진 사용자는 로그인이 되며<br />
권한을 각각 USER, ADMIN으로 부여받게 되어진다.</p>

<p>위에 있는 정보는 DB를 이용한 것도 아니며<br />
단순하게 UserDetailsManager 타입의 Bean을 만들어 주 었을 뿐인데<br />
Spring Security는 해당 정보를 가진 사용자가 로그인을 하면<br />
인증을 해주고 권한을 부여해줄 수 있는 것이다.</p>

<p>여기서 <strong>User.withDefaultPasswordEncoder()</strong> 메서드를 사용하면<br />
bcrypt 방식으로 password를 암호화해준다. 즉, 1111,2222로 들어온 값을<br />
암호화하여 관리를 한다는 의미이다.</p>

<p>만약 코드로 치게된다면 <strong>Deprecated</strong> 상태로 변하는데 (가운데줄 쳐짐)<br />
해당 API는 권장하지 않는다는 뜻이다. 이 경우에는 고정으로 사용하고 있기에<br />
고정해서 사용하지 말라는 의미에서 Deprecated로 변한 것을 볼 수 있다.</p>

<p><br /></p>

<p><strong><span style="color:#F04965"> 2). 회원 가입을 이용해 등록하기 </span></strong></p>

<p>기본적으로 password를 암호화를 해야한다.<br />
암호화를 하기위해 위에서 이용했던 bcrpty 방식으로 암호화를 <br />
도와주는 API가 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="cm">/*
 * PasswordEncoder Bean 등록
 * 암호화를 해야한다. Spring Security에서 지원하는 Default = bcrypt
 * */</span>
 <span class="nd">@Bean</span>
 <span class="kd">public</span> <span class="nc">PasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">(){</span>
     <span class="k">return</span> <span class="nc">PasswordEncoderFactories</span><span class="o">.</span><span class="na">createDelegatingPasswordEncoder</span><span class="o">();</span>
 <span class="o">}</span>
</code></pre></div></div>
<p>SecurityConfiguration 클래스에<br />
PasswordEncoder 인터페이스 타입 객체를 Bean으로 등록해주고<br />
회원가입시 사용할 수있다.</p>

<p>회원가입할 경우 Controller는 구성되어 있다고 가정하고<br />
Service 코드를 확인해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
*  InMemory 사용을 위한 빈주입
* */</span>
<span class="c1">//@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaConfigurationV1</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">inMemoryMemberService</span><span class="o">(</span><span class="nc">UserDetailsManager</span> <span class="n">userDetailsManager</span><span class="o">,</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">InMemoryMemberService</span><span class="o">(</span><span class="n">userDetailsManager</span><span class="o">,</span><span class="n">passwordEncoder</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>MemberService라는 인터페이스 타입으로 객체를 Bean으로 등록해준다.</p>

<p>InMemoryMemberSerivce에 우리가 이용해야할<br />
UserDetailsManager와 PasswordEncoder를 매개변수로 넣어<br />
생성자로 반환하게 되어진다.</p>

<p>그럼 Bean으로 InMemoryMemberService을 구현체로<br />
의존성 주입하여 Controller에서 이용이 가능하다..</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InMemoryMemberService</span> <span class="kd">implements</span> <span class="nc">MemberService</span> <span class="o">{</span>

   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserDetailsManager</span> <span class="n">userDetailsManager</span><span class="o">;</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span>

   <span class="kd">public</span> <span class="nf">InMemoryMemberService</span><span class="o">(</span><span class="nc">UserDetailsManager</span> <span class="n">userDetailsManager</span><span class="o">,</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">userDetailsManager</span> <span class="o">=</span> <span class="n">userDetailsManager</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">passwordEncoder</span> <span class="o">=</span> <span class="n">passwordEncoder</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="nd">@Override</span>
   <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">createMember</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>

      <span class="nc">List</span><span class="o">&lt;</span><span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">authorities</span> <span class="o">=</span> <span class="n">createAuthorities</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">MemberRole</span><span class="o">.</span><span class="na">ROLE_USER</span><span class="o">.</span><span class="na">name</span><span class="o">());</span> <span class="c1">// 권한 USER로 설정</span>

      <span class="nc">String</span> <span class="n">encryptedPassword</span> <span class="o">=</span> <span class="n">passwordEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span> <span class="c1">// 비밀번호 암호화 진행</span>

      <span class="nc">UserDetails</span> <span class="n">userDetails</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">encryptedPassword</span><span class="o">,</span> <span class="n">authorities</span><span class="o">);</span> <span class="c1">// username, password, 권한 정보로 유저 생성</span>
      <span class="n">userDetailsManager</span><span class="o">.</span><span class="na">createUser</span><span class="o">(</span><span class="n">userDetails</span><span class="o">);</span> <span class="c1">// 생성한 유저정보 등록</span>

      <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="nf">createAuthorities</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">roles</span><span class="o">)</span> <span class="o">{</span>

      <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">roles</span><span class="o">)</span>
              <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">role</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">SimpleGrantedAuthority</span><span class="o">(</span><span class="n">role</span><span class="o">))</span>
              <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>여기서 회원가입을 위한 서비스 로직 createMember <br />
안의 내용을 들여다보면된다.</p>

<p>첫번째로 권한에 대한 내용을 설정하기위해<br />
new SimpleGrantedAuthority();을 이용해 객체를<br />
List 형태로 담아둔 authorities를 만들었다.</p>

<p>두번째로 암호화를 위해 DI받은 passwordEncoder의 메서드인<br />
.encode();를 이용해 비밀번호를 넘겨줘<br />
bcrypt 방식으로 암호화하여 String 타입으로 받아두었다.</p>

<p>마지막으로 new User();를 이용해<br />
위에서 고정으로 구성정보를 구성한 것 처럼</p>

<p>username, password, roles를 생성자로 넘겨<br />
UserDetails 타입의 객체로 만들어<br />
위에서 DI 받은 userDetailsManger의 메서드<br />
createUser();의 매개변수로 넘겨주게 되면<br />
회원 가입을 할때 해당 정보를 가진 Member가 인증과 권한정보를<br />
가지게되어 로그인할때 해당 정보를 가진 사용자가 로그인을 한다면<br />
인증이되어 설정한 ROLE_USER 권한으로 이용이 가능하게되어진다.</p>

<p><br />
<br /></p>

<p><strong><span style="color:#0066CC"> 위의 1,2번을 한마디로 정리 해보자면 !! </span></strong></p>

<p>UserDetails 객체를 만들어 줘야한다.<br />
그리고 그 객체를 이용해 UserDetailsManager의 구현체인<br />
InMemoryUserDetailsManager .createUser(); 메서드에<br />
매개변수로 UserDetails 객체를 넘겨주는게 끝이다 !</p>

<p><br /></p>

<h4 id="h2-db로-인증-해보기">H2 DB로 인증 해보기</h4>

<p>위에서 UserDetailsManager를 이용해 인증과 권한을 가졌다면</p>

<p>DB를 이용하기 위해서는 UserDetailsService 인터페이스를 이용해야한다.<br />
UserDetailsManager가 UserDetailsService를 상속받은 관계이다.</p>

<p>우선 H2 DB 설정과 관련된 부분은 되어있다고 가정하겠다. <br />
문제없이 H2 DataBase를 사용하기 위해서는<br />
기존에 설정했던 SecurityFilterChain에서 한가지 Filter를 추가해줘야한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfiguration</span> <span class="o">{</span>
    
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">SecurityFilterChain</span> <span class="nf">filterChain</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span>
                <span class="o">.</span><span class="na">headers</span><span class="o">().</span><span class="na">frameOptions</span><span class="o">().</span><span class="na">sameOrigin</span><span class="o">()</span>  <span class="c1">// &lt;frame&gt; 태그등 렌더링여부 설정, 동일 출처로부터 들어오는 request만 렌더링허용 , H2 사용을 위함</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="c1">// 보안설정을 메서드 체인형태로 구성하게 도와줌</span>
                <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span> <span class="c1">// csrf 공격에 대한 설정 비활성화</span>
                <span class="o">.</span><span class="na">formLogin</span><span class="o">()</span><span class="c1">// Form 로그인 인증 방법</span>
                <span class="o">.</span><span class="na">loginPage</span><span class="o">(</span><span class="s">"/auths/login-form"</span><span class="o">)</span> <span class="c1">// 로그인 커스텀 페이지 설정 (우리가만든 경로설정)</span>
                <span class="o">.</span><span class="na">loginProcessingUrl</span><span class="o">(</span><span class="s">"/process_login"</span><span class="o">)</span><span class="c1">// 인증요청을 수행할 요청 URL 설정 (html form태그에서 요청)</span>
                <span class="o">.</span><span class="na">failureUrl</span><span class="o">(</span><span class="s">"/auths/login-form?error"</span><span class="o">)</span><span class="c1">// 실패시 리다이렉트할 URL 지정</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="c1">// 보안설정을 메서드 체인형태로 구성하게 도와줌</span>
                <span class="o">.</span><span class="na">logout</span><span class="o">()</span> <span class="c1">// 로그아웃 설정위한 LogoutConfigurer를 리턴해줌</span>
                <span class="o">.</span><span class="na">logoutUrl</span><span class="o">(</span><span class="s">"/logout"</span><span class="o">)</span> <span class="c1">// 로그아웃 요청 url 설정 (html form태그에서 요청)</span>
                <span class="o">.</span><span class="na">logoutSuccessUrl</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span> <span class="c1">// 성공시 리다이렉트할 장소</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="c1">// 보안설정을 메서드 체인형태로 구성하게 도와줌</span>
                <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">().</span><span class="na">accessDeniedPage</span><span class="o">(</span><span class="s">"/auths/access-denied"</span><span class="o">)</span> <span class="c1">// 권한이 없을때 보낼 요청</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span> <span class="c1">// 보안설정을 메서드 체인형태로 구성하게 도와줌</span>
                <span class="o">.</span><span class="na">authorizeHttpRequests</span><span class="o">(</span><span class="n">authorize</span> <span class="o">-&gt;</span>
                        <span class="n">authorize</span><span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/orders/**"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"ADMIN"</span><span class="o">)</span> <span class="c1">// 해당 경로에 ADMIN 권한만 접근가능</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/members/my-page"</span><span class="o">).</span><span class="na">hasRole</span><span class="o">(</span><span class="s">"USER"</span><span class="o">)</span> <span class="c1">// 해당 경로에 USER 권한만 접근가능</span>
                                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/**"</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span> <span class="c1">// 앞에지정한 URL을 제외한것 접근 모두가능</span>
                <span class="o">);</span>
<span class="c1">//                .authorizeHttpRequests() // 클라이언트의 요청이 들어오면 접근권한을 확인하겠다고 정의</span>
<span class="c1">//                .anyRequest() // 클라이언트의 모든 요청에 대해 접근을 허용</span>
<span class="c1">//                .permitAll(); // 클라이언트의 모든 요청에 대해 접근을 허용</span>
        <span class="k">return</span> <span class="n">http</span><span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>.headers().frameOptions().sameOrigin()<br />
메서드들이 추가되었고, 추가하지 않으면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPof1RAUkqFj1p0icu1y0Y1G_-q79XgeRnNvxsgf4sahOYXm9S9UNHjL3dST2DYsW76e9J9ZS_C961EXzBBqNjpKuygEg=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위의 화면과 같이 정상적으로 H2 DataBase가 표시되지 않을 수 있다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
*  DB 사용을 위한 빈주입
* */</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaConfigurationV2</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">dbMemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">,</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DBMemberServiceV1</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">,</span><span class="n">passwordEncoder</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>기존에 InMemory를 사용하기 위해 설정했던 구성정보를 지우고<br />
새로운 구성정보를 설정. DBMemberService가 적용되도록 스프링 빈으로 등록했다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DBMemberServiceV1</span> <span class="kd">implements</span> <span class="nc">MemberService</span> <span class="o">{</span>

   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>
   <span class="kd">private</span> <span class="kd">final</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">;</span>

   <span class="kd">public</span> <span class="nf">DBMemberServiceV1</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">,</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">)</span> <span class="o">{</span>
      <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
      <span class="k">this</span><span class="o">.</span><span class="na">passwordEncoder</span> <span class="o">=</span> <span class="n">passwordEncoder</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="nd">@Override</span>
   <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">createMember</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
      <span class="n">verifyExistsEmail</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>
      <span class="nc">String</span> <span class="n">encryptedPassword</span> <span class="o">=</span> <span class="n">passwordEncoder</span><span class="o">.</span><span class="na">encode</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getPassword</span><span class="o">());</span> <span class="c1">// 비밀번호 암호화</span>
      <span class="n">member</span><span class="o">.</span><span class="na">setPassword</span><span class="o">(</span><span class="n">encryptedPassword</span><span class="o">);</span> <span class="c1">// 암호화된 비밀번호 객체에 맵핑</span>

      <span class="nc">Member</span> <span class="n">saveMember</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">// DB에 저장</span>

      <span class="k">return</span> <span class="n">saveMember</span><span class="o">;</span>
   <span class="o">}</span>

   <span class="kd">private</span> <span class="kt">void</span> <span class="nf">verifyExistsEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">member</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
      <span class="k">if</span> <span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span>
         <span class="k">throw</span> <span class="k">new</span> <span class="nf">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">MEMBER_EXISTS</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>DBMemberService에서는<br />
비밀번호 암호화를 한 것을 member 객체에 담아<br />
Repository에 저장하게만 구성해주면 끝난다.</p>

<p>인메모리 사용할때에는 UserDetailsManager에다가 저장했지만<br />
이제는 DBMemberService는 회원가입이라는<br />
서비스 로직만 남게 된 것이다.</p>

<p>이제 회원가입을하였고<br />
로그인을 하였을때 UserDetailsManager와 같은 역할을 구현해줘야한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
* DB사용했을때 인증 처리 적용하기 (인메모리 사용시 기존 UserDetailManager를 사용했었음)
* UserDetailsService는 User정보를 로드하는 핵심적인 인터페이스다.
* UserDetailManager는 UserDetailsService를 상속하고있음
* */</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloUserDetailsServiceV1</span> <span class="kd">implements</span> <span class="nc">UserDetailsService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">HelloAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">HelloUserDetailsServiceV1</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">,</span> <span class="nc">HelloAuthorityUtils</span> <span class="n">authorityUtils</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">authorityUtils</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/*
    * UserDetailService 오버라이딩하여 UserDetails 객채를 만들어 반환하기
    * 이후는 스프링시큐리티가 인증처리를 대신해준다
    * */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UsernameNotFoundException</span> <span class="o">{</span>
        <span class="c1">// 해당 메서드 호출 시점은, login.html에서 로그인 버튼 누를떄이다.</span>
        <span class="c1">// 즉, &lt;form action="/process_login" method="post"&gt; 가 실행될떄 호출됨</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">optionalMember</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">username</span><span class="o">);</span> <span class="c1">// 이메일로 멤버찾기</span>
        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">optionalMember</span><span class="o">.</span><span class="na">orElseThrow</span><span class="o">(()</span> <span class="o">-&gt;</span> <span class="k">new</span> <span class="nc">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">MEMBER_NOT_FOUND</span><span class="o">));</span> <span class="c1">// 멤버 찾기 예외 처리</span>
        <span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">authorities</span> <span class="o">=</span> <span class="n">authorityUtils</span><span class="o">.</span><span class="na">createAuthorities</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span> <span class="c1">// 이메일 비교후 권한 처리</span>
        <span class="nc">UserDetails</span> <span class="n">user1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span> <span class="n">findMember</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span> <span class="n">authorities</span><span class="o">);</span> <span class="c1">// 해당 정보로 User생성자로 UserDetails 만들기</span>
        <span class="k">return</span> <span class="n">user1</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>우리는 UserDetailsService를 구현할 클래스를 만들어<br />
상속을 받게 만들어준다음. loadUserByUsername 오버라이딩해<br />
재정의를 해서 반환을 UserDetails 객체로 만들어 반환을 해주면된다.</p>

<p>회원가입은 이미 되어있고, 암호화까지해 놓은 상태로 DB에 저장되어있다.<br />
우리가 로그인 페이지에서 form login으로 post 메서드 /process_login을 호출하게되면<br />
우리가 위에서 봤던 흐름대로 EndPoint까지 가기전에<br />
Servlet Filter가 흐름을 가로채서 실행하게 되고<br />
우리는 Spring Security를 사용하고 있기때문에 인증 절차를 가지게된다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOFEpthgmY3S8CBykz2TudWwacXHEngWxFMzuqUbbRWjNwnV379_0wvzLGpOM0t0X18sB8nTpumplyiCwlc5r_PjdIZfg=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>인증 절차는 실제로 이러한 흐름을 진행된다고한다.</p>

<ol>
  <li>
    <p>사용자가 로그인 정보와 함께 인증 요청을 한다.(Http Request)</p>
  </li>
  <li>
    <p>AuthenticationFilter가 요청을 가로채고, 가로챈 정보를 통해<br />
UsernamePasswordAuthenticationToken의 인증용 객체를 생성한다.</p>
  </li>
  <li>
    <p>AuthenticationManager의 구현체인 ProviderManager에게 생성한 <br />
UsernamePasswordToken 객체를 전달한다.</p>
  </li>
  <li>
    <p>AuthenticationManager는 등록된 AuthenticationProvider(들)을 조회하여 인증을 요구한다.</p>
  </li>
  <li>
    <p>실제 DB에서 사용자 인증정보를 가져오는 UserDetailsService에 사용자 정보를 넘겨준다.</p>
  </li>
  <li>
    <p>넘겨받은 사용자 정보를 통해 DB에서 찾은 사용자 정보인 UserDetails 객체를 만든다.</p>
  </li>
  <li>
    <p>AuthenticationProvider(들)은 UserDetails를 넘겨받고 사용자 정보를 비교한다.</p>
  </li>
  <li>
    <p>인증이 완료되면 권한 등의 사용자 정보를 담은 Authentication 객체를 반환한다.</p>
  </li>
  <li>
    <p>다시 최초의 AuthenticationFilter에 Authentication 객체가 반환된다.</p>
  </li>
  <li>
    <p>Authenticaton 객체를 SecurityContext에 저장한다.</p>
  </li>
</ol>

<p><a href="https://dev-coco.tistory.com/174">출처 - 슬기로운 개발생활</a></p>

<p><br /></p>

<p>즉, 우리가 구현해줘야할 부분은<br />
5번에서 사용자 정보를 받는 것을 이용해<br />
6번, 받은 정보를 이용해 UserDetails 객체를 반환만 시켜주면<br />
그 이후는 7번 부터 Spring Security가 알아서 진행시켜준다.</p>

<p>이를 토대로 위에 프로그램을 작성해 놓은 것을 보면<br />
오버라이딩한 loadUserByUsername 메서드를 통해서<br />
username을 매개변수로 정보를 받는다.<br />
해당 정보로 DB를 조회한다음, UserDetails 객체를 반환시켜주는 프로그램이다.</p>

<p><br /></p>

<p><strong><span style="color:#0066CC"> 위의 얘기를 한마디로 정리 해보자면 !! </span></strong></p>

<p>UserDetailsService 인터페이스를 구현한 클래스를 만든다.<br />
loadUserByUsername(); 메서드를 오버라이딩하여 매개변수로 username 정보를 받을 수 있다.<br />
username정보를 이용해 DB에 조회를 한다.<br />
조회한 데이터를 토대로 UserDetails 객체를 만들어 반환만 시켜주면 된다.<br />
이후는 Spring Security가 알아서 해줌</p>

<p><br /></p>

<h3 id="오늘-만난-error">오늘 만난 ERROR</h3>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.codestates.member.MemberController required a single bean, but 2 were found:
	- inMemoryMemberService: defined by method 'inMemoryMemberService' in class path resource [com/codestates/config/JavaConfigurationV1.class]
	- dbMemberService: defined by method 'dbMemberService' in class path resource [com/codestates/config/JavaConfigurationV2.class]
</code></pre></div></div>
<p>오늘 테스트 중 만났던 에러다. <br />
내용은 MemberController에서 싱글빈을 요구한는데 2개가 있다는 것 같은 내용이다.<br />
즉, 같은 타입의 빈이 두개가 등록된 문제라고 생각했다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Action:

Consider marking one of the beans as @Primary, updating the consumer to accept multiple beans, or using @Qualifier to identify the bean that should be consumed
</code></pre></div></div>
<p>밑에 아주친절하게 @Primary나  @Qualifier를 사용하라한다.</p>

<p><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
*  InMemory 사용을 위한 빈주입
* */</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaConfigurationV1</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">inMemoryMemberService</span><span class="o">(</span><span class="nc">UserDetailsManager</span> <span class="n">userDetailsManager</span><span class="o">,</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">InMemoryMemberService</span><span class="o">(</span><span class="n">userDetailsManager</span><span class="o">,</span><span class="n">passwordEncoder</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
*  DB 사용을 위한 빈주입
* */</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaConfigurationV2</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">dbMemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">,</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DBMemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">,</span><span class="n">passwordEncoder</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>MemberControler에서는 MemberService를 DI받게 설계해놓았고</p>

<p>MemberService라는 인터페이스를 구현한<br />
클래스 inMemoryMemberServie, DBMemberService 두개를<br />
빈으로 등록하려고 시도하니까 발생한 알람인 것 같다.</p>

<p>여기서 @Configuration을 한군데를 지워주면<br />
중복되지 않고 해결 할 수 있다.</p>

<p>하지만 코드는 그대로 유지싶었기에</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JavaConfigurationV2</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="nd">@Primary</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">dbMemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">,</span> <span class="nc">PasswordEncoder</span> <span class="n">passwordEncoder</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">DBMemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">,</span> <span class="n">passwordEncoder</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>JavaConfigurationV2에 빈등록 메서드에 @Primary를 이용해<br />
빈을 선택해 주입해주도록 정했다.</p>

<hr />

<p>오늘은 이렇게 스프링 시큐리티의 기본적인<br />
사용방법을 알아보았다.</p>

<p>내부적으로 이루어지는 작업들이 많아 정확한<br />
흐름이 감이 잡히질 않는 것 같다.<br />
글을 적으면서도 내가 정확히 이해한게 맞는지 수십번을 돌아가서 확인하고 반복했다. <br />
확인했다고 한들… 정확한 정보를 적은 것 같지 않은 느낌이든다.<br />
계속 익숙해지게 사용해보면서 사용법에 익숙해져보자</p>

<p>오늘공부는 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 짜장면, 탕수육</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">TIL) 인증, 보안 기초</title><link href="http://localhost:4000/til/2022/11/17/til.html" rel="alternate" type="text/html" title="TIL) 인증, 보안 기초" /><published>2022-11-17T00:00:00+09:00</published><updated>2022-11-17T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/17/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/17/til.html"><![CDATA[<p>오늘은 드디어<br />
인증과 보안관련된 공부가 시작되었다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmSK7Vlbd6P-ZA2TpRO9yTFxz9gH-OdxjYebZ6-r_KUFyGQiml5Hx8m6WodAQFCprhzYPGAg5SXnE-TkysLMqq-BedG44A=w1920-h864" alt="image" class="align-left" style="max-width: 50%" /></p>

<p>Spring Security, JWT, OAuth2 등<br />
여러가지를 배울 예정이고</p>

<p>가장 고전하는 영역이지 않을까 생각한다.</p>

<hr />

<p>오늘은 인증, 보안에 대한 기초를 먼저 파악하고<br />
내일부터 본격적인 Spring Security 사용법을 알아볼 것 같다.<br />
오늘은 기초인 HTTPS와 Hashing, Cookie, Session에 대해 알아보자</p>

<p><br /></p>

<h3 id="https">HTTPS</h3>

<p>우리가 여태까지 배웠기를 HTTP 프로토콜을 이용해<br />
TCP/IP 통신으로 서버와 연결할 수 있다고 공부를 했었다.<br />
HTTP Message를 통해 Json 객체를 받아보기도 하였다.</p>

<p>HTTPS의 Hyper Text Transfer Protocol Secure Socket layer의 약자다. <br />
보면 알 수 있듯이 기존의 <strong>HTTP + Secure Socket layer</strong>가 붙은 모습이다.<br />
HTTP 프로토콜을 보다 안전하게 요청을 주고 받기위해 SSL, TLS라는 알고리즘을 이용해 <br />
HTTP 통신을 하는 과정에서 데이터를 암호화하여 전송하는 방법이다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmQ7kg8wBa9J9dzD10tI68mzIX9M97wYHvAyH-tNw-vTeDL5V8vTsTeX3a_QiO7FnYOL0DMp_w7JRIh9Jt27wXdEgUoDiw=w1510-h1614" alt="image" class="align-left" style="max-width: 100%" /><br />
HTTPS TLS HandShake (출처: <a href="https://www.cloudflare.com/ko-kr/learning/ssl/what-happens-in-a-tls-handshake">CLOUDFLARE 사이트 참조</a> )</p>

<p>해당 그림은 HTTPS의 통신 핸드쉐이크이다. <br />
클라이언트에서 접속요청이 왔을 때, 내부적으로 통신이되어지는 순서이다.</p>

<p>TCP 연결이 완료후 TLS 핸드쉐이크가 동작하는 모습을 볼 수 있고<br />
TLS 핸드쉐이크 내에서는 인증서, 대칭키, 비대칭키와 같은 암복호를 통해<br />
인증된 서버에 접속을 할 수 있게 확인을 해준다.</p>

<p>정말 간단하게 정리해보자면</p>

<p><strong><span style="color:#F04965">대칭키 </span>: 키 한개로 암복호를 한다.</strong><br />
<strong><span style="color:#F04965">비대칭키</span> : 암호화한 키와 복호화한키가 다르다.</strong></p>

<p>키의 종류로는 <strong>공개키(Public Key)</strong>와 <strong>개인키(Private Key)</strong>가 존재하고</p>

<p>대칭키 같은경우에는 공개키-공개키, 개인키-개인키로 암호화 복호화를 할 수 있고<br />
비대칭키 같은 경우에는 공개키-개인키, 개인키-공개키로 암호화 복호화를 할 수 있다.<br />
HTTPS TLS 핸드쉐이크는 대칭키,비대칭키를 둘다 사용한다.</p>

<p>여기서 비대칭키 같은 경우에는<br />
개인키로 암호화한것을 공개키로 복호화할 수 있는데, 목적은 인증서같은 누구나 볼 수 있는 정보고<br />
공개키로 암호화한것을 개인키로 복호화할 수 있는데, 목적은 정보보호와 외부의 탈취방지를 위한 것이다.</p>

<p>여기서 <strong>인증서</strong>라는 개념이나오는데<br />
이러한 인증서의 역할은 서버에서 인증서를 브라우저에게 보내주는데<br />
클라이언트에 접속한 곳이 정말 해당 서버와 일치하는지 보증해주는 장치이다.<br />
이러한 인증서를 관리해주는 공인된 기관들을<br />
Certificate Authority 라고하며 대표적으로 AWS가 있다.</p>

<p>TLS 핸드쉐이크를 정리해보자면</p>

<ol>
  <li>Client -&gt; Server에게 헬로 요청</li>
  <li>Server -&gt; Client 인증서를 포함해서 헬로 응답 (개인키로 암호화하여 전달)</li>
  <li>Client는 내장된 CA 리스트를 보고 인증서를 확인한다. (개인키-&gt;공개키 복호화)</li>
  <li>Client가 CA의 공개키로 복호화를 통해 인증서를 검증했다면 Client는 대칭키를 만든다.</li>
  <li>이 대칭키를 서버의 공개키로 암호화해서 Client -&gt; Server에 전달한다.</li>
  <li>그럼 Server는 서버의 개인키로 복호화하여 클라이언트의 대칭키를 확인한다. (공개키-&gt;개인키 복호화)</li>
  <li>Server -&gt; Client의 대칭키로 샘플 데이터를 암호화해서 클라이언트에게 보내서 확인한다.</li>
  <li>Client는 서버에게 받은 데이터를 대칭키로 복호화해서 서로 대칭키를 잘 가지고 있는지 확인한다</li>
  <li>이 후에는 Client와 Server는 서로 대칭키로 암호화와 복호화를 진행하여 데이터를 전송한다</li>
</ol>

<p>사실 이런 일련의 과정들은<br />
브라우저와 서버가 해당 과정을 대신 처리해주기 때문에<br />
개념과 순서정도만 이해하면 좋을 것 같다.</p>

<p><br /></p>

<h4 id="로컬-환경에서-테스트">로컬 환경에서 테스트</h4>
<p>그럼 로컬환경에서 인증서 발급과 <br />
Https 서버를 구현하는 간단한 예제를 살펴보자</p>

<p>우선 Tomcat WAS를 사용하기위해<br />
스프링부트로 프로젝트를 만들었고</p>

<p>로컬환경에서 인증서를 만들기위해 터미널로 mkcert를 설치해야한다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>mkcert
</code></pre></div></div>
<p>homebrew를 이용해 mkcert 설치</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkcert <span class="nt">-install</span>
</code></pre></div></div>
<p>PKCS12 형식 인증서를 생성할 수 있도록 설치</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkcert <span class="nt">-pkcs12</span> localhost
</code></pre></div></div>
<p>내가 만든 프로젝트 resources 경로에서<br />
위의 명령어를 실행시켜 PKCS12 인증서를 생성해주면</p>

<p><br /></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmSGGxmFhNDI5InKLm5xBczg_DBOgwK4OJj_PGLONuWvOCIyDPyNnQBHZR2LmGmp5KEwzXwK3MxI2-ryG8RDepbN8HRYxw=w3024-h1614" alt="image" class="align-left" style="max-width: 50%" /></p>

<p>위와 같이 resources에 <br />
localhost.p12 인증서가 생긴다.</p>

<p>인증서가 생겼다면 application.properties 안에</p>
<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="py">server.ssl.key-store</span><span class="p">=</span><span class="s">classpath:localhost.p12</span>
<span class="py">server.ssl.key-store-type</span><span class="p">=</span><span class="s">PKCS12</span>
<span class="py">server.ssl.key-store-password</span><span class="p">=</span><span class="s">changeit</span>
</code></pre></div></div>
<p>와 같이 입력해주면 https로 서버를 사용가능하다.<br />
여기서 비밀번호는 초기해 셋팅을 하지않으면 changeit으로 입력하면된다.</p>

<p>그리고 스프링 애플리케이션을 실행시키면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmThmekJqkRGtjmJemxwLYuP9uTAyLwsOWuvrxTqsdCdOtk4pnyAXTjmlQ8MrR_5PaU4rYOu8DZll_u-Qvzy1E2s4UGW7A=w3024-h1614" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>사진과 같이 https로 서버 구현된 것을 확인할 수 있다.</p>

<p><br /></p>

<h3 id="hasing">Hasing</h3>
<p>어떤한 문자열에 임의의 연상을 적용하여 <br />
다른 문자열로 변환하는 것을 Hasing이라고 한다.</p>

<p>즉, 해싱한다는 의미는 어떠한 값을 암호화해준다 생각하면 될 것 같다.<br />
여기서 해싱의 특징을 적어보자면</p>

<ol>
  <li>모든 값에 대한 해시값을 계산하는데 오래걸리지 않아야한다.</li>
  <li>최대한 해시값을 피해야 하며, 모든 값은 고유한 해시값을 가진다.</li>
  <li>아죽 작은 단위의 변경이라도 완전히 다른 해시값을 가져야한다.</li>
</ol>

<h3 id="salt">Salt</h3>
<p>암호화해야 하는 값에 어떤 별도의 값을 추가하여 결과를 변형하는 것이다.<br />
영어로 소금이라는 뜻과 걸맞게 무언가 간을치는 느낌이라 생각하면 될 것 같다.</p>

<p>Salt의 큰 특징을 4가지 살펴보면</p>

<ol>
  <li>유저와 패스워드 별로 유일한 값을 가져야 한다.</li>
  <li>사용자 계정을 생성할 때와 비밀번호를 변경할 때 마다 새로운 임의의 Salt를 사용해서 해싱해야 한다.</li>
  <li>절대 재사용하지 말아야한다.</li>
  <li>DB의 유저테이블에 같이 저장 되어야한다.</li>
</ol>

<h3 id="cookie">Cookie</h3>

<p>쿠키는 서버가 웹 브라우저에 정보를 저장하고 불러올 수 있는 수단<br />
이라고 생각하면 간단할 것 같다.</p>

<p>우리가 이전에 배운 Http 프로토콜은<br />
무상태성(stateless)은 이전에 했던 작업에 대해 기억하지 않는 특성을 가지는데<br />
검색을 하려는데 검색목록이 아래 표시된다든지<br />
로그인 기억버튼을 눌러놓았는데 다음에 열어도 눌려져있다든지<br />
우리는 요청을 보낼때 무상태성으로 동작하기때문에 이러한 내용들을 기억하지 못 하는데<br />
브라우저에서 쿠키라는 것을 이용해 이러한 내용들을 저장해 사용할 수 있는 것이다.</p>

<p>한마디로 서버가 클라이언트에서 요청을 받고<br />
클라이언트쪽에 응답할때 쿠키에 데이터를 싦어서 보내면<br />
브라우저에서 쿠키값을 유지시키고 사용한다고 보면될 것 같다.</p>

<p>쿠키의 옵션으로는</p>

<p>domain - 서버와 요청의 도메인이 일치하는 경우 쿠키 전송<br />
path - 서버의 요청의 세부 경로가 일치하는 경우 쿠키 전송<br />
maxage/expires - 쿠키의 유효기간 설정<br />
httpOnly - 스크립트의 쿠키 접근 가능 여부 설정<br />
secure - HTTPS 에서만 쿠키 전송 여부 설정<br />
sameSite - 같은 사이트에서만 쿠키를 사용할 수 있게 하는 설정</p>

<h3 id="session">Session</h3>

<p>세션은 인증해주는 방법으로<br />
여러 페이지에 걸쳐 사용되는 사용자 정보를 저장하는 방법이다.</p>

<p>세션은 중요한 데이터를 서버에 저장하고 암호화된<br />
세션id를 쿠키에 담아 클라이언트에 전달하고<br />
세션id가 부여된 브라우저는 신분증같이 이를 이 유저는 인증에 성공했다고 알리며<br />
다른 요청을 보낼때 마다 해당 세선id로 인증을 거치며 사용할 수 있게된다.</p>

<p><br />
<br /></p>

<p><strong>쿠키와 세션의 비교</strong></p>

<table>
  <thead>
    <tr>
      <th> </th>
      <th style="text-align: center">Cookie</th>
      <th style="text-align: center">Seesion</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>설명</td>
      <td style="text-align: center">쿠키는 그저 http의 stateless<br />한 것을 보완해주는 도구</td>
      <td style="text-align: center">접속 상태를 서버가 가짐<br /> 접속 상태와 권환 부여를 위해<br />세션아이디를 쿠키로 전송</td>
    </tr>
    <tr>
      <td>접속 상태<br />저장 경로</td>
      <td style="text-align: center">클라이언트</td>
      <td style="text-align: center">서버</td>
    </tr>
    <tr>
      <td>장점</td>
      <td style="text-align: center">서버에 부담을 덜어줌</td>
      <td style="text-align: center">신뢰할 수 있는 유저인지 서버에서 확인</td>
    </tr>
    <tr>
      <td>단점</td>
      <td style="text-align: center">쿠키 그자체는 인증이 아님</td>
      <td style="text-align: center">하나의 서버에서만 접속 상태를 가지므로 <br />서버분산에 불리</td>
    </tr>
  </tbody>
</table>

<p><br /></p>

<hr />

<p>오늘은 이렇게 인증, 보안에 관한 <br />
간단한 CS 지식들을 공부해보았는데<br />
사실 처음 듣는 개념들이라 아직 어떻게 쓰이는지 감을 잡기가 어렵다.</p>

<p>이러한 것들이 있고 후에 학습하면서<br />
이렇게 사용하는구나를 깨닫고 내것으로 체득을 해야할 것 같다.</p>

<p>오늘 공부는 여기서 끝 !</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 라면, 김밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[오늘은 드디어 인증과 보안관련된 공부가 시작되었다.]]></summary></entry><entry><title type="html">TIL) 세달차 회고</title><link href="http://localhost:4000/til/2022/11/16/til.html" rel="alternate" type="text/html" title="TIL) 세달차 회고" /><published>2022-11-16T00:00:00+09:00</published><updated>2022-11-16T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/16/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/16/til.html"><![CDATA[<p>어느덧 가을을 지나 겨울을 향해 달리고있다.<br />
시간은 멈추지 않는다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmR16i01UpPNroUzNknMVxn4tsIkhDV6gkngKajpEaMzj2xJ4E5Vyez__5rtpW5xjh_1Acwk1IZjAcZmfys0znB7kYUlsA=w3024-h1728" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>내가 느끼는 한국사회에서의 시간은<br />
조금더 빠른 것 같다는 생각이드는 요즘.</p>

<p>공부에 대한 재미와 열망이 강해지고 있다.<br />
좋은 징조인 것 같다는 생각도들고, 공부하면할 수록 더욱더<br />
파고들어 알고싶다는 욕심이 가득해진다.</p>

<p>현재 단계에서 학습에 어느정도 방해가 되는 요소라고 생각한다.<br />
알면서도 한가지에 대해 계속 파다보니 다른 공부들을<br />
전부 학습하기에 시간이 많이 허비되고 비효율적이라는  점을 발견했다.</p>

<p>어느덧 개발공부한지 세달차가 되어버린<br />
나의 일상과 회고를 작성해보려한다.</p>

<hr />

<h3 id="내가-배운-것">내가 배운 것?</h3>
<p>지난 세달간 배운 것을 나열하자면<br />
엄청나게 많은 내용들이 있다.</p>

<p><img src="https://lh3.googleusercontent.com/drive-viewer/AJc5JmSXU951Um_58x0b3_0a2GfPEYsLXEs-jRIv8ABUveSo7Iw5c_T-fB_Qq0joTmnrxVKOQF2vwPY=w1512-h753" alt="image" class="align-left" style="max-width: 80%" /></p>

<p>Java와 JavaScrpit도 구분하지 못하는 내가<br />
어느덧 Java와 Spring Framework를 사용하고 있으니<br />
느리지만 대단한 발전이라고 생각한다.</p>

<p>이번 한달은 Spring에 대해 집중적으로 공부하는 시간이였다.<br />
Spring MVC, 애플리케이션 계층, Spring 예외처리,<br />
Spring JDBC,JPA,Transaction, JUnit, APi 문서 자동화 등<br />
기본적인 지식부터 Spring을 이용한 웹애플리케이션<br />
설계와 구현에 대한 전반적인 내용들을 다루어보았었다.</p>

<p>한달동안 정말이지 가장 유익했던 공부를 많이한 것 같다.  <br />
이유는 당연하게도 실무에서 사용되는 기술들을 배웠다는 점이 가장 컸고<br />
해당 기술로 어느정도 웹애플리케이션을 만드는 구조에대해 익힌 것 같아서이다.</p>

<p><br /></p>

<h3 id="세달-간-나의-루틴은">세달 간 나의 루틴은?</h3>
<p>인간이란 생물은 참 신기한 것 같다.<br />
복잡한 감정을 느끼게 되어 행복할 수도 불행할 수도 있는 것 같으니,,</p>

<p>이번달은 사실 가장 복잡한 감정을 많이 느낀 달이다.<br />
오랜기간 같은걸 반복하다보면 목표가 흐려지고 지치기 마련이다.<br />
나도 난이도가 증가하는 학습과 학습량 그리고 반복되는 일상에<br />
어느정도 번아웃이 왔었고, 마음가짐을 여러번 고쳐먹었었다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmRlTDexto7K3zOvG3HYqMS_zovg7kMNMWV_JL6QzWm5fP4TRqS5b9iNtWo3ee1ln1iJUhg2uR-djF3gZupYtWSzYRNn=w3024-h1614" alt="image" class="align-left" style="max-width: 80%" /></p>

<p>세달 동안 거의 루틴이 동일하다.<br />
<strong>콘텐츠 학습(09:00~18:00) -&gt; 복습 및 TIL 작성(19:00~21:00) -&gt; 강의 공부 및 예습(21:00~)</strong><br />
위와 같은 루틴으로 계속 공부해왔고, 중간에 리프레쉬를 위해<br />
운동도 해보고 여러가지를 시도해보았지만, 침대에서 쉬었다가 <br />
다시 공부하는게 가장 나한테 집중을 할 수 있게 해주는 요인으로 확인했다.</p>

<p>강의는 주로 Infren 김영한님의 강의를 듣고있고<br />
지식적으로나 인간적으로 매우 배울점이 많은 분이신 것 같다는 생각이 든다.<br />
하신 말씀중에 너무나도 기억에 남는게</p>

<p>열정은 금방식는다. 무언가 도전을한다면<br />
몰입할 수 있는 시스템을 만들어서 거기에 나를 던지라는 말이 너무나도 와닿았다.  <br />
현재 내가 그런 상태이기 때문에, 열정보단 내가 공부하는<br />
루틴과 시스템을 만들어 잘 지키도록 노력을 해야겠다고 생각했고</p>

<p>나도 저렇게 멋지게 성장해야겠다는 마음을 항상 다지고있다.</p>

<p><br /></p>

<h3 id="다음달은-어떻게-보낼-것인가">다음달은 어떻게 보낼 것인가?</h3>

<p>지난 세달간 열심히 달려왔고<br />
항상 해오던 것들은 유지할 생각이다.</p>

<p>데일리 루틴으로 항상 하는것은</p>
<ol>
  <li>1일 1커밋하여 잔디심기 (의미있는 것들로)</li>
  <li>TIL 블로그 작성하기</li>
</ol>

<p>이렇게 2가지는 항상 해오고 있다.<br />
주말에는 못하더라도 부족했던 부분에 대한 복습과 프로젝트때<br />
필요할 것 같은 기술에 대한 예습을 주로하는 편이다.<br />
이 부분들은 나와 잘 맞는 것 같고, 성장에 도움이된다 생각하여<br />
매번 실천할 생각이다.</p>

<p>오랜 공부시간동안 운동을 나갔다오거나<br />
다른 것으로 리프레쉬하는 방법을 많이 취해보았는데<br />
크게 도움은 없다고 깨달았고, 누워서 정신을 맑게<br />
쉬는 것이 최고의 방법이라 생각하여 이 부분도 계속 이렇게 공부에<br />
집중할 수 있도록 유지할 생각이다.</p>

<p><br /></p>

<p>그리고 공부하면서 깨달은 안좋은 습관들을 발견했다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmRpTAUYSI-GUgK5uUnr4WgRsY_BsNfK-teJ_Bu1og9-RxJlO8Q1HRRnCY01NZUpfNaJdscM7wwPNseuLvdUlc7ZLff_5w=w1920-h864" alt="image" class="align-left" style="max-width: 40%" /></p>

<ol>
  <li>공부중 카카오톡과 SNS를 수시로 들어간다.</li>
  <li>노래를 들으면서 공부한다.</li>
  <li>오늘 공부의 목표점에 도달하면 다음공부를 미룬다.</li>
</ol>

<p>처음에는 대수롭지 않게 생각하고 있던 습관들이다.<br />
최근에 공부를하면서 내집중을 흐리는데 가장 큰 역할을 한다고 생각했고 <br />
학교처럼 공부시간에 철저하게 시스템을 갖춰<br />
거기안에서 내가 실천할 수 있게끔 공부하는 방식으로 개선을 했다.</p>

<p>이 개선방법으로 계속 공부해나아갈 생각이고<br />
3번과 같은 경우, 다들 그런지는 모르겠지만… 오늘의 학습량을<br />
마치고 나면 그냥 시간이 남아도 쉬어버리는 문제가 있었다.</p>

<p>마음의 안심이랄까? 오늘할꺼 다했다! 라는 생각이 들어서<br />
공부를 안하게되어서, 억지로라도 인프런 강의를 켜서<br />
듣기 시작하다보니 이제 그 시간이 재밋어지기 시작하고있다.<br />
뭐든지 실천하는게 가장 어렵듯이 강의를 키기까지가 제일 어렵지만<br />
막상 키고나면 재밌어서 계속 듣게되는 효과가 있는 것 같다.</p>

<p><br /></p>

<p>그리고 가장 공부가 필요하다고 생각하는 부분이 드는게 있다.<br />
물론 현재 배우고있는 Spring 관련 공부는 계속해야하는 것이지만<br />
이제 슬슬 <strong>정규식관련 문법, 알고리즘 공부</strong>를 준비해야할 것 같다는 생각이든다.</p>

<p>다음달 학습을 어느정도 마친후<br />
알고리즘 공부도 체계적으로 진행해볼 예정이다.<br />
다양한 문제를 접하기 보다는, 한가지 유형의 문제를 많이 풀어<br />
먼저 익숙해지는 방법을 가지고 범위를 확장시켜 나아갈 생각이다.</p>

<p><br /></p>

<h3 id="마치며">마치며</h3>

<p>어렸을 때 부터, 여러가지를 많이 경험해보고 싶었고<br />
어떻게 하다보니까 지금에서야 개발자 준비를 하게되었다.</p>

<p>적지않은 나이에 준비를 시작하자니 불안감과 상대적 비교가<br />
나를 가장 불안하게 했던 달이었던 것 같다.</p>

<p>최근에 가장 감명깊게 보았던 것 중에서<br />
조금 오그라들거나 별거 아닌 것 처럼 느끼는 분들도 있을 것 같긴한데<br />
나한테는 큰 임펙트로 다가와서 얘기해보려한다.</p>

<p>내가 가장 많이하는 게임.. 리그오브레전드<br />
나 같은 겜돌이들은 당연히 이번년도에 열리는 결승전 경기를 보았을 거라 생각한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmTXoT1HvGMR6nEoy_n4kpu1lcISRNm8bgZN4eeS86_HASrkFdxrDDPt7RLkMKW6DR-q62hJyo-QTUpuNjaoKCC-c5o59w=w1920-h864" alt="image" class="align-left" style="max-width: 70%" /></p>

<p>DRX Deft 선수가 10년의 역경을 이기고 우승 트로피를 들어올리는 장면이다.<br />
아마 역대 가장 스토리가 좋은 결승전으로 꼽힐거고<br />
롤을하는 유저들이라면 백퍼센트 공감할 것 같다.</p>

<p>한국에서도 가장 낮은 시드로 월즈에 진출해<br />
가장 약한팀으로 평가받았고 누구도 우승할거라 예상하지 못했을 거다.<br />
결승하는 과정도 진짜 순탄치않았고, 나는 그과정들을 다챙겨 보았었다.</p>

<p>올라가는 과정 중 데프트 선수가 했던 얘기가 기사화 되어<br />
기사의 작명으로 <strong>‘중요한건 꺽이지 않는 마음’</strong> 이라는 말이 밈이되었고 명언이되었다.</p>

<p>누구에겐 장난처럼들리고 별 것 아닌 것 처럼 들릴 수 있겠지만<br />
지금 개발자로 커리어 전환하려는 나의 마음이 가볍지 않았기 때문에<br />
나에겐 이 문구가 꽤나 크게 다가왔다.</p>

<p>단순히 컨텐츠적으로 재미로 소모할 수 있었겠지만<br />
내 마음의 큰 변화가 생겼고, 그 동안 나는 너무 가볍게 공부하지 않았을까?<br />
정말 죽어라 고생하면서 공부하고있니? 라는 물음들이<br />
가슴속에 던져졌고 나는 이를 계기로 조금 더 성장하면서<br />
나아가야겠다는 마음을 가지게 된 것 같다.</p>

<p><br /></p>

<p>이상 세달차 공부 중인 <br />
나란 사람의 회고를 적어본다.</p>

<p><br /></p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[어느덧 가을을 지나 겨울을 향해 달리고있다. 시간은 멈추지 않는다.]]></summary></entry><entry><title type="html">Spring) MySQL Local 연동 하기</title><link href="http://localhost:4000/spring/2022/11/15/spring-mysql.html" rel="alternate" type="text/html" title="Spring) MySQL Local 연동 하기" /><published>2022-11-15T00:00:00+09:00</published><updated>2022-11-15T00:00:00+09:00</updated><id>http://localhost:4000/spring/2022/11/15/spring-mysql</id><content type="html" xml:base="http://localhost:4000/spring/2022/11/15/spring-mysql.html"><![CDATA[<p>오늘은 Spring을 이용해 MySQL을 Local 환경에서<br />
연결하여 사용해보려고한다.</p>

<p>기존에 H2를 사용해 테스트를 진행했었고 JPA를 사용하기때문에  <br />
저장소만 바꿔주는 테스트를 해보려는 것이다.</p>

<p>MySQL WorkBench GUI로 작업하였고<br />
리소스는 .yml 파일을 사용했다.</p>

<p>개발환경에 따른 MySQL 설치와 사용환경은 준비되어있다고 가정하겠다.</p>

<p><br /></p>

<p>1). bulid.gradle 설정</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>runtimeOnly 'mysql:mysql-connector-java'
</code></pre></div></div>

<p>첫번째로 의존라이브러리를 추가해줘야한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmT3UmG6D9zRRTBuGTrPPBn1AMzOguxqyJyTCiPbwzSnqYvkwa2lcq7zFy-3TB1VCBhRhCBXyPGBvN2KxBkWBnjq3NhY9Q=w3024-h1614" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>추가하고 Gradle Reload를 할 경우 위와 같이<br />
라이브러리 패키지가 생기는 것을 확인할 수 있다.</p>

<p><br /></p>

<p>2). .yml 파일 설정</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">jpa</span><span class="pi">:</span>
    <span class="na">hibernate</span><span class="pi">:</span>
      <span class="na">ddl-auto</span><span class="pi">:</span> <span class="s">create-drop</span>  <span class="c1"># 스키마 자동 생성</span>
    <span class="na">show-sql</span><span class="pi">:</span> <span class="no">true</span>      <span class="c1"># SQL 쿼리 출력</span>
    <span class="na">properties</span><span class="pi">:</span>
      <span class="na">hibernate</span><span class="pi">:</span>
        <span class="na">format_sql</span><span class="pi">:</span> <span class="no">true</span>  <span class="c1"># SQL pretty print</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">com.mysql.cj.jdbc.Driver</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost:포트넘버/스키마이름?serverTimezone=Asia/Seoul</span> <span class="c1"># 포트넘버, 스키마이름</span>
    <span class="na">username</span><span class="pi">:</span>  <span class="c1"># 유저네임</span>
    <span class="na">password</span><span class="pi">:</span>  <span class="c1"># 비밀번호</span>
</code></pre></div></div>

<p>두번째로 연결을위한 .yml파일 설정이다.<br />
프로젝트 이름 &gt; main &gt; resources 에서 확인이 가능하고<br />
properties 확장자를 application.yml로 변경하였다.</p>

<p>spring : <br />
jpa : <br />
에 해당하는 부분은 jpa관련 설정이다.</p>

<p>우리가 봐야할 부분은<br />
spring :<br />
datasource :<br />
이부분이고 해당 부분에 MySQL 설정 정보를 넣어줘야한다.</p>

<p>넣어줘야할 정보는 4가지 이다.</p>
<ol>
  <li>포트넘버</li>
  <li>스키마 이름</li>
  <li>유저네임</li>
  <li>비밀번호</li>
</ol>

<p>이렇게 총 4가지의 정보를 넣어주면 되고 헷갈리는 분들을 위해<br />
아래에 어디서 찾는지 적어보겠다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmTQ8kpsyLHOtqRJe4AWUM2aNJaivLTPJXYRrN0ouL1c4O408flzunjeHgxsWpz-ciRq_28B1-XViwZ9D2zNRMJFtVTE=w1512-h807" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>워크밴치(MySQL WorkBench)를 열어보면<br />
커넥션에 관한 정보가 나온다.<br />
없으면 연결을 한번도 하지 않은 것이기에<br />
커넥션을 만들어주면 된다.</p>

<p>커넥션을 더블클릭 해보자</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmSYYNi9Ztave6ML9l2HlQz6N0L9Qp9hExMMGC6gWibCjaC77q3_Kr13n0i3FVaKMw3Uw7i2pJEffAYTGQbXcXNJs88a=w3024-h1614" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>더블클릭을 하면 위와같은 팝업창을 확인할 수 있다.<br />
여기서 주소는 localhost:3306 을 사용한다는 것을 알 수 있고<br />
비밀번호를 입력하면 해당 커넥션으로 접속이 가능하다.</p>

<p>여기서 알 수 있는 정보는</p>

<p><strong>포트넘버 = 3306<br />
유저네임 = root<br />
비밀번호 = 본인이 설정한 해당 비밀번호</strong></p>

<p>이렇게 알 수 있다.</p>

<p>그리고 접속을 한 다음에는</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmTl-Yr7RL6BgRLfYwoprmSbmBdVuW57E1ZZZNHIkUzW7qSYqUYhsrV8oxAIaYAwRvmuBETxjvR-HdrKpeLwOww8acgNJQ=w3024-h1614" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>전체적인 화면을 볼 수 있는 Schemas에 들어가<br />
스키마를 생성해주면 된다.</p>

<p>생성한 스키마가 스키마이름이 되는 것이다.<br />
나는 example로 설정했고<br />
이렇게 최종적으로 4가지 정보를 알아볼 수 있었다.</p>

<p>이렇게 정리해서 정보를 적어보자면</p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">datasource</span><span class="pi">:</span>
  <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">com.mysql.cj.jdbc.Driver</span>
  <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost:3306/example?serverTimezone=Asia/Seoul</span> <span class="c1"># 포트:3306 , 스키마:example</span>
  <span class="na">username</span><span class="pi">:</span> <span class="s">root</span>  <span class="c1"># 유저네임</span>
  <span class="na">password</span><span class="pi">:</span> <span class="s">내 비밀번호</span> <span class="c1"># 비밀번호</span>
</code></pre></div></div>

<p>이렇게 설정할 수 있을 것이다.</p>

<p>여기서 비밀번호를 까먹은 사람들이 많은데.. 까먹지 않도록 유의하자<br />
처음에 mysql를 다운받고 설정한 비밀번호다.<br />
인터넷에 비밀번호 리셋 하는법 등이 있으니 참고해보자</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="Spring" /><category term="Spring" /><category term="mysql" /><summary type="html"><![CDATA[오늘은 Spring을 이용해 MySQL을 Local 환경에서 연결하여 사용해보려고한다.]]></summary></entry><entry><title type="html">TIL) Application 빌드, 실행</title><link href="http://localhost:4000/til/2022/11/15/til.html" rel="alternate" type="text/html" title="TIL) Application 빌드, 실행" /><published>2022-11-15T00:00:00+09:00</published><updated>2022-11-15T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/15/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/15/til.html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNq0VcIEmAZMz_1paQl-4m8_fIqcR-XIxlvy4GrezxEOvY6tzpT_1uI3JJK_XNFFzX3gFipA7DgprUqDMmQVqM19rSf8Q=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>오늘은 섹션 마지막날이다. <br />
벌써 3달째를 달리고 있는 부트캠프</p>

<p>확실히 혼자 공부하는 것보다 가이드라인이 제시되니<br />
스텝바이스텝으로 성장하는 모습이 눈에 보이니</p>

<p>만족스러운 나날을 보내고 있다.<br />
그럼에도 아직 새발의 피 정도만 공부했기에<br />
오늘도 공부를 시작해보자</p>

<hr />

<p>오늘은 애플리케이션 빌드하는 법을 알아보려한다.<br />
실제로 나중에 서버에 배포를 해야하기에 ..</p>

<h2 id="애플리케이션-빌드실행">애플리케이션 빌드/실행</h2>

<p>우리는 여태까지 IntelliJ IDE의 도움을 받아서<br />
빌드를 진행했었다.</p>

<p>IDE를 사용하지않고 로컬 환경이 아닌 서버환경에서 실행<br />
가능하게 하려면 Gradle이나 Maven같은 빌드 툴을 이용해서 Spring Boot<br />
기반의 애플리케이션 소스 코드를 빌드하는 기본적인 방법을 알고있어야한다.</p>

<p>우선 IDE를 이용해 빌드하는 방법을 알아보자<br />
(우리가 만든 프로젝트는 Gradle이다)</p>

<p><br /></p>

<h3 id="빌드">빌드</h3>

<p><strong>1). IDE를 통한 build</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNkvOHRKiADoB4F8uygjnopOf4yqKRcMFN3Y0F47e49WVx74nLU_L3f20JxUX0AQCXTBFVgFD6JOgB04D4H2SxJJebxAw=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>내가 만든 프로젝트 이름 -&gt; Taske -&gt; bootJar or build 를<br />
더블 클릭해서 빌드해줄 수 있다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmSjKwMt-ckmZXkOIp-tqZfr2mCjaNKgrTC6qMK0HNni9P8v92vYxD8qYjRGYLi0wIHQy-4Tf-ysvMVxchljPxkJPytO=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>빌드가 완료되면 Jar 파일이 생기는데<br />
여기서 plain.jar 파일은 build task를 실행하면 생기는 파일이다.<br />
우리는 실행 가능한 Jar 파일인 plain이 안붙은 파일을 실행시키면 된다.</p>

<p><br /></p>

<p><strong>2). 터미널로 build</strong></p>

<p>첫번째로 Gradle이 설치되어 있는지 확인해보자</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gradle <span class="nt">-v</span>
</code></pre></div></div>

<p>만약에 버젼이 안뜨고 zsh: command not found: gradle<br />
찾을 수 없다고 한다면, homebrew를 통해 gradle을 다운 받는다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>gradle
</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">==&gt;</span> Downloading https://ghcr.io/v2/homebrew/core/openjdk/17/manifests/17.0.5
<span class="c">######################################################################## 100.0%</span>
<span class="o">==&gt;</span> Downloading https://ghcr.io/v2/homebrew/core/openjdk/17/blobs/sha256:0e2244e35a350256474b6eb6e03d11af5c0270ab7ca4e6bc71
<span class="o">==&gt;</span> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:0e2244e35a350256474b6eb6e03d11af5c0270
<span class="c">######################################################################## 100.0%</span>
<span class="o">==&gt;</span> Downloading https://ghcr.io/v2/homebrew/core/gradle/manifests/7.5.1_1
<span class="c">######################################################################## 100.0%</span>
<span class="o">==&gt;</span> Downloading https://ghcr.io/v2/homebrew/core/gradle/blobs/sha256:b8a590221ce177514ddff10c925b892ee856b9a23cc28dc623124b
<span class="o">==&gt;</span> Downloading from https://pkg-containers.githubusercontent.com/ghcr1/blobs/sha256:b8a590221ce177514ddff10c925b892ee856b9
<span class="c">######################################################################## 100.0%</span>
<span class="o">==&gt;</span> Installing dependencies <span class="k">for </span>gradle: openjdk@17
<span class="o">==&gt;</span> Installing gradle dependency: openjdk@17
<span class="o">==&gt;</span> Pouring openjdk@17--17.0.5.arm64_monterey.bottle.tar.gz
🍺  /opt/homebrew/Cellar/openjdk@17/17.0.5: 642 files, 307MB
<span class="o">==&gt;</span> Installing gradle
<span class="o">==&gt;</span> Pouring gradle--7.5.1_1.all.bottle.tar.gz
🍺  /opt/homebrew/Cellar/gradle/7.5.1_1: 11,340 files, 276.1MB
<span class="o">==&gt;</span> Running <span class="sb">`</span>brew cleanup gradle<span class="sb">`</span>...
Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.
Hide these hints with HOMEBREW_NO_ENV_HINTS <span class="o">(</span>see <span class="sb">`</span>man brew<span class="sb">`</span><span class="o">)</span><span class="nb">.</span>
<span class="o">==&gt;</span> <span class="sb">`</span>brew cleanup<span class="sb">`</span> has not been run <span class="k">in </span>the last 30 days, running now...
</code></pre></div></div>

<p>이렇게 다운 받고 난뒤에 다시<br />
버젼을 체크해보면 설치된 모습을 확인해 볼 수 있다.</p>

<p><br /></p>

<p>이제 Gradle이 설치되었으니<br />
우리가 만든 애플리케이션 폴더에 들어가서<br />
아래와 같이 빌드 명령어를 입력해 주면 빌드가 되어진다.</p>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./gradlew build
</code></pre></div></div>

<p><strong>zsh: permission denied: ./gradlew</strong><br />
만약 명령어 입력시 위에처럼 권한 문제가 발생한다면</p>

<p>gradlew의 권한을 644 -&gt; 755로 변경해주어야한다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ll
</code></pre></div></div>
<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nt">-rwxr-xr-x</span>   1 ljh  staff   7.9K 11 15 10:44 gradlew
</code></pre></div></div>
<p>현재 경로에서를 ll을 입력하여 권한 상태를 확인할 수 있다.<br />
ls -l 을 입력하여도 확인이 가능하다</p>

<p>rwx : 7<br />
r-x : 5<br />
r-x : 5<br />
와 같이 권한을 변경해주어야 하며</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">chmod </span>755 gradlew
</code></pre></div></div>
<p>권한 변경 명령어인 chmod로 권한을 변경해주면</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./gradlew build
</code></pre></div></div>
<p>명령어가 정상적으로 빌드되어지는 모습을 확인할 수 있다.</p>

<p>빌드가 되어지면 위에 IDE를 통해 빌드했던 것 처럼<br />
build &gt; libs 폴더에 .jar 파일이 생기는 것을 확인할 수 있다.</p>

<p><br /></p>

<h3 id="실행">실행</h3>

<p><strong>터미널로 Jar 파일 실행시키기</strong></p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> section3-week3-template-build-0.0.1-SNAPSHOT.jar
</code></pre></div></div>
<p>기본적으로 .jar파일을 실행시키려면<br />
java -jar을 입력후 파일이름을 넣어주면<br />
애플리케이션이 IDE에서 실행되는 것 처럼 실행되는 모습을<br />
터미널에서 확인할 수 있다.</p>

<p><br /></p>

<p><strong>프로파일(Profile) 적용</strong></p>

<p>프로파일 적용이란.<br />
우리는 로컬환경에서 테스트하기위해 H2 DataBase를 주로 사용해왔다.<br />
하지만 서버에 배포하거나 실제 애플리케이션을 적용하는 DataBase는<br />
다른 DataBase가 올 수 있다. 그렇자고 기존에 설정한 H2 관련<br />
데이터를 서버에 올릴때 일일이 지워서 하기에는 불편함이 있어<br />
동시에 사용할 수 있도록 Spring에서는 프로파일(Profile)이라는 기능을 제공해준다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNVRhs0fF44pgVaBPKUdF2aVOB9HWNny4_gw6wyvlz5td8IXIw3uhTQZuQhQJkFevEKtgvFCnFhwKgV9SJsZdlar03AUA=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>우선 .yml 파일을 분리해주어야한다.</p>

<p>application.yml<br />
application-local.yml<br />
application-server.yml</p>

<p>이렇게 세개로 분리해주었고 기존에 빌드시 사용하는 yml 파일은<br />
application.yml 파일이다.   해당 파일에는 아무런 코드도 넣지 않았고</p>

<p>우리는 애플리케이션을 실행할 때 설정에 따라 local.yml, server.yml로<br />
변경해가면서 사용이 가능하다.</p>

<p>local.yml -&gt; h2 정보<br />
server.yml -&gt; mysql 정보<br />
나는 위와 같이 등록해놓고 사용하였다.</p>

<p>mysql을 사용한다고 가정하고 설정을 진행해보자</p>

<p><strong>1). yml 설정 변경</strong></p>
<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">profiles</span><span class="pi">:</span>
    <span class="na">active</span><span class="pi">:</span> <span class="s">server</span>
</code></pre></div></div>
<p>application.yml 파일에 위와 같이 설정해주면 된다.</p>

<p><br /></p>

<p><strong>2). 구성 편집</strong></p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmTrEQ-vD2xirlKWhVpEcb96S87oR1s3Wjb2F_-Xup3XvpXxN0yvNE4Mbe2s79htd5-npeN9wfiVaA8Fow_bGjK8Q1yE=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>IDE의 구성 편집에서도 수정할 수 있다.<br />
애플리케이션을 선택 후</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>--spring.profiles.active=server
</code></pre></div></div>

<p>위와 같이 입력해주면 된다.</p>

<p><br /></p>

<p>설정을 끝냈으면 이제 .jar 파일을 실행시키면 된다.<br />
기존과 동일하게 실행 시키는데 뒤에<br />
–spring.profiles.active=server 를 추가해주고 실행시키면된다.</p>

<div class="language-shell highlighter-rouge"><div class="highlight"><pre class="highlight"><code>java <span class="nt">-jar</span> section3-week3-homework-build-0.0.1-SNAPSHOT.jar <span class="nt">--spring</span>.profiles.active<span class="o">=</span>server
</code></pre></div></div>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPsLVoNTpjR8xJLJAwP4xyDmw8zjaz0XeAdt4QomyJV1uM0dEzTKpcIzikSqw5TAHr1AJt4hrgO47p_ZBfQ-nSK6-9L=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>실행 시킬 경우</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>The following 1 profile is active: "server"
</code></pre></div></div>

<p>위와 같은 profile 문구가 발생한다면<br />
정상적으로 연결이 되어졌다는걸 확인할 수 있다.</p>

<p><br /></p>

<h3 id="오늘-만난-error">오늘 만난 ERROR</h3>

<p>오늘 만난 에러중 dataSource 관련 에러가 발생했었다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'dataSource' defined in class path resource 
[org/springframework/boot/autoconfigure/jdbc/DataSourceConfiguration$Hikari.class]: Bean instantiation via factory method failed; nested exception 
is org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.zaxxer.hikari.HikariDataSource]: Factory method 'dataSource' 
threw exception; nested exception is java.lang.IllegalStateException: Cannot load driver class: com.mysql.cj.jdbc.Driver
</code></pre></div></div>

<p>해당 내용은 의존라이브러리가 제대로 추가되어있지 않아<br />
읽어오지 못하는 현상 같았고</p>

<p>mysql 과 연동하기 때문에 msql 의존라이브러리를 추가하였고</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>// mysql 의존라이브러리 추가
runtimeOnly 'mysql:mysql-connector-java'
</code></pre></div></div>

<p>의존 라이브러리 추가후</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMae5HizPF6syR7eBuQLmncWHLBOE-0y7fGS6RiuafbOdpIvYrLsxbcRv0EYY1bWe3X9WHdhj0HgRifbnEzk-a7Q04Z=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위와 같이 라이브러리 패키지가 생기면<br />
해당 오류는 해결이 가능할 것 이다.</p>

<hr />

<p>오늘은 이렇게 터미널로 build 하는 법과 execution 하는<br />
방법을 알아 보았다. 아마도 나중에 서버에 이런식으로<br />
애플리케이션을 실행 시켜놓고 운영하는게 아닐까? 라는 생각을 해본다.</p>

<p>오늘 공부도 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 김치찌개, 김밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">TIL) API Documentation 2</title><link href="http://localhost:4000/til/2022/11/14/til.html" rel="alternate" type="text/html" title="TIL) API Documentation 2" /><published>2022-11-14T00:00:00+09:00</published><updated>2022-11-14T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/14/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/14/til.html"><![CDATA[<p>한 주가 끝나고 새로운 주가 시작되었다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gOXnXDoCRH7AtlOncucaI0nI7RqC9GMkm0ZG-VhgIXazy7m5tTSccABV_f-3G5RjFSfN1ojWWOJzPxeYeKp4Ycs2Ykj=w1920-h921" alt="image" class="align-left" style="max-width: 65%" /></p>

<p>Spring 핵심 기술을 배우는 섹션이 거의 막바지로 다가왔다.<br />
내가 사용할 수 있는 기술은 정말 적은 것 같은데</p>

<p>벌써 어느덧 섹션 끝에 다다르다니…<br />
시간이 진짜 빠르다고 느끼는 반면, 좀 더 열심히해서 <br />
지식을 채워 넣어야 내 목적지까지 도달할 수 있을 것 같다는 생각이 든다.</p>

<hr />

<p>오늘은 Spring Rest Docs를 활용해보는 시간이다.</p>

<p>저번주에 간단하게 사용방법을 배웠고<br />
오늘은 Controller의 모든 API를 문서화 시켜보려한다.</p>

<h2 id="api-자동-문서화-연습">API 자동 문서화 연습</h2>

<p>저번주에는 POST와 PACTH에 대한<br />
자동 문서화를 진행했다.</p>

<p>지금 만들고 있는 애플리케이션에서는 GET, DELETE<br />
API만 자동화 시켜주면 마무리가 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">BDDMockito</span><span class="o">.</span><span class="na">given</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">Mockito</span><span class="o">.</span><span class="na">doNothing</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">.</span><span class="na">mockmvc</span><span class="o">.</span><span class="na">RestDocumentationRequestBuilders</span><span class="o">.*;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">.</span><span class="na">request</span><span class="o">.</span><span class="na">RequestDocumentation</span><span class="o">.</span><span class="na">parameterWithName</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">result</span><span class="o">.</span><span class="na">MockMvcResultMatchers</span><span class="o">.</span><span class="na">jsonPath</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">test</span><span class="o">.</span><span class="na">web</span><span class="o">.</span><span class="na">servlet</span><span class="o">.</span><span class="na">result</span><span class="o">.</span><span class="na">MockMvcResultMatchers</span><span class="o">.</span><span class="na">status</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">.</span><span class="na">payload</span><span class="o">.</span><span class="na">PayloadDocumentation</span><span class="o">.*;</span> <span class="c1">//responseFields(); , fieldWithPath() 사용</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">.</span><span class="na">mockmvc</span><span class="o">.</span><span class="na">MockMvcRestDocumentation</span><span class="o">.</span><span class="na">document</span><span class="o">;</span> <span class="c1">// document();</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">.</span><span class="na">request</span><span class="o">.</span><span class="na">RequestDocumentation</span><span class="o">.</span><span class="na">pathParameters</span><span class="o">;</span> <span class="c1">// pathParameters();</span>
</code></pre></div></div>
<p>시작 전 우리가 사용하기 위한 기술에 대한<br />
import를 진행해준다.</p>

<p>유의 깊게 볼 것은 RestDocs 구성을 위한 API들이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="nd">@AutoConfigureRestDocs</span>
<span class="nd">@WebMvcTest</span><span class="o">(</span><span class="nc">MemberController</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@MockBean</span><span class="o">(</span><span class="nc">JpaMetamodelMappingContext</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DocumentationTest</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@MockBean</span>
    <span class="kd">private</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@MockBean</span>
    <span class="kd">private</span> <span class="nc">MemberMapper</span> <span class="n">mapper</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">Gson</span> <span class="n">gson</span><span class="o">;</span>
    
    <span class="o">...</span>
    
<span class="o">}</span>
</code></pre></div></div>
<p>기본적인 위존성 주입과 Class 애노테이션을 셋팅 한 다음<br />
Test 코드를 작성해 API 자동화하여 만들어 줄 수 있다.</p>

<p>@Test 코드 작성 시 우리가 이전 부터 학습해왔던<br />
Mockito를 이용해 Slice 계층별 테스트를 만들어 줄 수가 있다.</p>

<p>Controller의 계층 별 테스트를 위해<br />
Service영역과의 연결된 부분을 Mock 객체를 반환시켜<br />
실제 데이터가 들어간 것 처럼 테스트하는 방법이다.</p>

<p>내가 총 만들어야할 API는 3개이고<br />
멤버 조회, 멤버 전체조회, 멤버 삭제 이렇게 된다.</p>

<p><strong>1). GET</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">getMemberTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">MemberDto</span><span class="o">.</span><span class="na">response</span> <span class="n">response</span> <span class="o">=</span> <span class="nc">StubData</span><span class="o">.</span><span class="na">MockMember</span><span class="o">.</span><span class="na">getSingleResponseBody</span><span class="o">();</span>
    <span class="kt">long</span> <span class="n">memberid</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getMemberId</span><span class="o">();</span>

    <span class="c1">// findMember(); Mock 처리하기 , 반환 필요x (새로운 객체)</span>
    <span class="n">given</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">findMember</span><span class="o">(</span><span class="nc">Mockito</span><span class="o">.</span><span class="na">anyLong</span><span class="o">())).</span><span class="na">willReturn</span><span class="o">(</span><span class="k">new</span> <span class="nc">Member</span><span class="o">());</span>

    <span class="c1">// memberToMemberResponse(); Mock 처리하기 , 반수필수 타입 = MemberDto.response</span>
    <span class="n">given</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">memberToMemberResponse</span><span class="o">(</span><span class="nc">Mockito</span><span class="o">.</span><span class="na">any</span><span class="o">())).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>

    <span class="nc">ResultActions</span> <span class="n">actions</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span>
            <span class="n">get</span><span class="o">(</span><span class="s">"/v11/members/{member-id}"</span><span class="o">,</span> <span class="n">memberid</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
    <span class="o">);</span>

    <span class="n">actions</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isOk</span><span class="o">())</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.memberId"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"1"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.email"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"dhfif718@gmail.com"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.name"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"이재혁"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.phone"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="s">"010-1234-5678"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">document</span><span class="o">(</span><span class="s">"get-findMember"</span><span class="o">,</span>
                    <span class="n">getRequestPreProcessor</span><span class="o">(),</span>
                    <span class="n">getResponsePreProcessor</span><span class="o">(),</span>
                    <span class="n">pathParameters</span><span class="o">(</span>
                            <span class="n">parameterWithName</span><span class="o">(</span><span class="s">"member-id"</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 식별자"</span><span class="o">)</span>
                    <span class="o">),</span>
                    <span class="n">responseFields</span><span class="o">(</span>
                            <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                                    <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">OBJECT</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"결과 데이터"</span><span class="o">),</span>
                                    <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.memberId"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 식별자"</span><span class="o">),</span>
                                    <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이메일"</span><span class="o">),</span>
                                    <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.name"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이름"</span><span class="o">),</span>
                                    <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.phone"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"전화 번호"</span><span class="o">),</span>
                                    <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.memberStatus"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 상태: 활동중/휴면상태/탈퇴상태"</span><span class="o">),</span>
                                    <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.stamp"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"스탬프 갯수"</span><span class="o">)</span>
                            <span class="o">)</span>
                    <span class="o">)</span>
            <span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>
<p>크게 달라진점은 없다.<br />
andDo를 통해 검증과 동시에 API 자동화를 위한<br />
여러가지 파라미터들을 넘겨주고 있다.</p>

<p>GET 요청이기때문에 requestFields();에 대한<br />
작성은 따로하지 않았다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"memberId"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="nl">"email"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"dhfif718@gmail.com"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"이재혁"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"phone"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"010-1234-5678"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"memberStatus"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"활동중"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"stamp"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>최종 적으로 responseFields의 Json 형태는 위와 같이 이루어진다.<br />
현재는 data라는 Object안에 한종류의 데이터가 들어가 있다.</p>

<p><br /></p>

<p>만약 전체조회를 위해<br />
data안에 배열로 데이터가 존재한다면 어떻게<br />
표시를 해주어야할까?</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">responseFields</span><span class="o">(</span>
        <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.[].memberId"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 식별자"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.[].email"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이메일"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.[].name"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이름"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.[].phone"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"전화 번호"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.[].memberStatus"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 상태: 활동중/휴면상태/탈퇴상태"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.[].stamp"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"스탬프 갯수"</span><span class="o">),</span>
        <span class="o">)</span>
<span class="o">)</span>
</code></pre></div></div>
<p>responseFields의 위와 같이 data.[].을 이용해  <br />
배열에 해당하는 내용을 표시해줄 수 있다.</p>

<p>또한</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">responseFields</span><span class="o">(</span>
        <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">ARRAY</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"결과 데이터"</span><span class="o">).</span><span class="na">optional</span><span class="o">(),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data[].memberId"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 식별자"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data[].email"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이메일"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data[].name"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이름"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data[].phone"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"전화 번호"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data[].memberStatus"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 상태: 활동중/휴면상태/탈퇴상태"</span><span class="o">),</span>
                <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data[].stamp"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"스탬프 갯수"</span><span class="o">),</span>
        <span class="o">)</span>
<span class="o">)</span>
</code></pre></div></div>
<p>위와 같이도 표기할 수 있다.</p>

<p>여기서 한가지 참고해야할 점은
JsonFieldType.OBJECT = data : {}<br />
JsonFieldType.ARRAY = data : []  <br />
과 같이 표기할 때 사용한다는 점이다.</p>

<p>하나의 멤버만 조회했을때 OBJECT를 사용한 이유와<br />
여러 멤버를 조회했을때 ARRAY를 사용한 이유이다.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"data"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"memberId"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">1</span><span class="p">,</span><span class="w">
    </span><span class="nl">"email"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"dhfif718@gmail.com"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"이재혁"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"phone"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"010-1234-5678"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"memberStatus"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"활동중"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"stamp"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
  </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"memberId"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">2</span><span class="p">,</span><span class="w">
    </span><span class="nl">"email"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"tmdghwlq@naver.com"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"염승호"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"phone"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"010-2000-4000"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"memberStatus"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"활동중"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"stamp"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
  </span><span class="p">},</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"memberId"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">3</span><span class="p">,</span><span class="w">
    </span><span class="nl">"email"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"dragonwon@nate.com"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"name"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"정용원"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"phone"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"010-7777-4587"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"memberStatus"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"활동중"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"stamp"</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="mi">0</span><span class="w">
  </span><span class="p">}</span><span class="w"> </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>실제로 build하여 생성된 response-body를 확인해보면<br />
우리가 최종적으로 반환한 데이터에 따른 배열이<br />
위와 같이 잘표시되는 모습을 확인해 볼 수 있다.</p>

<p>이렇게 복잡한 구조의 Json형태일지라도<br />
배열에 대한 위치만 잘 지정해주면 @Test 컴파일시 정상적으로<br />
실행되어 스니핏이 잘 만들어 지는 것을 확인할 수 있다.</p>

<p><br /></p>

<p><strong>2). DELETE</strong></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">deleteMemberTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="kt">long</span> <span class="n">memberId</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>

    <span class="c1">// deleteMember(); Mock 처리하기, 반환타입 = void</span>
    <span class="n">doNothing</span><span class="o">().</span><span class="na">when</span><span class="o">(</span><span class="n">memberService</span><span class="o">).</span><span class="na">deleteMember</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>

    <span class="nc">ResultActions</span> <span class="n">actions</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span>
            <span class="n">delete</span><span class="o">(</span><span class="s">"/v11/members/{member-id}"</span><span class="o">,</span> <span class="n">memberId</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
    <span class="o">);</span>

    <span class="n">actions</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isNoContent</span><span class="o">())</span>
            <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">document</span><span class="o">(</span>
                    <span class="s">"delete-member"</span><span class="o">,</span>
                    <span class="n">getRequestPreProcessor</span><span class="o">(),</span>
                    <span class="n">getResponsePreProcessor</span><span class="o">(),</span>
                    <span class="n">pathParameters</span><span class="o">(</span>
                            <span class="n">parameterWithName</span><span class="o">(</span><span class="s">"member-id"</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 식별자"</span><span class="o">)</span>
                    <span class="o">)</span>
            <span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Delete는 사실 더욱더 간단하다.<br />
requestFields와 responseFields의 따로 만들어줄<br />
필요가 없기 때문에 parameter에 대한 API 내용만 적어주면된다..</p>

<p>이렇게 오늘은 GET,DELETE에 대한<br />
API 문서 자동화를 진행했다.</p>

<p><br /></p>

<h2 id="오늘-마주한-error">오늘 마주한 ERROR</h2>

<p>1). 문제 확인<br />
GET, DELETE에 대한 테스트케이스는 통과한 상태로<br />
gradle build하는 과정 중 문제가 발생했다.</p>

<p>첫번째는 아래와 같은 오류 코드가 발생</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">There</span> <span class="n">were</span> <span class="n">failing</span> <span class="n">tests</span><span class="o">.</span> <span class="nc">See</span> <span class="n">the</span> <span class="n">report</span> <span class="nl">at:</span> <span class="nl">file:</span><span class="c1">///Users/ljh/Desktop/myprogram/CodeStates/be-homework-api-documentation/build/reports/tests/test/index.html</span>
</code></pre></div></div>

<p>두번째는 resources의 index.html 파일이 생기지 않았다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMjr35Sq1Q_a5w8FeW6-h0MrJhp27At6mtmeNDPdy7Vt_Ypfia_OLvp8OjFswdwaRI3nxa-Cvww99s3zBMEEy_jQBxi=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>첫번째 문제로 인해 파일 생성이 되지 않은 듯 했다.</p>

<p><br /></p>

<p>2). 문제 해결<br />
첫번째 오류 코드를 천천히 보니  테스트를 실패했으니<br />
해당경로에 들어가서 보라는 것 같았다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gNEdF_s4q2MG1_Td-VloiVybdGvYGUqHewVUU_L9Rbbqq45xouzGpvldtATTmL0KjTJ9V_ds1JEsC8_UclbIK5tZVMOgg=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>해당 경로에 들어가서 index.html 파일을 열어보았다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMAh6qcJXhFrBUv5fVdmlay6LC7TIDSpP9naAOl97GCFV9bR5kjFhWtyExFHdc_m0yiA8zkbZYSHda_SyeuxH_TbW84=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>열어보았더니 Test Summary라는<br />
테스트 결과에 대한 요약을 나타내주는 화면이 있었고</p>

<p>MemberControllerTest4의 getMembersTest() 메서드가<br />
테스트를 통과하지 못했구나라고 알아차렸다.</p>

<p>해당 문제는 내가 GET, DELETE를 추가하면서<br />
기존에 둔 테스트코드에 영향이 갔었고<br />
오류를 수정하고 다시 gradle build를 하니</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gMIqLDdClsJaEodvMjJXyFMOE1Ats6JM6us5Nwq8nB--Jr620vXRnfWD_RaqptDSvECTD2WLT4H7bNj9_9dGzzC7tDn=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>index.hmtl 파일이 생성된 모습을 확인할 수 있다 !!</p>

<hr />

<p>오늘은 API 자동화를 위한<br />
Spring Rest Docs를 연습해보는 시간을 가졌다.<br />
이런식으로 테스트코드와 연결해<br />
API 문서를 만들 수 있다는게 너무 좋은 기술인 것 같다는 생각이든다.</p>

<p>사실 이전까지만해도 수동으로 사람이 다적어서 관리하는 줄 알았는데<br />
이렇게 좋은 방법으로 관리를 할 수 있다는 점에서<br />
좋은 기술을 배운 것 같아 뿌듯한 느낌이 들었다.</p>

<p>오늘 공부도 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 삼겹살, 라면, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[한 주가 끝나고 새로운 주가 시작되었다.]]></summary></entry><entry><title type="html">TIL) API Documentation 1</title><link href="http://localhost:4000/til/2022/11/11/til.html" rel="alternate" type="text/html" title="TIL) API Documentation 1" /><published>2022-11-11T00:00:00+09:00</published><updated>2022-11-11T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/11/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/11/til.html"><![CDATA[<p>요번주도 한주가 지나간다.<br />
얼마 공부한 것 같은느낌이 아닌데 벌써<br />
월요일이지나 금요일이 되었다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmQk4K8CSftTVVdvYx3CCxrYZD4T2BrAhtXL4imWit5EO503BT7GHs58m2U-u9Ff8-jqsP6WkToRyaKKm_g388y_S6IT=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>저번주에 본 리그오브레전드 월즈 결승전을 감명깊게 보아서 그런지  <br />
내 마음 한켠에 불안하고 안정적이지 못한 지금의 삶에<br />
많이 지쳐하고 있었는데, 많은 위로가 되었다.</p>

<p>‘중요한건 꺽이지 않는 마음’ 참 잘 만든 문구인 것 같다.<br />
나도 꺽이지 않고 나아가는 모습을 발견할 수있도록<br />
더욱더 노력해보아야겠다.</p>

<hr />
<p>3일간 JUnit에 대한 공부를 했다. <br />
여러 API를 사용해보면서 계층별로 단독으로<br />
테스트할 수 있는 Mockito라는 좋은 API를 배웠다.</p>

<p>오늘은 이것에 연장선상인 API 문서화에 대해 공부해보는 날이다.</p>

<p><br /></p>

<h2 id="spring-rest-docs">Spring Rest Docs</h2>

<p>API 문서화라고하면<br />
클라이언트에서 REST API 백엔드 애플리케이에<br />
요청을 전송하기 위해서 알아 되는 요청 정를 문서로 정리한 것이다.<br />
(URI, request body, query parameter 등..)</p>

<p>Spring Rest Docs는 이 문서를 자동으로 만들어주는 API이다.<br />
기존에는 Swagger 오픈 API를 많이 이용하였다고 한다.</p>

<p>Spring Rest Docs 문서 생성 흐름<br />
테스트 코드 작성</p>
<ol>
  <li>test 테스크 실행</li>
  <li>테스트 결과 Passed / Failed 1번으로 복귀</li>
  <li>API 문서 스니펫 생성(.adoc)</li>
  <li>API 문서 생성(.adoc)</li>
  <li>API 문서 -&gt; HTML로 변환</li>
</ol>

<p>위와 같은 흐름으로 API 문서가 생성되며<br />
테스트 케이스에 통과한 테스트의 API 문서 <strong>스니핏</strong>이 생성된다.<br />
*스니핏: 문서의 일부 조각이라 생각하면 된다.</p>

<p>Spring Rest Docs를 사용하기 위해 사전 작업을 하여야한다.<br />
build.gradle의 설정해주자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plugins</span> <span class="o">{</span>
	<span class="n">id</span> <span class="s">"org.asciidoctor.jvm.convert"</span> <span class="n">version</span> <span class="s">"3.3.2"</span>
        <span class="o">...</span>
<span class="o">}</span>

<span class="o">...</span>

<span class="n">ext</span> <span class="o">{</span>
	<span class="n">set</span><span class="o">(</span><span class="err">'</span><span class="n">snippetsDir</span><span class="err">'</span><span class="o">,</span> <span class="n">file</span><span class="o">(</span><span class="s">"build/generated-snippets"</span><span class="o">))</span>    <span class="c1">// 스니펫 생성 경로 설정</span>
<span class="o">}</span>

<span class="n">configurations</span> <span class="o">{</span>
	<span class="n">asciidoctorExtensions</span> <span class="c1">// AsciiDoctor 의존그룹 지정            </span>
<span class="o">}</span>

<span class="n">dependencies</span> <span class="o">{</span>
    <span class="c1">// 의존라이브러리 추가 </span>
	<span class="n">testImplementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">restdocs</span><span class="o">-</span><span class="n">mockmvc</span><span class="err">'</span>                         
	<span class="n">asciidoctorExtensions</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">restdocs</span><span class="o">-</span><span class="n">asciidoctor</span><span class="err">'</span>
        <span class="o">...</span>
<span class="o">}</span>

<span class="c1">// test task실행 시, API 문서 생성 스니핏 경로를 설정</span>
<span class="n">tasks</span><span class="o">.</span><span class="na">named</span><span class="o">(</span><span class="err">'</span><span class="n">test</span><span class="err">'</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">outputs</span><span class="o">.</span><span class="na">dir</span> <span class="n">snippetsDir</span>
	<span class="nf">useJUnitPlatform</span><span class="o">()</span>
<span class="o">}</span>

<span class="c1">// Asciidoctor 기능을 사용하기 위한 설정</span>
<span class="n">tasks</span><span class="o">.</span><span class="na">named</span><span class="o">(</span><span class="err">'</span><span class="n">asciidoctor</span><span class="err">'</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">configurations</span> <span class="s">"asciidoctorExtensions"</span>
	<span class="n">inputs</span><span class="o">.</span><span class="na">dir</span> <span class="n">snippetsDir</span>
	<span class="n">dependsOn</span> <span class="n">test</span>
<span class="o">}</span>

<span class="c1">// index.html copy</span>
<span class="n">task</span> <span class="nf">copyDocument</span><span class="o">(</span><span class="nl">type:</span> <span class="nc">Copy</span><span class="o">)</span> <span class="o">{</span>
	<span class="n">dependsOn</span> <span class="n">asciidoctor</span>         
	<span class="n">from</span> <span class="nf">file</span><span class="o">(</span><span class="s">"${asciidoctor.outputDir}"</span><span class="o">)</span>  
	<span class="n">into</span> <span class="nf">file</span><span class="o">(</span><span class="s">"src/main/resources/static/docs"</span><span class="o">)</span>  
<span class="o">}</span>

<span class="c1">// copyDocument가 먼저 실행되도록 설정</span>
<span class="n">build</span> <span class="o">{</span>
	<span class="n">dependsOn</span> <span class="n">copyDocument</span> 
<span class="o">}</span>

<span class="c1">// bootJar task 설정</span>
<span class="n">bootJar</span> <span class="o">{</span>
	<span class="n">dependsOn</span> <span class="n">copyDocument</span>   
	<span class="nf">from</span> <span class="o">(</span><span class="s">"${asciidoctor.outputDir}"</span><span class="o">)</span> <span class="o">{</span> 
		<span class="n">into</span> <span class="err">'</span><span class="kd">static</span><span class="o">/</span><span class="n">docs</span><span class="err">'</span>    
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>build.gradle 설정이 끝났다면 이제 코드를 작성해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@WebMvcTest</span><span class="o">(</span><span class="nc">MemberController</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="nd">@MockBean</span><span class="o">(</span><span class="nc">JpaMetamodelMappingContext</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="c1">//@Transactional</span>
<span class="c1">//@SpringBootTest</span>
<span class="c1">//@AutoConfigureMockMvc</span>
<span class="nd">@AutoConfigureRestDocs</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberControllerRestDocsTest</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@MockBean</span>
    <span class="kd">private</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@MockBean</span>
    <span class="kd">private</span> <span class="nc">MemberMapper</span> <span class="n">mapper</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">Gson</span> <span class="n">gson</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">postMemberTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="nc">MemberDto</span><span class="o">.</span><span class="na">Post</span> <span class="n">post</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemberDto</span><span class="o">.</span><span class="na">Post</span><span class="o">(</span><span class="s">"dhfif718@naver.com"</span><span class="o">,</span> <span class="s">"이재혁"</span><span class="o">,</span> <span class="s">"010-1234-5678"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>

        <span class="nc">MemberDto</span><span class="o">.</span><span class="na">response</span> <span class="n">responseDto</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemberDto</span><span class="o">.</span><span class="na">response</span><span class="o">(</span>
                <span class="mi">1L</span><span class="o">,</span>
                <span class="s">"dhfif718@naver.com"</span><span class="o">,</span>
                <span class="s">"이재혁"</span><span class="o">,</span>
                <span class="s">"010-1234-5678"</span><span class="o">,</span>
                <span class="nc">Member</span><span class="o">.</span><span class="na">MemberStatus</span><span class="o">.</span><span class="na">MEMBER_ACTIVE</span><span class="o">,</span>
                <span class="k">new</span> <span class="nf">Stamp</span><span class="o">()</span>
        <span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">memberPostToMember</span><span class="o">(</span><span class="nc">Mockito</span><span class="o">.</span><span class="na">any</span><span class="o">(</span><span class="nc">MemberDto</span><span class="o">.</span><span class="na">Post</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span><span class="na">willReturn</span><span class="o">(</span><span class="k">new</span> <span class="nc">Member</span><span class="o">());</span>
        <span class="n">given</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">createMember</span><span class="o">(</span><span class="nc">Mockito</span><span class="o">.</span><span class="na">any</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span><span class="na">willReturn</span><span class="o">(</span><span class="k">new</span> <span class="nc">Member</span><span class="o">());</span>
        <span class="n">given</span><span class="o">(</span><span class="n">mapper</span><span class="o">.</span><span class="na">memberToMemberResponse</span><span class="o">(</span><span class="nc">Mockito</span><span class="o">.</span><span class="na">any</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">responseDto</span><span class="o">);</span>

        <span class="nc">ResultActions</span> <span class="n">actions</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span>
                <span class="n">post</span><span class="o">(</span><span class="s">"/api/members"</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
                        <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">content</span><span class="o">)</span>
        <span class="o">);</span>


        <span class="n">actions</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isCreated</span><span class="o">())</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.email"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getEmail</span><span class="o">()))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.name"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span>
                <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.phone"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getPhone</span><span class="o">()))</span>

                <span class="o">.</span><span class="na">andDo</span><span class="o">(</span><span class="n">document</span><span class="o">(</span>
                        <span class="s">"post-member"</span><span class="o">,</span>
                        <span class="n">getRequestPreProcessor</span><span class="o">(),</span>
                        <span class="n">getResponsePreProcessor</span><span class="o">(),</span>
                        <span class="n">requestFields</span><span class="o">(</span>
                                <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"email"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이메일"</span><span class="o">),</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"name"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이름"</span><span class="o">),</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"phone"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"휴대폰 번호"</span><span class="o">)</span>
                                <span class="o">)</span>
                        <span class="o">),</span>
                        <span class="n">responseFields</span><span class="o">(</span>
                                <span class="nc">List</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">OBJECT</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"결과 데이터"</span><span class="o">),</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.memberId"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 식별자"</span><span class="o">),</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.email"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이메일"</span><span class="o">),</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.name"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"이름"</span><span class="o">),</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.phone"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"휴대폰 번호"</span><span class="o">),</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.memberStatus"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">STRING</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"회원 상태"</span><span class="o">),</span>
                                        <span class="n">fieldWithPath</span><span class="o">(</span><span class="s">"data.stamp"</span><span class="o">).</span><span class="na">type</span><span class="o">(</span><span class="nc">JsonFieldType</span><span class="o">.</span><span class="na">NUMBER</span><span class="o">).</span><span class="na">description</span><span class="o">(</span><span class="s">"스탬프 갯수"</span><span class="o">)</span>
                                <span class="o">)</span>
                        <span class="o">)</span>
                <span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>기존 코드와 달라진점은 
@WebMvcTest(MemberController.class)          <br />
@MockBean(JpaMetamodelMappingContext.class)  <br />
어노테이션으로 변경하였다는 점이다.<br />
이전에 SpringBootTest와 AutoConfigureMockMvc를 사용했던 부분을<br />
변경하였다. WebMveTest로 변경 함으로써 Controller 계층에 사용하는<br />
Bean만 등록하기때문에 상대적으로 속도가 빠르다고 한다.</p>

<p>또한, @AutoConfigureRestDocs 어노테이션을 붙여주었고<br />
.andDo(docment())를 이용해 Rest Docs에 필요한 정보를 보내주었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">.</span><span class="na">payload</span><span class="o">.</span><span class="na">PayloadDocumentation</span><span class="o">.*;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">.</span><span class="na">mockmvc</span><span class="o">.</span><span class="na">MockMvcRestDocumentation</span><span class="o">.</span><span class="na">document</span><span class="o">;</span>
</code></pre></div></div>
<p>document(), fieldWithPath(), requestFields() <br />
필요한 정보를 만드는 과정에서 위 api를 사용하기위해선<br />
PayloadDocumentation, MockMvcRestDocumentation을 import 해주어야한다.</p>

<p>그리고 patch 핸들러 메서드에 대해 path parameter를 이용할 경우</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">restdocs</span><span class="o">.</span><span class="na">request</span><span class="o">.</span><span class="na">RequestDocumentation</span><span class="o">.</span><span class="na">pathParameters</span><span class="o">;</span>
</code></pre></div></div>
<p>를 스태틱으로 import 해주면 사용이 가능하다.</p>

<p><br /></p>

<p>Document()의 매개변수로 전달하기위해 <br />
OperationRequestPreprocessor<br />
OperationResponsePreprocessor<br />
클래스를 이용해 인터페이스안에 정적 메서드를 만들어 구현하였다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ApiDocumentUtils</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="nc">OperationRequestPreprocessor</span> <span class="nf">getRequestPreProcessor</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">preprocessRequest</span><span class="o">(</span><span class="n">prettyPrint</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">static</span> <span class="nc">OperationResponsePreprocessor</span> <span class="nf">getResponsePreProcessor</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nf">preprocessResponse</span><span class="o">(</span><span class="n">prettyPrint</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>getRequestPreProcessor() <br />
getResponsePreProcessor()<br />
아리는 메서드를 만들었고 해당 내용엔 OperationPreprocessor 클래스의<br />
메서드인 prettyPrint()로 객체를 주입해주었다.</p>

<p>API 문서를 생성 전 전처리를 수행하는 기능이라는데<br />
해당 내용에 대해서는 조금더 깊은 학습이 필요해 보인다.</p>

<p>또한 Document() 매개변수인<br />
requestFields와 responseFields를 List.of로 <br />
문서화 시킬 내용을 설명과 함께 담아 전달하도록<br />
내용을 작성하였다.</p>

<p><br /></p>

<p>여기까지 작성후 테스트 케이스를 실행하면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmQkvJ4wiPE1h_7rk6WxVw-45PCgHTiM7tPBoXPQp9BI9-0QNhkyLJ9dvyFDgh1FIcoc9NAzwN1MqviHV234SBgKq-Fudw=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>우리가 build.gralde에서 ext로 설정해놓은 경로<br />
build/generated-snippets 안에 스니핏 식별자로<br />
post-member로 지정해여 해당 폴더안에 .adoc 파일이 생긴 모습을 볼 수 있다.</p>

<p>실제 내용을 확인해보면 우리가 원하는<br />
API 내용들이 담겨져있다.</p>

<p>그리고 Gradle 프로젝트의 경우<br />
src/docs/asciidoc 폴더 경로에서 index.adoc 파일을 생성한다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmSP6yS5JEcQYvdmCiJBkQnCg6AjwPkGkEPL4LLA99PvGdapaJxSgq3S0yUGWaItGJc-VGK1hETfSnrBJQuxYueo82_6=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>index.adoc파일에 Asciidoc 문법으로<br />
템플릿 코드를 넣어 Gradle의 :build, :bootJar을  <br />
실행시켜주면 index.html</p>

<p>gradle의 설정했던 task copyDocument의 경로인<br />
src/main/resources/static/docs 안에 index.html 파일로  <br />
우리의 API문서가 변환된 모습을 볼 수 있다.</p>

<p>그리고 최종적으로 Spring Boot를 실행시켜<br />
index.html에 접근해보면</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmRVSbop-au0zBS7T5VYwEbIIprDpuG7rQJQI3FpLPJncTS0N-xC6MLCi11JQdcFK3cWv2I50pjxUYkTgLFp5FArYVMaog=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>우리가 원하는 모습대로 API 문서가 작성된 모습을 확인해 볼 수 있다.<br />
(해당 템플릿 코드는 코드스테이츠 교육자료로 제공된 템플릿이므로<br />
템플릿 코드는 따로 올리지 않겠습니다!)</p>

<hr />

<p>이렇게 오늘은 간단한 것 같으면서도 어려운…<br />
SpringRestDocs를 사용하는 법을 알아보았고</p>

<p>초기 셋팅만 gradle에 잘 해놓고 템플릿 코드만 준비되어있다면<br />
크게 어려운점은 없었던 것 같다.</p>

<p>매우 유익했던 Test케이스를 이용한 API 자동화 작업.<br />
엄청 신기하고 재밌었다.</p>

<p>오늘 공부는 여기서 끝 !!</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 핫도그, 빵</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[요번주도 한주가 지나간다. 얼마 공부한 것 같은느낌이 아닌데 벌써 월요일이지나 금요일이 되었다.]]></summary></entry><entry><title type="html">TIL) JUnit 3</title><link href="http://localhost:4000/til/2022/11/10/til.html" rel="alternate" type="text/html" title="TIL) JUnit 3" /><published>2022-11-10T00:00:00+09:00</published><updated>2022-11-10T00:00:00+09:00</updated><id>http://localhost:4000/til/2022/11/10/til</id><content type="html" xml:base="http://localhost:4000/til/2022/11/10/til.html"><![CDATA[<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AFDK6gPEtAIsYVHYZngjJKd7DhE7QvwO4nT5RQrbx3n7Hgtx83b5wSHcAK9fgNs42_a12-wjBXSB7EmmaORw8NUf4CEwXDJY2g=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>드이어 JUnit 관련해서 마지막 시간이다.<br />
테스트 프로그램을 작성하는 연습도 틈틈히 해둬야<br />
까먹지 않고 계층별 테스트가 원활하게 잘 될 것 같다.</p>

<p>새로운걸 알면알수록 재미있지만<br />
내 뇌용량의 초과로,,, 전에 배웠던 내용들이 슬슬<br />
휘발되기 시작한다 ㅋㅋ…</p>

<p>복습 하는시간도 마련해야 할 것 같은 느낌이다</p>

<hr />

<p>어제는 <a href="https://mycatlikeschuru.github.io/til/2022/11/09/til.html">계층별 테스트</a>에 대해서 간단하게 포스팅 해보았다.<br />
사실 계층별 테스트라고 작성을 했지만<br />
진정한 Slice 테스트가 되는 프로그램이 아니였고<br />
계층별 테스트를 위한 문법을 사전에 공부한느 시간이었다.</p>

<p>오늘은 정말 애플리케이션 계층별로 테스트를<br />
진행하려면 어떻게해야하는지?</p>

<p>테스팅 기술에 대해 배워보는 시간이다.</p>

<h2 id="mockito">Mockito</h2>

<p>오늘 공부할 api는 Mockito라는 테스트를 위한 api이다.</p>

<p>우리가 평상시에 Mock이라고하면 가짜를 얘기한다.<br />
목업폰과 같이 실제 기능은 없지는 모양만있는 가짜이다.</p>

<p>이와 같은 기술로 객체를 가짜로 만들어 계층별 테스트하는 방법이다.</p>

<p>너무나게 당연하게도 다른 계층을 접근하지 않으니<br />
테스트시간이 확실히 빨라지게되며<br />
계층별로 테스트를 해볼 수 있다는 장점이 있다.</p>

<h3 id="controller-계층-slice-test">Controller 계층 Slice Test</h3>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmTnXpBWUcCganXkdulhuUs7yIiBV4jduubimbBhkIH1II-o-KZ6mUljknzsuWm-0Hf-czO1b7FkvAxK-aJEpMiHDGar9Q=w1920-h921" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>간단하게 Controller 계층만 두고 얘기해보자<br />
어제 <a href="https://mycatlikeschuru.github.io/til/2022/11/09/til.html">JUnit 2</a> 챕터에서 테스트해보았던건<br />
왼쪽에서 보는 것과 같은 형태의 ‘통합 테스트’라고 볼 수 있다.</p>

<p>이유는 핸들러메서드를 호출해 Service -&gt; Repository 까지<br />
접근해 Controller 계층이 잘 실행되는지를 알아보았기 때문이다.</p>

<p>이제 우리가 해볼거는 Mock 객체를 만들어<br />
Test를 호출하면 Controller 계층만 독단적으로<br />
테스트할 수 있는 방법이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="nd">@SpringBootTest</span>
<span class="nd">@AutoConfigureMockMvc</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberControllerHomeworkTest</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">MockMvc</span> <span class="n">mockMvc</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="nc">Gson</span> <span class="n">gson</span><span class="o">;</span>

    <span class="nd">@MockBean</span> <span class="c1">// 추가부분</span>
    <span class="kd">private</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@Autowired</span> <span class="c1">// mppaer 사용을 위한 추가</span>
    <span class="kd">private</span> <span class="nc">MemberMapper</span> <span class="n">mapper</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">postMemberTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>코드를 예제로 살펴보자</p>

<p>이전과 달라진점은 @MockBean이 추가되었다는 점이다.<br />
SpringBoot를 사용하는 어노테이션을 달아주었기때문에</p>

<p>@MockBean을 필드변수에 붙여주면<br />
해당 객체에 Bean과 같은 타입의 객체가 DI된다.</p>

<p>즉 MemberService 클래스 객체가 주입되므로<br />
우리는 가짜로 만들어진 memberService 객체로 메서드들을 호출할 수 있다.</p>

<p>@Test 프로그램을 작성해보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">postMemberTest</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="nc">MemberDto</span><span class="o">.</span><span class="na">Post</span> <span class="n">post</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemberDto</span><span class="o">.</span><span class="na">Post</span><span class="o">(</span>
            <span class="s">"dhfif718@naver.com"</span><span class="o">,</span>
            <span class="s">"이재혁"</span><span class="o">,</span>
            <span class="s">"010-1234-5678"</span>
    <span class="o">);</span>

    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">memberPostToMember</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setStamp</span><span class="o">(</span><span class="k">new</span> <span class="nc">Stamp</span><span class="o">());</span>

    <span class="n">given</span><span class="o">(</span><span class="n">memberService</span><span class="o">.</span><span class="na">createMember</span><span class="o">(</span><span class="nc">Mockito</span><span class="o">.</span><span class="na">any</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">))).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

    <span class="nc">String</span> <span class="n">content</span> <span class="o">=</span> <span class="n">gson</span><span class="o">.</span><span class="na">toJson</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>

    <span class="nc">ResultActions</span> <span class="n">actions</span> <span class="o">=</span> <span class="n">mockMvc</span><span class="o">.</span><span class="na">perform</span><span class="o">(</span>
            <span class="n">post</span><span class="o">(</span><span class="s">"/api/members"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">contentType</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">content</span><span class="o">(</span><span class="n">content</span><span class="o">)</span>
    <span class="o">);</span>

    <span class="nc">MvcResult</span> <span class="n">result</span> <span class="o">=</span> <span class="n">actions</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">status</span><span class="o">().</span><span class="na">isCreated</span><span class="o">())</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.email"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getEmail</span><span class="o">()))</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.name"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span>
            <span class="o">.</span><span class="na">andExpect</span><span class="o">(</span><span class="n">jsonPath</span><span class="o">(</span><span class="s">"$.data.phone"</span><span class="o">).</span><span class="na">value</span><span class="o">(</span><span class="n">post</span><span class="o">.</span><span class="na">getPhone</span><span class="o">()))</span>
            <span class="o">.</span><span class="na">andReturn</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>
<p>대부분은 자바 문법적인 요소이고<br />
중요한 부분은 given(); api 쪽이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">mockito</span><span class="o">.</span><span class="na">BDDMockito</span><span class="o">.</span><span class="na">given</span><span class="o">;</span>
</code></pre></div></div>
<p>해당 라이브러리를 import 해야 사용이 가능하고</p>

<p>given(); 메서드를 통해서 우리는 가짜 객체를 만들 수 있다.</p>

<p>given() : 가짜로 만들 메서드 지정<br />
willRetrun() : 가짜로 만든 반환 값 지정<br />
이렇게 생각하면 간단 할 것 같다.</p>

<p>여기서 @MockBean을 통해 의존성 주입받은 객체의<br />
memberSerive.createMember()를 given()안에 넣어주었고<br />
해당 .createMember()의 매개변수가 Member.class 타입이므로<br />
Mockito.any(Member.class) 라고 설정을 해두었다.</p>

<p>여기서 만약 다른 타입일 경우에<br />
Mockito.anyInt()<br />
Mockito.anyLong()<br />
Mockito.anyString()<br />
등 여러가지 메서드들도 제공하고 있다.</p>

<p><br /></p>

<p>테스트 코드를 이렇게 작성하면<br />
가짜객체로 리턴값을 우리가 정해서 넘겨줄 수 있다.<br />
Controller 계층 프로그램을 봐보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@PostMapping</span>
<span class="kd">public</span> <span class="nc">ResponseEntity</span> <span class="nf">postMember</span><span class="o">(</span><span class="nd">@Valid</span> <span class="nd">@RequestBody</span> <span class="nc">MemberDto</span><span class="o">.</span><span class="na">Post</span> <span class="n">requestBody</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="n">mapper</span><span class="o">.</span><span class="na">memberPostToMember</span><span class="o">(</span><span class="n">requestBody</span><span class="o">);</span>
    <span class="n">member</span><span class="o">.</span><span class="na">setStamp</span><span class="o">(</span><span class="k">new</span> <span class="nc">Stamp</span><span class="o">());</span> <span class="c1">// homework solution 추가</span>

    <span class="nc">Member</span> <span class="n">createdMember</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">createMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

    <span class="k">return</span> <span class="k">new</span> <span class="nc">ResponseEntity</span><span class="o">&lt;&gt;(</span>
            <span class="k">new</span> <span class="nc">SingleResponseDto</span><span class="o">&lt;&gt;(</span><span class="n">mapper</span><span class="o">.</span><span class="na">memberToMemberResponse</span><span class="o">(</span><span class="n">createdMember</span><span class="o">)),</span>
            <span class="nc">HttpStatus</span><span class="o">.</span><span class="na">CREATED</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>위에서 보듯이 memberService.createMember(member);<br />
메서드를 호출하는 시점에서 우리의 가짜 객체의 반환값이<br />
대신 createdMember 객체로 할당되게 되어진다.</p>

<p>그렇게 되면 Service 계층을 접근하지않고<br />
우리가 만든 Mock으로만으로 Controller를 테스트 해 볼 수 있는 것이다.</p>

<p><br /></p>

<h3 id="service-계층-slice-test">Service 계층 Slice Test</h3>

<p>Controller 계층을 테스트할 때에는 SpringBootTest를 이용했다.<br />
스프링 부트를 실행시키는 시간도 포함하면<br />
시간이 느려질 수 있는 단점이 있지만 Controller 계층은<br />
spring web servlet 기술을 사용하기에 포함시켰었다.</p>

<p>하지만 Service 계층은 SpringBoot 없이도<br />
Mockito API를 이용해 Serivce 계층만 테스트가 가능하다.</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmT11Owrzo9GJ8WW4G2Oo2z7sh78eNqCI7yo5XbMPJ_0mlZQKHtsqqku8nDD_99cQhCgmaZ-OBsms1m9QJdQuPEvf_ijUw=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>위와 같이 테스트가 이루어지고<br />
Repository 계층과의 연결도 끊고 Mock 객체로만<br />
테스트를 할 수 있다는 점이 중요하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExtendWith</span><span class="o">(</span><span class="nc">MockitoExtension</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberServiceMockTest</span> <span class="o">{</span>

    <span class="nd">@Mock</span>
    <span class="kd">private</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>


    <span class="nd">@InjectMocks</span>
    <span class="kd">private</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="nf">createMemberTest</span><span class="o">()</span>  <span class="o">{</span>
        <span class="o">...</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>Controller과는 다르게 @ExtendWith 어노테이션을 이용해<br />
Mockito API를 사용할 수 있다.</p>

<p>여기서 우리가 테스트할 계층은 memberService 계층이고<br />
가짜로 만들어야할 객체는 memberRepository이다</p>

<p>그런 개념에서 @Mock을 memberRepository에 붙이고 <br />
@InjectMocks를 memberService에 붙여주면</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Transactional</span>
<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">MemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="o">...</span>
</code></pre></div></div>
<p>Service 계층의 Repository에 Mock객체가<br />
자동으로 의존성 주입이된다.</p>

<p>그리하여 우리가 Repository를 Mock 객체를 사용할 수 있는 것이다.</p>

<p><br /></p>

<p>이제 테스트 예제코드를 봐보자</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">createMemberTest</span><span class="o">()</span>  <span class="o">{</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">(</span><span class="s">"dhfif718@naver.com"</span><span class="o">,</span><span class="s">"이재혁"</span><span class="o">,</span><span class="s">"010-1234-5678"</span><span class="o">);</span>

        <span class="n">given</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">())).</span><span class="na">willReturn</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">));</span>
        <span class="c1">//given(memberRepository.findByEmail(Mockito.anyString())).willReturn(Optional.of(member));</span>

        <span class="n">assertThrows</span><span class="o">(</span><span class="nc">BusinessLogicException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">memberService</span><span class="o">.</span><span class="na">createMember</span><span class="o">(</span><span class="n">member</span><span class="o">));</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>검증을 어떻게하는지에 따라 달리지겠지만<br />
Member 객체를 생성하는 serive 클래스 메서드를 테스트하기위해<br />
새로운 Member 객체를 만들어 검증할 것이다.</p>

<p>given()으로 Controller 계층에서 했던것과 동일하게<br />
가짜로만들 메서드의 형식과 매개타입을 입력해준다음<br />
리턴값으로 어떤 객체를 받을지 정해주면된다.</p>

<p>최종적으로 동일한 Member가 발견되어<br />
Exception을 잡아 검증하는 프로그램으로 작성하였다.</p>

<p>우리가 잘라줘야하는부분은 Repositroy의 findByEmail();로 정의한 부분이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">Member</span> <span class="nf">createMember</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">verifyExistsEmail</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>
    <span class="nc">Member</span> <span class="n">savedMember</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">savedMember</span><span class="o">;</span>
<span class="o">}</span>
<span class="kd">private</span> <span class="kt">void</span> <span class="nf">verifyExistsEmail</span><span class="o">(</span><span class="nc">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">member</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findByEmail</span><span class="o">(</span><span class="n">email</span><span class="o">);</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span>
    <span class="k">throw</span> <span class="k">new</span> <span class="nf">BusinessLogicException</span><span class="o">(</span><span class="nc">ExceptionCode</span><span class="o">.</span><span class="na">MEMBER_EXISTS</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<p>MemberService 로직은 너무 간단하게<br />
기존 member와 email을 비교해 같은 email이 존재하면<br />
throw Exception을 하게 되어있다.</p>

<p>우리는 위에서 메서드 호출할때의 매개변수 “dhfif718@naver.com”과<br />
결과로 반환된 객체의 email “dhfif718@naver.com” 결과적으로 같기 때문에<br />
if(member.isPresent()) 조건에 성립되<br />
Exception을 던지게되어 Serivce 로직을 검증해볼 수 있다.</p>

<p>자연스럽게 예외가 던져지므로 해당 Service 로직은 종료되고<br />
.save()까지 검증할 필요가 없어진다.<br />
save를 검증하는 것은 사실 비지니스로직을 검증하는 것보단<br />
Repository를 검증하는 것에 가깝기 때문에<br />
Serivce 계층에서 검증하는 로직을 굳이 작성하지 않아도 될 것 같다.</p>

<p><br /></p>

<h3 id="오늘-만난-에러">오늘 만난 에러</h3>

<p>이렇게 위에서 Controller과 Service 계층을 분리해서<br />
따로 따로 테스트할 수 있게 프로그램을 작성하고<br />
정상적으로 수행되는 모습을 볼 수 있었다.</p>

<p>Mockito라는 API를 처음 사용하다보니<br />
여러가지 에러들을 만났고 그중에 기억남는 에러를 적어본다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">cancelOrderTest</span><span class="o">(){</span>
    <span class="nc">Order</span> <span class="n">order</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Order</span><span class="o">();</span>
    <span class="kt">long</span> <span class="n">orderId</span> <span class="o">=</span> <span class="mi">1L</span><span class="o">;</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Order</span><span class="o">&gt;</span> <span class="n">findOrder</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">order</span><span class="o">);</span>
    <span class="n">given</span><span class="o">(</span><span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">order</span><span class="o">.</span><span class="na">getOrderId</span><span class="o">())).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">findOrder</span><span class="o">);</span>
    <span class="n">assertThrows</span><span class="o">(</span><span class="nc">BusinessLogicException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">orderService</span><span class="o">.</span><span class="na">cancelOrder</span><span class="o">(</span><span class="n">orderId</span><span class="o">));</span>
<span class="o">}</span>
</code></pre></div></div>
<p>위와 같이 테스트 코드를 작성후 실행시켜 보았는데</p>

<p><img src="https://lh3.googleusercontent.com/u/0/drive-viewer/AJc5JmTitd8kl31KKTTaIB7nQrL7AvxwT54hIPaJEcnmdlC5BhBrezzcRcqyhYeyWzO1aK7O1OYjVG_yqk2EYkUVRD6lZHWCiw=w3024-h1620" alt="image" class="align-left" style="max-width: 100%" /></p>

<p>misusing.PotentialStubbingProblem 이라는 에러를 만났다.<br />
잠재적인 Stubbing 문제라면서 예외가 잡혔다.</p>

<p>코드를 열심히 보다보니..<br />
given()안의 매개변수로 order.getOrderId()를 넣어주고 있었고<br />
cancelOrder();메서드 호출하는 매개변수에는 orderId를 넣어주고 있었다.</p>

<p>여기서 order객체가 만들어질때 Long타입으로 null로 만들어졌고<br />
타입이 잘못들어간 상태로 테스트 코드를 실행하니까 위와 같은 에러가 발생했다.</p>

<p>해결은</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">given</span><span class="o">(</span><span class="n">orderRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="nc">Mockito</span><span class="o">.</span><span class="na">anyLong</span><span class="o">())).</span><span class="na">willReturn</span><span class="o">(</span><span class="n">findOrder</span><span class="o">);</span>
</code></pre></div></div>
<p>위와 같이 타입을 Mockito.anyLong()을 붙여서 해결이 가능하고<br />
order.serOrderId(orderId);를 통해서 값을 넣어주어도<br />
문제가 해결이 가능하다.</p>

<hr />

<p>오늘 공부는 여기까지 했고<br />
JUnit관련해서 Slice 테스트에 대해 자세히 배울 수 있어서<br />
너무 유익한 시간이였다.</p>

<p>한가지 아쉬운점은 많은 api중에서도 한정적인 것만 사용해보았기에<br />
지식층이 얕은점..?이 조금 아쉬웠고<br />
이후에 프로젝트하기전에 테스트 관련 여러 메서드들을 공부한다음<br />
테스트 코드를 작성해봐야겠다.</p>

<p>오늘 공부는 여기서 끝 !</p>

<p><br /></p>

<p><span style="color:#994C00"><strong>오늘의 커피량</strong></span>: ☕️ ☕️ ☕️<br />
<strong>오늘의 점심</strong>: 카레, 라면, 밥</p>]]></content><author><name>LEE JAEHYEOK</name></author><category term="TIL" /><category term="TIL" /><category term="부트캠프" /><category term="코드스테이츠" /><summary type="html"><![CDATA[]]></summary></entry></feed>